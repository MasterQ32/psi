# Psi Language Tokens, required by psi.grm

# Comments
Comment                := \/\/.*
LongComment:Singleline := \/\*.*?\*\/
Whitespace             := \s+

# Must be before COLON def
ENUMVAL    := \:[\w-[\d]]\w*

# Brackets
CURLY_O    := \{
CURLY_C    := \}
ROUND_O    := \(
ROUND_C    := \)
SQUARE_O   := \[
SQUARE_C   := \]

# Keywords
IMPORT     := \bimport\b
EXPORT     := \bexport\b
MODULE     := \bmodule\b
ASSERT     := \bassert\b
ERROR      := \berror\b
CONST      := \bconst\b
VAR        := \bvar\b
TYPE       := \btype\b
FN         := \bfn\b
NEW        := \bnew\b
OPERATOR   := \boperator\b

# Type Names
ENUM       := \benum\b
RECORD     := \brecord\b
REF        := \bref\b
ARRAY      := \barray\b

# Parameter Spec
INOUT      := \binout\b
IN         := \bin\b
OUT        := \bout\b
THIS       := \bthis\b

# Control flow
FOR        := \bfor\b
WHILE      := \bwhile\b
LOOP       := \bloop\b
UNTIL      := \buntil\b
IF         := \bif\b
ELSE       := \belse\b
SELECT     := \bselect\b
WHEN       := \bwhen\b
OTHERWISE  := \botherwise\b
RESTRICT   := \brestrict\b

# Control flow control
BREAK      := \bbreak\b
CONTINUE   := \bcontinue\b
FALLTROUGH := \bfallthrough\b
RETURN     := \breturn\b
GOTO       := \bgoto\b

# Operators

# Writeback operators
WB_CONCAT  := \-\-\=
WB_PLUS    := \+\=
WB_MINUS   := \-\=
WB_EXP     := \*\*\=
WB_MULT    := \*\=
WB_MOD     := \%\=
WB_DIV     := \/\=
WB_AND     := \&\=
WB_OR      := \|\=
WB_XOR     := \^\=
WB_ASR     := \>\>\>\=
WB_SHL     := \<\<\=
WB_SHR     := \>\>\=

MAPSTO     := \=\>

ASR        := \>\>\>
SHL        := \<\<
SHR        := \>\>

FORWARD    := \-\>
BACKWARD   := \<\-

# Comparison operators
LEQUAL     := \<\=
GEQUAL     := \>\=
EQUAL      := \=\=
NEQUAL     := \!\=
LESS       := \<
MORE       := \>

IS         := \=
ASSIGN     := \:\=

CONCAT     := \-\-

DOT        := \.
META       := \'
COMMA      := \,
TERMINATOR := \;
COLON      := \:

LAMBDA     := \\

# Arithmetic operators
PLUS       := \+
MINUS      := \-
EXP        := \*\*
MULT       := \*
MOD        := \%
DIV        := \/

# Logic operators
AND        := \&
OR         := \|
INVERT     := \~
XOR        := \^

# Type Literals

# negative numbers are made via operator
NUMBER     := 0x[A-Fa-f0-9]+|\d+(\.\d+)?

STRING     := "(?:\\"|.)*?"

# Must not start with a number, but is allowed to any word character
IDENT      := [\w-[\d]]\w*

# Post Processings

PP(Comment)     := (text) => null
PP(LongComment) := (text) => null
PP(Whitespace)  := (text) => null

PP(STRING)      := (text) => text.Substring(1, text.Length - 2)
PP(ENUMVAL)     := (text) => text.Substring(1)