﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var tokens = new TokenList()
	{
		// Subscript operator
		{ "DOT",         "Dot",                           "."   },
		{ "META",        "Meta",                          "'"   },
		
		// Unary operators
		{ "INVERT",      "Invert",                        "~"   },
		/* PLUS */
		/* MINUS */
		
		// Binary operators
		{ "ASR",         "ArithmeticShiftRight",          ">>>" },
		{ "SHL",         "ShiftLeft",                     "<<"  },
		{ "SHR",         "ShiftRight",                    ">>"  },
		{ "PLUS",        "Plus",                          "+"   },
		{ "MINUS",       "Minus",                         "-"   },
		{ "CONCAT",      "Concat",                        "--"  },
		{ "MULT",        "Multiply",                      "*"   },
		{ "DIV",         "Divide",                        "/"   },
		{ "MOD",         "Modulo",                        "%"   },
		{ "EXP",         "Exponentiate",                  "**"  },
		{ "AND",         "And",                           "&"   },
		{ "OR",          "Or",                            "|"   },
		{ "XOR",         "Xor",                           "^"   },
		{ "FORWARD",     "Forward",                       "->"  },
		{ "BACKWARD",    "Backward",                      "<-"  },
		
		// Assignment 
		{ "IS",          "CopyAssign",                    "="   },
		{ "ASSIGN",      "SemanticAssign",                ":="  },
		
		// Modify-and-writeback
		{ "WB_ASR",      "WritebackArithmeticShiftRight", ">>>=" },
		{ "WB_SHL",      "WritebackShiftLeft",            "<<="  },
		{ "WB_SHR",      "WritebackShiftRight",           ">>="  },
		{ "WB_PLUS",     "WritebackPlus",                 "+="   },
		{ "WB_MINUS",    "WritebackMinus",                "-="   },
		{ "WB_CONCAT",   "WritebackConcat",               "--="  },
		{ "WB_MULT",     "WritebackMultiply",             "*="   },
		{ "WB_DIV",      "WritebackDivide",               "/="   },
		{ "WB_MOD",      "WritebackModulo",               "%="   },
		{ "WB_EXP",      "WritebackExponentiate",         "**="  },
		{ "WB_INVERT",   "WritebackInvert",               "~="   },
		{ "WB_AND",      "WritebackAnd",                  "&="   },
		{ "WB_OR",       "WritebackOr",                   "|="   },
		{ "WB_XOR",      "WritebackXor",                  "^="   },
		
		// Relational
		{ "LEQUAL",      "LessOrEqual",                   "<="   },
		{ "GEQUAL",      "MoreOrEqual",                   ">="   },
		{ "EQUAL",       "Equals",                        "=="   },
		{ "NEQUAL",      "NotEquals",                     "!="   },
		{ "LESS",        "Less",                          "<"    },
		{ "MORE",        "More",                          ">"    },
	};
#>
using System;
using CompilerKit;

namespace PsiCompiler.Grammar
{
	internal static class Converter
	{
		public static PsiOperator? ToOperator(Token<PsiTokenType> token)
		{
			switch(token.Type)
			{
<#			foreach(var pair in tokens) { #>
				case PsiTokenType.<#=pair.Item1#>: return PsiOperator.<#=pair.Item2#>;
<#			} #>
				default: return null;
			}
		}
		
		public static string ToString(PsiOperator op)
		{
			switch(op)
			{
<#			foreach(var pair in tokens) { #>
				case PsiOperator.<#=pair.Item2#>: return "<#=pair.Item3#>";
<#			} #>
				default: return null;
			}
		}
	}
}
<#+
class TokenList : List<Tuple<string,string,string>>
	{
		public void Add(string tok, string op, string str)
		{
			this.Add(Tuple.Create(tok, op, str));
		}
	}
#>