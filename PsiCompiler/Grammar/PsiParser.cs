// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-2U3VU0H
// DateTime: 17.10.2017 23:50:56
// UserName: Felix
// Input file <Psi.y - 17.10.2017 23:49:53>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace PsiCompiler.Grammar
{
public enum PsiTokenType {error=2,EOF=3,CURLY_O=4,CURLY_C=5,ROUND_O=6,
    ROUND_C=7,POINTY_O=8,POINTY_C=9,SQUARE_O=10,SQUARE_C=11,IMPORT=12,
    EXPORT=13,MODULE=14,ASSERT=15,ERROR=16,CONST=17,VAR=18,
    TYPE=19,FN=20,NEW=21,OPERATOR=22,ENUM=23,RECORD=24,
    OPTION=25,INOUT=26,IN=27,OUT=28,THIS=29,FOR=30,
    WHILE=31,LOOP=32,UNTIL=33,IF=34,ELSE=35,SELECT=36,
    WHEN=37,OTHERWISE=38,RESTRICT=39,BREAK=40,CONTINUE=41,NEXT=42,
    RETURN=43,GOTO=44,MAPSTO=45,COMMA=46,TERMINATOR=47,COLON=48,
    LAMBDA=49,PLUS=50,MINUS=51,MULT=52,DIV=53,AND=54,
    OR=55,INVERT=56,XOR=57,CONCAT=58,DOT=59,META=60,
    EXP=61,MOD=62,FORWARD=63,BACKWARD=64,LEQUAL=65,GEQUAL=66,
    EQUAL=67,NEQUAL=68,LESS=69,MORE=70,IS=71,ASSIGN=72,
    ASR=73,SHL=74,SHR=75,WB_PLUS=76,WB_MINUS=77,WB_MULT=78,
    WB_DIV=79,WB_AND=80,WB_OR=81,WB_INVERT=82,WB_XOR=83,WB_CONCAT=84,
    WB_EXP=85,WB_MOD=86,WB_ASR=87,WB_SHL=88,WB_SHR=89,NUMBER=90,
    STRING=91,ENUMVAL=92,IDENT=93,Comment=94,LongComment=95,Whitespace=96,
    UMINUS=97,UPLUS=98,UINVERT=99};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class PsiParser: ShiftReduceParser<ParserNode, LexLocation>
{
  // Verbatim content from Psi.y - 17.10.2017 23:49:53
#line 2 "Psi.y"
    Dictionary<string,int> regs = new Dictionary<string,int>();
#line default
  // End verbatim content from Psi.y - 17.10.2017 23:49:53

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[149];
  private static State[] states = new State[231];
  private static string[] nonTerms = new string[] {
      "program", "identifier", "module", "modname", "assertion", "type", "expression", 
      "expr_or", "expr_xor", "expr_and", "equality", "comparison", "expr_arrows", 
      "sum", "term", "expo", "shifting", "unary", "value", "exprlist", "declaration", 
      "typedecl", "vardecl", "export", "storage", "arglist", "argument", "functiontype", 
      "paramlist", "parameter", "prefix", "statement", "block", "stmtlist", "$accept", 
      "terminator", };

  static PsiParser() {
    states[0] = new State(-2,new int[]{-1,1});
    states[1] = new State(new int[]{3,2,15,6,13,192,14,223,19,-21,17,-21,18,-21},new int[]{-5,3,-21,4,-3,5,-24,170});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(-5);
    states[6] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-7,7,-8,164,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[7] = new State(new int[]{47,8,71,9,72,76,84,103,76,119,77,137,85,142,78,144,86,146,79,148,80,150,81,152,82,154,83,156,87,158,88,160,89,162});
    states[8] = new State(-6);
    states[9] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,10,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[10] = new State(-23);
    states[11] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-9,12,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[12] = new State(-40);
    states[13] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-10,14,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[14] = new State(-42);
    states[15] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-11,16,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[16] = new State(new int[]{67,17,68,81,54,-44,57,-44,55,-44,47,-44,71,-44,72,-44,84,-44,76,-44,77,-44,85,-44,78,-44,86,-44,79,-44,80,-44,81,-44,82,-44,83,-44,87,-44,88,-44,89,-44,11,-44,46,-44,7,-44,59,-44,60,-44,10,-44,6,-44,73,-44,75,-44,74,-44,61,-44,52,-44,53,-44,62,-44,50,-44,51,-44,58,-44,63,-44,64,-44,65,-44,66,-44,69,-44,70,-44,3,-44,15,-44,13,-44,14,-44,19,-44,17,-44,18,-44,5,-44,4,-44,45,-44});
    states[17] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-12,18,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[18] = new State(-46);
    states[19] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-13,20,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[20] = new State(-49);
    states[21] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-14,22,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[22] = new State(-54);
    states[23] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-15,24,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[24] = new State(new int[]{52,-57,53,-57,62,111,50,-57,51,-57,58,-57,63,-57,64,-57,65,-57,66,-57,69,-57,70,-57,67,-57,68,-57,54,-57,57,-57,55,-57,47,-57,71,-57,72,-57,84,-57,76,-57,77,-57,85,-57,78,-57,86,-57,79,-57,80,-57,81,-57,82,-57,83,-57,87,-57,88,-57,89,-57,11,-57,46,-57,7,-57,59,-57,60,-57,10,-57,6,-57,73,-57,75,-57,74,-57,61,-57,3,-57,15,-57,13,-57,14,-57,19,-57,17,-57,18,-57,5,-57,4,-57,45,-57});
    states[25] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-16,26,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[26] = new State(new int[]{61,27,52,-61,53,-61,62,-61,50,-61,51,-61,58,-61,63,-61,64,-61,65,-61,66,-61,69,-61,70,-61,67,-61,68,-61,54,-61,57,-61,55,-61,47,-61,71,-61,72,-61,84,-61,76,-61,77,-61,85,-61,78,-61,86,-61,79,-61,80,-61,81,-61,82,-61,83,-61,87,-61,88,-61,89,-61,11,-61,46,-61,7,-61,59,-61,60,-61,10,-61,6,-61,73,-61,75,-61,74,-61,3,-61,15,-61,13,-61,14,-61,19,-61,17,-61,18,-61,5,-61,4,-61,45,-61});
    states[27] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-17,28,-18,113,-19,124,-2,125,-28,133});
    states[28] = new State(new int[]{73,29,75,92,74,220,61,-65,52,-65,53,-65,62,-65,50,-65,51,-65,58,-65,63,-65,64,-65,65,-65,66,-65,69,-65,70,-65,67,-65,68,-65,54,-65,57,-65,55,-65,47,-65,71,-65,72,-65,84,-65,76,-65,77,-65,85,-65,78,-65,86,-65,79,-65,80,-65,81,-65,82,-65,83,-65,87,-65,88,-65,89,-65,11,-65,46,-65,7,-65,59,-65,60,-65,10,-65,6,-65,3,-65,15,-65,13,-65,14,-65,19,-65,17,-65,18,-65,5,-65,4,-65,45,-65});
    states[29] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-18,30,-19,124,-2,125,-28,133});
    states[30] = new State(-67);
    states[31] = new State(new int[]{6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-19,32,-2,125,-28,133});
    states[32] = new State(new int[]{59,33,60,69,10,71,6,96,73,-71,75,-71,74,-71,61,-71,52,-71,53,-71,62,-71,50,-71,51,-71,58,-71,63,-71,64,-71,65,-71,66,-71,69,-71,70,-71,67,-71,68,-71,54,-71,57,-71,55,-71,47,-71,71,-71,72,-71,84,-71,76,-71,77,-71,85,-71,78,-71,86,-71,79,-71,80,-71,81,-71,82,-71,83,-71,87,-71,88,-71,89,-71,11,-71,46,-71,7,-71,3,-71,15,-71,13,-71,14,-71,19,-71,17,-71,18,-71,5,-71,4,-71,45,-71});
    states[33] = new State(new int[]{93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68},new int[]{-2,34});
    states[34] = new State(-75);
    states[35] = new State(-115);
    states[36] = new State(-116);
    states[37] = new State(-117);
    states[38] = new State(-118);
    states[39] = new State(-119);
    states[40] = new State(-120);
    states[41] = new State(-121);
    states[42] = new State(-122);
    states[43] = new State(-123);
    states[44] = new State(-124);
    states[45] = new State(-125);
    states[46] = new State(-126);
    states[47] = new State(-127);
    states[48] = new State(-128);
    states[49] = new State(-129);
    states[50] = new State(-130);
    states[51] = new State(-131);
    states[52] = new State(-132);
    states[53] = new State(-133);
    states[54] = new State(-134);
    states[55] = new State(-135);
    states[56] = new State(-136);
    states[57] = new State(-137);
    states[58] = new State(-138);
    states[59] = new State(-139);
    states[60] = new State(-140);
    states[61] = new State(-141);
    states[62] = new State(-142);
    states[63] = new State(-143);
    states[64] = new State(-144);
    states[65] = new State(-145);
    states[66] = new State(-146);
    states[67] = new State(-147);
    states[68] = new State(-148);
    states[69] = new State(new int[]{93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68},new int[]{-2,70});
    states[70] = new State(-76);
    states[71] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-20,72,-7,222,-8,164,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[72] = new State(new int[]{11,73,46,74});
    states[73] = new State(-77);
    states[74] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-7,75,-8,164,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[75] = new State(new int[]{71,9,72,76,84,103,76,119,77,137,85,142,78,144,86,146,79,148,80,150,81,152,82,154,83,156,87,158,88,160,89,162,11,-107,46,-107});
    states[76] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,77,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[77] = new State(-24);
    states[78] = new State(new int[]{57,13,55,-41,47,-41,71,-41,72,-41,84,-41,76,-41,77,-41,85,-41,78,-41,86,-41,79,-41,80,-41,81,-41,82,-41,83,-41,87,-41,88,-41,89,-41,11,-41,46,-41,7,-41,59,-41,60,-41,10,-41,6,-41,73,-41,75,-41,74,-41,61,-41,52,-41,53,-41,62,-41,50,-41,51,-41,58,-41,63,-41,64,-41,65,-41,66,-41,69,-41,70,-41,67,-41,68,-41,54,-41,3,-41,15,-41,13,-41,14,-41,19,-41,17,-41,18,-41,5,-41,4,-41,45,-41});
    states[79] = new State(new int[]{54,15,57,-43,55,-43,47,-43,71,-43,72,-43,84,-43,76,-43,77,-43,85,-43,78,-43,86,-43,79,-43,80,-43,81,-43,82,-43,83,-43,87,-43,88,-43,89,-43,11,-43,46,-43,7,-43,59,-43,60,-43,10,-43,6,-43,73,-43,75,-43,74,-43,61,-43,52,-43,53,-43,62,-43,50,-43,51,-43,58,-43,63,-43,64,-43,65,-43,66,-43,69,-43,70,-43,67,-43,68,-43,3,-43,15,-43,13,-43,14,-43,19,-43,17,-43,18,-43,5,-43,4,-43,45,-43});
    states[80] = new State(new int[]{67,17,68,81,54,-45,57,-45,55,-45,47,-45,71,-45,72,-45,84,-45,76,-45,77,-45,85,-45,78,-45,86,-45,79,-45,80,-45,81,-45,82,-45,83,-45,87,-45,88,-45,89,-45,11,-45,46,-45,7,-45,59,-45,60,-45,10,-45,6,-45,73,-45,75,-45,74,-45,61,-45,52,-45,53,-45,62,-45,50,-45,51,-45,58,-45,63,-45,64,-45,65,-45,66,-45,69,-45,70,-45,3,-45,15,-45,13,-45,14,-45,19,-45,17,-45,18,-45,5,-45,4,-45,45,-45});
    states[81] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-12,82,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[82] = new State(-47);
    states[83] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-13,84,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[84] = new State(-50);
    states[85] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-14,86,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[86] = new State(-55);
    states[87] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-15,88,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[88] = new State(new int[]{52,-58,53,-58,62,111,50,-58,51,-58,58,-58,63,-58,64,-58,65,-58,66,-58,69,-58,70,-58,67,-58,68,-58,54,-58,57,-58,55,-58,47,-58,71,-58,72,-58,84,-58,76,-58,77,-58,85,-58,78,-58,86,-58,79,-58,80,-58,81,-58,82,-58,83,-58,87,-58,88,-58,89,-58,11,-58,46,-58,7,-58,59,-58,60,-58,10,-58,6,-58,73,-58,75,-58,74,-58,61,-58,3,-58,15,-58,13,-58,14,-58,19,-58,17,-58,18,-58,5,-58,4,-58,45,-58});
    states[89] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-16,90,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[90] = new State(new int[]{61,27,52,-62,53,-62,62,-62,50,-62,51,-62,58,-62,63,-62,64,-62,65,-62,66,-62,69,-62,70,-62,67,-62,68,-62,54,-62,57,-62,55,-62,47,-62,71,-62,72,-62,84,-62,76,-62,77,-62,85,-62,78,-62,86,-62,79,-62,80,-62,81,-62,82,-62,83,-62,87,-62,88,-62,89,-62,11,-62,46,-62,7,-62,59,-62,60,-62,10,-62,6,-62,73,-62,75,-62,74,-62,3,-62,15,-62,13,-62,14,-62,19,-62,17,-62,18,-62,5,-62,4,-62,45,-62});
    states[91] = new State(new int[]{73,29,75,92,74,220,61,-66,52,-66,53,-66,62,-66,50,-66,51,-66,58,-66,63,-66,64,-66,65,-66,66,-66,69,-66,70,-66,67,-66,68,-66,54,-66,57,-66,55,-66,47,-66,71,-66,72,-66,84,-66,76,-66,77,-66,85,-66,78,-66,86,-66,79,-66,80,-66,81,-66,82,-66,83,-66,87,-66,88,-66,89,-66,11,-66,46,-66,7,-66,59,-66,60,-66,10,-66,6,-66,3,-66,15,-66,13,-66,14,-66,19,-66,17,-66,18,-66,5,-66,4,-66,45,-66});
    states[92] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-18,93,-19,124,-2,125,-28,133});
    states[93] = new State(-68);
    states[94] = new State(new int[]{6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-19,95,-2,125,-28,133});
    states[95] = new State(new int[]{59,33,60,69,10,71,6,96,73,-72,75,-72,74,-72,61,-72,52,-72,53,-72,62,-72,50,-72,51,-72,58,-72,63,-72,64,-72,65,-72,66,-72,69,-72,70,-72,67,-72,68,-72,54,-72,57,-72,55,-72,47,-72,71,-72,72,-72,84,-72,76,-72,77,-72,85,-72,78,-72,86,-72,79,-72,80,-72,81,-72,82,-72,83,-72,87,-72,88,-72,89,-72,11,-72,46,-72,7,-72,3,-72,15,-72,13,-72,14,-72,19,-72,17,-72,18,-72,5,-72,4,-72,45,-72});
    states[96] = new State(new int[]{7,97,50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-26,98,-27,219,-7,102,-8,164,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,216,-28,133});
    states[97] = new State(-78);
    states[98] = new State(new int[]{7,99,46,100});
    states[99] = new State(-79);
    states[100] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-27,101,-7,102,-8,164,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,216,-28,133});
    states[101] = new State(-102);
    states[102] = new State(new int[]{71,9,72,76,84,103,76,119,77,137,85,142,78,144,86,146,79,148,80,150,81,152,82,154,83,156,87,158,88,160,89,162,7,-104,46,-104});
    states[103] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,104,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[104] = new State(-25);
    states[105] = new State(new int[]{65,19,66,83,69,106,70,214,67,-48,68,-48,54,-48,57,-48,55,-48,47,-48,71,-48,72,-48,84,-48,76,-48,77,-48,85,-48,78,-48,86,-48,79,-48,80,-48,81,-48,82,-48,83,-48,87,-48,88,-48,89,-48,11,-48,46,-48,7,-48,59,-48,60,-48,10,-48,6,-48,73,-48,75,-48,74,-48,61,-48,52,-48,53,-48,62,-48,50,-48,51,-48,58,-48,63,-48,64,-48,3,-48,15,-48,13,-48,14,-48,19,-48,17,-48,18,-48,5,-48,4,-48,45,-48});
    states[106] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-13,107,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[107] = new State(-51);
    states[108] = new State(new int[]{50,23,51,87,58,109,63,-56,64,-56,65,-56,66,-56,69,-56,70,-56,67,-56,68,-56,54,-56,57,-56,55,-56,47,-56,71,-56,72,-56,84,-56,76,-56,77,-56,85,-56,78,-56,86,-56,79,-56,80,-56,81,-56,82,-56,83,-56,87,-56,88,-56,89,-56,11,-56,46,-56,7,-56,59,-56,60,-56,10,-56,6,-56,73,-56,75,-56,74,-56,61,-56,52,-56,53,-56,62,-56,3,-56,15,-56,13,-56,14,-56,19,-56,17,-56,18,-56,5,-56,4,-56,45,-56});
    states[109] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-15,110,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[110] = new State(-59);
    states[111] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-16,112,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[112] = new State(-63);
    states[113] = new State(-70);
    states[114] = new State(new int[]{6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-19,115,-2,125,-28,133});
    states[115] = new State(new int[]{59,-73,60,-73,10,71,6,96,73,-73,75,-73,74,-73,61,-73,52,-73,53,-73,62,-73,50,-73,51,-73,58,-73,63,-73,64,-73,65,-73,66,-73,69,-73,70,-73,67,-73,68,-73,54,-73,57,-73,55,-73,47,-73,71,-73,72,-73,84,-73,76,-73,77,-73,85,-73,78,-73,86,-73,79,-73,80,-73,81,-73,82,-73,83,-73,87,-73,88,-73,89,-73,11,-73,46,-73,7,-73,3,-73,15,-73,13,-73,14,-73,19,-73,17,-73,18,-73,5,-73,4,-73,45,-73});
    states[116] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-7,117,-8,164,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[117] = new State(new int[]{7,118,71,9,72,76,84,103,76,119,77,137,85,142,78,144,86,146,79,148,80,150,81,152,82,154,83,156,87,158,88,160,89,162});
    states[118] = new State(-80);
    states[119] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,120,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[120] = new State(-26);
    states[121] = new State(new int[]{63,21,64,85,65,-53,66,-53,69,-53,70,-53,67,-53,68,-53,54,-53,57,-53,55,-53,47,-53,71,-53,72,-53,84,-53,76,-53,77,-53,85,-53,78,-53,86,-53,79,-53,80,-53,81,-53,82,-53,83,-53,87,-53,88,-53,89,-53,11,-53,46,-53,7,-53,59,-53,60,-53,10,-53,6,-53,73,-53,75,-53,74,-53,61,-53,52,-53,53,-53,62,-53,50,-53,51,-53,58,-53,3,-53,15,-53,13,-53,14,-53,19,-53,17,-53,18,-53,5,-53,4,-53,45,-53});
    states[122] = new State(new int[]{52,25,53,89,62,111,50,-60,51,-60,58,-60,63,-60,64,-60,65,-60,66,-60,69,-60,70,-60,67,-60,68,-60,54,-60,57,-60,55,-60,47,-60,71,-60,72,-60,84,-60,76,-60,77,-60,85,-60,78,-60,86,-60,79,-60,80,-60,81,-60,82,-60,83,-60,87,-60,88,-60,89,-60,11,-60,46,-60,7,-60,59,-60,60,-60,10,-60,6,-60,73,-60,75,-60,74,-60,61,-60,3,-60,15,-60,13,-60,14,-60,19,-60,17,-60,18,-60,5,-60,4,-60,45,-60});
    states[123] = new State(new int[]{61,27,52,-64,53,-64,62,-64,50,-64,51,-64,58,-64,63,-64,64,-64,65,-64,66,-64,69,-64,70,-64,67,-64,68,-64,54,-64,57,-64,55,-64,47,-64,71,-64,72,-64,84,-64,76,-64,77,-64,85,-64,78,-64,86,-64,79,-64,80,-64,81,-64,82,-64,83,-64,87,-64,88,-64,89,-64,11,-64,46,-64,7,-64,59,-64,60,-64,10,-64,6,-64,73,-64,75,-64,74,-64,3,-64,15,-64,13,-64,14,-64,19,-64,17,-64,18,-64,5,-64,4,-64,45,-64});
    states[124] = new State(new int[]{59,33,60,69,10,71,6,96,73,-74,75,-74,74,-74,61,-74,52,-74,53,-74,62,-74,50,-74,51,-74,58,-74,63,-74,64,-74,65,-74,66,-74,69,-74,70,-74,67,-74,68,-74,54,-74,57,-74,55,-74,47,-74,71,-74,72,-74,84,-74,76,-74,77,-74,85,-74,78,-74,86,-74,79,-74,80,-74,81,-74,82,-74,83,-74,87,-74,88,-74,89,-74,11,-74,46,-74,7,-74,3,-74,15,-74,13,-74,14,-74,19,-74,17,-74,18,-74,5,-74,4,-74,45,-74});
    states[125] = new State(-81);
    states[126] = new State(new int[]{6,127,59,-124,60,-124,10,-124,73,-124,75,-124,74,-124,61,-124,52,-124,53,-124,62,-124,50,-124,51,-124,58,-124,63,-124,64,-124,65,-124,66,-124,69,-124,70,-124,67,-124,68,-124,54,-124,57,-124,55,-124,47,-124,71,-124,72,-124,84,-124,76,-124,77,-124,85,-124,78,-124,86,-124,79,-124,80,-124,81,-124,82,-124,83,-124,87,-124,88,-124,89,-124,11,-124,46,-124,7,-124,3,-124,15,-124,13,-124,14,-124,19,-124,17,-124,18,-124,5,-124,4,-124,45,-124,48,-124});
    states[127] = new State(new int[]{7,210,27,-97,28,-97,26,-97,29,-97,93,-97,12,-97,13,-97,14,-97,15,-97,16,-97,17,-97,18,-97,19,-97,20,-97,21,-97,22,-97,23,-97,24,-97,25,-97,30,-97,31,-97,32,-97,33,-97,34,-97,35,-97,36,-97,37,-97,38,-97,39,-97,40,-97,41,-97,42,-97,43,-97,44,-97},new int[]{-29,128,-30,213,-31,198});
    states[128] = new State(new int[]{7,129,46,196});
    states[129] = new State(new int[]{63,130,45,-90,4,-90,59,-90,60,-90,10,-90,6,-90,73,-90,75,-90,74,-90,61,-90,52,-90,53,-90,62,-90,50,-90,51,-90,58,-90,64,-90,65,-90,66,-90,69,-90,70,-90,67,-90,68,-90,54,-90,57,-90,55,-90,47,-90,71,-90,72,-90,84,-90,76,-90,77,-90,85,-90,78,-90,86,-90,79,-90,80,-90,81,-90,82,-90,83,-90,87,-90,88,-90,89,-90,11,-90,46,-90,7,-90,3,-90,15,-90,13,-90,14,-90,19,-90,17,-90,18,-90,5,-90});
    states[130] = new State(new int[]{6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-6,131,-19,132,-2,125,-28,133});
    states[131] = new State(-88);
    states[132] = new State(new int[]{59,33,60,69,10,71,6,96,55,-16,47,-16,71,-16,72,-16,84,-16,76,-16,77,-16,85,-16,78,-16,86,-16,79,-16,80,-16,81,-16,82,-16,83,-16,87,-16,88,-16,89,-16,11,-16,46,-16,7,-16,73,-16,75,-16,74,-16,61,-16,52,-16,53,-16,62,-16,50,-16,51,-16,58,-16,63,-16,64,-16,65,-16,66,-16,69,-16,70,-16,67,-16,68,-16,54,-16,57,-16,3,-16,15,-16,13,-16,14,-16,19,-16,17,-16,18,-16,5,-16,4,-16,45,-16});
    states[133] = new State(new int[]{45,135,4,165,59,-82,60,-82,10,-82,6,-82,73,-82,75,-82,74,-82,61,-82,52,-82,53,-82,62,-82,50,-82,51,-82,58,-82,63,-82,64,-82,65,-82,66,-82,69,-82,70,-82,67,-82,68,-82,54,-82,57,-82,55,-82,47,-82,71,-82,72,-82,84,-82,76,-82,77,-82,85,-82,78,-82,86,-82,79,-82,80,-82,81,-82,82,-82,83,-82,87,-82,88,-82,89,-82,11,-82,46,-82,7,-82,3,-82,15,-82,13,-82,14,-82,19,-82,17,-82,18,-82,5,-82},new int[]{-33,134});
    states[134] = new State(-83);
    states[135] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-7,136,-8,164,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[136] = new State(new int[]{71,9,72,76,84,103,76,119,77,137,85,142,78,144,86,146,79,148,80,150,81,152,82,154,83,156,87,158,88,160,89,162,59,-84,60,-84,10,-84,6,-84,73,-84,75,-84,74,-84,61,-84,52,-84,53,-84,62,-84,50,-84,51,-84,58,-84,63,-84,64,-84,65,-84,66,-84,69,-84,70,-84,67,-84,68,-84,54,-84,57,-84,55,-84,47,-84,11,-84,46,-84,7,-84,3,-84,15,-84,13,-84,14,-84,19,-84,17,-84,18,-84,5,-84,4,-84,45,-84});
    states[137] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,138,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[138] = new State(-27);
    states[139] = new State(-85);
    states[140] = new State(-86);
    states[141] = new State(-87);
    states[142] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,143,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[143] = new State(-28);
    states[144] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,145,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[145] = new State(-29);
    states[146] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,147,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[147] = new State(-30);
    states[148] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,149,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[149] = new State(-31);
    states[150] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,151,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[151] = new State(-32);
    states[152] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,153,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[153] = new State(-33);
    states[154] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,155,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[155] = new State(-34);
    states[156] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,157,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[157] = new State(-35);
    states[158] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,159,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[159] = new State(-36);
    states[160] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,161,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[161] = new State(-37);
    states[162] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-8,163,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[163] = new State(-38);
    states[164] = new State(new int[]{55,11,47,-39,71,-39,72,-39,84,-39,76,-39,77,-39,85,-39,78,-39,86,-39,79,-39,80,-39,81,-39,82,-39,83,-39,87,-39,88,-39,89,-39,11,-39,46,-39,7,-39,59,-39,60,-39,10,-39,6,-39,73,-39,75,-39,74,-39,61,-39,52,-39,53,-39,62,-39,50,-39,51,-39,58,-39,63,-39,64,-39,65,-39,66,-39,69,-39,70,-39,67,-39,68,-39,54,-39,57,-39,3,-39,15,-39,13,-39,14,-39,19,-39,17,-39,18,-39,5,-39,4,-39,45,-39});
    states[165] = new State(new int[]{5,195,13,-110,15,-110,4,-110,19,-110,17,-110,18,-110},new int[]{-34,166});
    states[166] = new State(new int[]{5,167,13,192,15,6,4,165,19,-21,17,-21,18,-21},new int[]{-32,168,-21,169,-24,170,-5,193,-33,194});
    states[167] = new State(-108);
    states[168] = new State(-111);
    states[169] = new State(-112);
    states[170] = new State(new int[]{19,173,17,190,18,191},new int[]{-22,171,-23,172,-25,178});
    states[171] = new State(-10);
    states[172] = new State(-11);
    states[173] = new State(new int[]{93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68},new int[]{-2,174});
    states[174] = new State(new int[]{71,175});
    states[175] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-7,176,-8,164,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[176] = new State(new int[]{47,177,71,9,72,76,84,103,76,119,77,137,85,142,78,144,86,146,79,148,80,150,81,152,82,154,83,156,87,158,88,160,89,162});
    states[177] = new State(-12);
    states[178] = new State(new int[]{93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68},new int[]{-2,179});
    states[179] = new State(new int[]{48,180,71,187});
    states[180] = new State(new int[]{6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-6,181,-19,132,-2,125,-28,133});
    states[181] = new State(new int[]{71,183,47,186,3,-17,15,-17,13,-17,14,-17,19,-17,17,-17,18,-17,5,-17,4,-17},new int[]{-36,182});
    states[182] = new State(-13);
    states[183] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-7,184,-8,164,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[184] = new State(new int[]{71,9,72,76,84,103,76,119,77,137,85,142,78,144,86,146,79,148,80,150,81,152,82,154,83,156,87,158,88,160,89,162,47,186,3,-17,15,-17,13,-17,14,-17,19,-17,17,-17,18,-17,5,-17,4,-17},new int[]{-36,185});
    states[185] = new State(-15);
    states[186] = new State(-18);
    states[187] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-7,188,-8,164,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[188] = new State(new int[]{71,9,72,76,84,103,76,119,77,137,85,142,78,144,86,146,79,148,80,150,81,152,82,154,83,156,87,158,88,160,89,162,47,186,3,-17,15,-17,13,-17,14,-17,19,-17,17,-17,18,-17,5,-17,4,-17},new int[]{-36,189});
    states[189] = new State(-14);
    states[190] = new State(-19);
    states[191] = new State(-20);
    states[192] = new State(-22);
    states[193] = new State(-113);
    states[194] = new State(-114);
    states[195] = new State(-109);
    states[196] = new State(-97,new int[]{-30,197,-31,198});
    states[197] = new State(-92);
    states[198] = new State(new int[]{27,206,28,207,26,208,29,209,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68},new int[]{-2,199});
    states[199] = new State(new int[]{48,200,71,204});
    states[200] = new State(new int[]{6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-6,201,-19,132,-2,125,-28,133});
    states[201] = new State(new int[]{71,202,7,-96,46,-96});
    states[202] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-7,203,-8,164,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[203] = new State(new int[]{71,9,72,76,84,103,76,119,77,137,85,142,78,144,86,146,79,148,80,150,81,152,82,154,83,156,87,158,88,160,89,162,7,-94,46,-94});
    states[204] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-7,205,-8,164,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[205] = new State(new int[]{71,9,72,76,84,103,76,119,77,137,85,142,78,144,86,146,79,148,80,150,81,152,82,154,83,156,87,158,88,160,89,162,7,-95,46,-95});
    states[206] = new State(new int[]{27,-98,28,-98,26,-98,29,-98,93,-98,12,-98,13,-98,14,-98,15,-98,16,-98,17,-98,18,-98,19,-98,20,-98,21,-98,22,-98,23,-98,24,-98,25,-98,30,-98,31,-98,32,-98,33,-98,34,-98,35,-98,36,-98,37,-98,38,-98,39,-98,40,-98,41,-98,42,-98,43,-98,44,-98,48,-131,71,-131});
    states[207] = new State(new int[]{27,-99,28,-99,26,-99,29,-99,93,-99,12,-99,13,-99,14,-99,15,-99,16,-99,17,-99,18,-99,19,-99,20,-99,21,-99,22,-99,23,-99,24,-99,25,-99,30,-99,31,-99,32,-99,33,-99,34,-99,35,-99,36,-99,37,-99,38,-99,39,-99,40,-99,41,-99,42,-99,43,-99,44,-99,48,-132,71,-132});
    states[208] = new State(new int[]{27,-100,28,-100,26,-100,29,-100,93,-100,12,-100,13,-100,14,-100,15,-100,16,-100,17,-100,18,-100,19,-100,20,-100,21,-100,22,-100,23,-100,24,-100,25,-100,30,-100,31,-100,32,-100,33,-100,34,-100,35,-100,36,-100,37,-100,38,-100,39,-100,40,-100,41,-100,42,-100,43,-100,44,-100,48,-130,71,-130});
    states[209] = new State(new int[]{27,-101,28,-101,26,-101,29,-101,93,-101,12,-101,13,-101,14,-101,15,-101,16,-101,17,-101,18,-101,19,-101,20,-101,21,-101,22,-101,23,-101,24,-101,25,-101,30,-101,31,-101,32,-101,33,-101,34,-101,35,-101,36,-101,37,-101,38,-101,39,-101,40,-101,41,-101,42,-101,43,-101,44,-101,48,-133,71,-133});
    states[210] = new State(new int[]{63,211,45,-91,4,-91,59,-91,60,-91,10,-91,6,-91,73,-91,75,-91,74,-91,61,-91,52,-91,53,-91,62,-91,50,-91,51,-91,58,-91,64,-91,65,-91,66,-91,69,-91,70,-91,67,-91,68,-91,54,-91,57,-91,55,-91,47,-91,71,-91,72,-91,84,-91,76,-91,77,-91,85,-91,78,-91,86,-91,79,-91,80,-91,81,-91,82,-91,83,-91,87,-91,88,-91,89,-91,11,-91,46,-91,7,-91,3,-91,15,-91,13,-91,14,-91,19,-91,17,-91,18,-91,5,-91});
    states[211] = new State(new int[]{6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-6,212,-19,132,-2,125,-28,133});
    states[212] = new State(-89);
    states[213] = new State(-93);
    states[214] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-13,215,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[215] = new State(-52);
    states[216] = new State(new int[]{48,217,59,-81,60,-81,10,-81,6,-81,73,-81,75,-81,74,-81,61,-81,52,-81,53,-81,62,-81,50,-81,51,-81,58,-81,63,-81,64,-81,65,-81,66,-81,69,-81,70,-81,67,-81,68,-81,54,-81,57,-81,55,-81,71,-81,72,-81,84,-81,76,-81,77,-81,85,-81,78,-81,86,-81,79,-81,80,-81,81,-81,82,-81,83,-81,87,-81,88,-81,89,-81,7,-81,46,-81});
    states[217] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-7,218,-8,164,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125,-28,133});
    states[218] = new State(new int[]{71,9,72,76,84,103,76,119,77,137,85,142,78,144,86,146,79,148,80,150,81,152,82,154,83,156,87,158,88,160,89,162,7,-105,46,-105});
    states[219] = new State(-103);
    states[220] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,126,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,139,92,140,90,141},new int[]{-18,221,-19,124,-2,125,-28,133});
    states[221] = new State(-69);
    states[222] = new State(new int[]{71,9,72,76,84,103,76,119,77,137,85,142,78,144,86,146,79,148,80,150,81,152,82,154,83,156,87,158,88,160,89,162,11,-106,46,-106});
    states[223] = new State(new int[]{93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68},new int[]{-4,224,-2,230});
    states[224] = new State(new int[]{4,225,59,228});
    states[225] = new State(-2,new int[]{-1,226});
    states[226] = new State(new int[]{5,227,15,6,13,192,14,223,19,-21,17,-21,18,-21},new int[]{-5,3,-21,4,-3,5,-24,170});
    states[227] = new State(-7);
    states[228] = new State(new int[]{93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68},new int[]{-2,229});
    states[229] = new State(-9);
    states[230] = new State(-8);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-35, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-1,-5});
    rules[4] = new Rule(-1, new int[]{-1,-21});
    rules[5] = new Rule(-1, new int[]{-1,-3});
    rules[6] = new Rule(-5, new int[]{15,-7,47});
    rules[7] = new Rule(-3, new int[]{14,-4,4,-1,5});
    rules[8] = new Rule(-4, new int[]{-2});
    rules[9] = new Rule(-4, new int[]{-4,59,-2});
    rules[10] = new Rule(-21, new int[]{-24,-22});
    rules[11] = new Rule(-21, new int[]{-24,-23});
    rules[12] = new Rule(-22, new int[]{19,-2,71,-7,47});
    rules[13] = new Rule(-23, new int[]{-25,-2,48,-6,-36});
    rules[14] = new Rule(-23, new int[]{-25,-2,71,-7,-36});
    rules[15] = new Rule(-23, new int[]{-25,-2,48,-6,71,-7,-36});
    rules[16] = new Rule(-6, new int[]{-19});
    rules[17] = new Rule(-36, new int[]{});
    rules[18] = new Rule(-36, new int[]{47});
    rules[19] = new Rule(-25, new int[]{17});
    rules[20] = new Rule(-25, new int[]{18});
    rules[21] = new Rule(-24, new int[]{});
    rules[22] = new Rule(-24, new int[]{13});
    rules[23] = new Rule(-7, new int[]{-7,71,-8});
    rules[24] = new Rule(-7, new int[]{-7,72,-8});
    rules[25] = new Rule(-7, new int[]{-7,84,-8});
    rules[26] = new Rule(-7, new int[]{-7,76,-8});
    rules[27] = new Rule(-7, new int[]{-7,77,-8});
    rules[28] = new Rule(-7, new int[]{-7,85,-8});
    rules[29] = new Rule(-7, new int[]{-7,78,-8});
    rules[30] = new Rule(-7, new int[]{-7,86,-8});
    rules[31] = new Rule(-7, new int[]{-7,79,-8});
    rules[32] = new Rule(-7, new int[]{-7,80,-8});
    rules[33] = new Rule(-7, new int[]{-7,81,-8});
    rules[34] = new Rule(-7, new int[]{-7,82,-8});
    rules[35] = new Rule(-7, new int[]{-7,83,-8});
    rules[36] = new Rule(-7, new int[]{-7,87,-8});
    rules[37] = new Rule(-7, new int[]{-7,88,-8});
    rules[38] = new Rule(-7, new int[]{-7,89,-8});
    rules[39] = new Rule(-7, new int[]{-8});
    rules[40] = new Rule(-8, new int[]{-8,55,-9});
    rules[41] = new Rule(-8, new int[]{-9});
    rules[42] = new Rule(-9, new int[]{-9,57,-10});
    rules[43] = new Rule(-9, new int[]{-10});
    rules[44] = new Rule(-10, new int[]{-10,54,-11});
    rules[45] = new Rule(-10, new int[]{-11});
    rules[46] = new Rule(-11, new int[]{-11,67,-12});
    rules[47] = new Rule(-11, new int[]{-11,68,-12});
    rules[48] = new Rule(-11, new int[]{-12});
    rules[49] = new Rule(-12, new int[]{-12,65,-13});
    rules[50] = new Rule(-12, new int[]{-12,66,-13});
    rules[51] = new Rule(-12, new int[]{-12,69,-13});
    rules[52] = new Rule(-12, new int[]{-12,70,-13});
    rules[53] = new Rule(-12, new int[]{-13});
    rules[54] = new Rule(-13, new int[]{-13,63,-14});
    rules[55] = new Rule(-13, new int[]{-13,64,-14});
    rules[56] = new Rule(-13, new int[]{-14});
    rules[57] = new Rule(-14, new int[]{-14,50,-15});
    rules[58] = new Rule(-14, new int[]{-14,51,-15});
    rules[59] = new Rule(-14, new int[]{-14,58,-15});
    rules[60] = new Rule(-14, new int[]{-15});
    rules[61] = new Rule(-15, new int[]{-15,52,-16});
    rules[62] = new Rule(-15, new int[]{-15,53,-16});
    rules[63] = new Rule(-15, new int[]{-15,62,-16});
    rules[64] = new Rule(-15, new int[]{-16});
    rules[65] = new Rule(-16, new int[]{-16,61,-17});
    rules[66] = new Rule(-16, new int[]{-17});
    rules[67] = new Rule(-17, new int[]{-17,73,-18});
    rules[68] = new Rule(-17, new int[]{-17,75,-18});
    rules[69] = new Rule(-17, new int[]{-17,74,-18});
    rules[70] = new Rule(-17, new int[]{-18});
    rules[71] = new Rule(-18, new int[]{50,-19});
    rules[72] = new Rule(-18, new int[]{51,-19});
    rules[73] = new Rule(-18, new int[]{56,-19});
    rules[74] = new Rule(-18, new int[]{-19});
    rules[75] = new Rule(-19, new int[]{-19,59,-2});
    rules[76] = new Rule(-19, new int[]{-19,60,-2});
    rules[77] = new Rule(-19, new int[]{-19,10,-20,11});
    rules[78] = new Rule(-19, new int[]{-19,6,7});
    rules[79] = new Rule(-19, new int[]{-19,6,-26,7});
    rules[80] = new Rule(-19, new int[]{6,-7,7});
    rules[81] = new Rule(-19, new int[]{-2});
    rules[82] = new Rule(-19, new int[]{-28});
    rules[83] = new Rule(-19, new int[]{-28,-33});
    rules[84] = new Rule(-19, new int[]{-28,45,-7});
    rules[85] = new Rule(-19, new int[]{91});
    rules[86] = new Rule(-19, new int[]{92});
    rules[87] = new Rule(-19, new int[]{90});
    rules[88] = new Rule(-28, new int[]{20,6,-29,7,63,-6});
    rules[89] = new Rule(-28, new int[]{20,6,7,63,-6});
    rules[90] = new Rule(-28, new int[]{20,6,-29,7});
    rules[91] = new Rule(-28, new int[]{20,6,7});
    rules[92] = new Rule(-29, new int[]{-29,46,-30});
    rules[93] = new Rule(-29, new int[]{-30});
    rules[94] = new Rule(-30, new int[]{-31,-2,48,-6,71,-7});
    rules[95] = new Rule(-30, new int[]{-31,-2,71,-7});
    rules[96] = new Rule(-30, new int[]{-31,-2,48,-6});
    rules[97] = new Rule(-31, new int[]{});
    rules[98] = new Rule(-31, new int[]{-31,27});
    rules[99] = new Rule(-31, new int[]{-31,28});
    rules[100] = new Rule(-31, new int[]{-31,26});
    rules[101] = new Rule(-31, new int[]{-31,29});
    rules[102] = new Rule(-26, new int[]{-26,46,-27});
    rules[103] = new Rule(-26, new int[]{-27});
    rules[104] = new Rule(-27, new int[]{-7});
    rules[105] = new Rule(-27, new int[]{-2,48,-7});
    rules[106] = new Rule(-20, new int[]{-7});
    rules[107] = new Rule(-20, new int[]{-20,46,-7});
    rules[108] = new Rule(-33, new int[]{4,-34,5});
    rules[109] = new Rule(-33, new int[]{4,5});
    rules[110] = new Rule(-34, new int[]{});
    rules[111] = new Rule(-34, new int[]{-34,-32});
    rules[112] = new Rule(-32, new int[]{-21});
    rules[113] = new Rule(-32, new int[]{-5});
    rules[114] = new Rule(-32, new int[]{-33});
    rules[115] = new Rule(-2, new int[]{93});
    rules[116] = new Rule(-2, new int[]{12});
    rules[117] = new Rule(-2, new int[]{13});
    rules[118] = new Rule(-2, new int[]{14});
    rules[119] = new Rule(-2, new int[]{15});
    rules[120] = new Rule(-2, new int[]{16});
    rules[121] = new Rule(-2, new int[]{17});
    rules[122] = new Rule(-2, new int[]{18});
    rules[123] = new Rule(-2, new int[]{19});
    rules[124] = new Rule(-2, new int[]{20});
    rules[125] = new Rule(-2, new int[]{21});
    rules[126] = new Rule(-2, new int[]{22});
    rules[127] = new Rule(-2, new int[]{23});
    rules[128] = new Rule(-2, new int[]{24});
    rules[129] = new Rule(-2, new int[]{25});
    rules[130] = new Rule(-2, new int[]{26});
    rules[131] = new Rule(-2, new int[]{27});
    rules[132] = new Rule(-2, new int[]{28});
    rules[133] = new Rule(-2, new int[]{29});
    rules[134] = new Rule(-2, new int[]{30});
    rules[135] = new Rule(-2, new int[]{31});
    rules[136] = new Rule(-2, new int[]{32});
    rules[137] = new Rule(-2, new int[]{33});
    rules[138] = new Rule(-2, new int[]{34});
    rules[139] = new Rule(-2, new int[]{35});
    rules[140] = new Rule(-2, new int[]{36});
    rules[141] = new Rule(-2, new int[]{37});
    rules[142] = new Rule(-2, new int[]{38});
    rules[143] = new Rule(-2, new int[]{39});
    rules[144] = new Rule(-2, new int[]{40});
    rules[145] = new Rule(-2, new int[]{41});
    rules[146] = new Rule(-2, new int[]{42});
    rules[147] = new Rule(-2, new int[]{43});
    rules[148] = new Rule(-2, new int[]{44});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)PsiTokenType.error, (int)PsiTokenType.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> /* empty */
#line 63 "Psi.y"
                                  { CurrentSemanticValue.Module = new Module(); }
#line default
        break;
      case 3: // program -> program, assertion
#line 64 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Assertion); }
#line default
        break;
      case 4: // program -> program, declaration
#line 65 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Declaration); }
#line default
        break;
      case 5: // program -> program, module
#line 66 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Module); }
#line default
        break;
      case 6: // assertion -> ASSERT, expression, TERMINATOR
#line 69 "Psi.y"
                                           {
            	CurrentSemanticValue.Assertion = new Assertion(ValueStack[ValueStack.Depth-2].Expression); 
            }
#line default
        break;
      case 7: // module -> MODULE, modname, CURLY_O, program, CURLY_C
#line 74 "Psi.y"
                                                     {
				CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module;
				CurrentSemanticValue.Module.Name = ValueStack[ValueStack.Depth-4].Name;
			}
#line default
        break;
      case 8: // modname -> identifier
#line 80 "Psi.y"
                         {
            	CurrentSemanticValue.Name = new CompoundName(ValueStack[ValueStack.Depth-1].String); 
            }
#line default
        break;
      case 9: // modname -> modname, DOT, identifier
#line 83 "Psi.y"
                                     {
            	CurrentSemanticValue.Name = ValueStack[ValueStack.Depth-3].Name;
            	CurrentSemanticValue.Name.Add(ValueStack[ValueStack.Depth-1].String);
        	}
#line default
        break;
      case 10: // declaration -> export, typedecl
#line 89 "Psi.y"
                              {
            	CurrentSemanticValue.Declaration = ValueStack[ValueStack.Depth-1].Declaration;
            	CurrentSemanticValue.Declaration.IsExported = (bool)ValueStack[ValueStack.Depth-2].Boolean;
            }
#line default
        break;
      case 11: // declaration -> export, vardecl
#line 93 "Psi.y"
                             {
            	CurrentSemanticValue.Declaration = ValueStack[ValueStack.Depth-1].Declaration;
            	CurrentSemanticValue.Declaration.IsExported = (bool)ValueStack[ValueStack.Depth-2].Boolean;
            }
#line default
        break;
      case 12: // typedecl -> TYPE, identifier, IS, expression, TERMINATOR
#line 99 "Psi.y"
                                                       {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, TypeDeclaration, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = true;
            }
#line default
        break;
      case 13: // vardecl -> storage, identifier, COLON, type, terminator
#line 105 "Psi.y"
                                                       {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].Expression, null);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 14: // vardecl -> storage, identifier, IS, expression, terminator
#line 109 "Psi.y"
                                                             {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, null, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 15: // vardecl -> storage, identifier, COLON, type, IS, expression, terminator
#line 113 "Psi.y"
                                                                     {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-6].String, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-7].Boolean;
            }
#line default
        break;
      case 16: // type -> value
#line 120 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 19: // storage -> CONST
#line 128 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 20: // storage -> VAR
#line 129 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 21: // export -> /* empty */
#line 132 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 22: // export -> EXPORT
#line 133 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 23: // expression -> expression, IS, expr_or
#line 137 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.CopyAssign);
			}
#line default
        break;
      case 24: // expression -> expression, ASSIGN, expr_or
#line 141 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.SemanticAssign);
			}
#line default
        break;
      case 25: // expression -> expression, WB_CONCAT, expr_or
#line 145 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackConcat);
			}
#line default
        break;
      case 26: // expression -> expression, WB_PLUS, expr_or
#line 149 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackPlus);
			}
#line default
        break;
      case 27: // expression -> expression, WB_MINUS, expr_or
#line 153 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMinus);
			}
#line default
        break;
      case 28: // expression -> expression, WB_EXP, expr_or
#line 157 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackExponentiate);
			}
#line default
        break;
      case 29: // expression -> expression, WB_MULT, expr_or
#line 161 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMultiply);
			}
#line default
        break;
      case 30: // expression -> expression, WB_MOD, expr_or
#line 165 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackModulo);
			}
#line default
        break;
      case 31: // expression -> expression, WB_DIV, expr_or
#line 169 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackDivide);
			}
#line default
        break;
      case 32: // expression -> expression, WB_AND, expr_or
#line 173 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackAnd);
			}
#line default
        break;
      case 33: // expression -> expression, WB_OR, expr_or
#line 177 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackOr);
			}
#line default
        break;
      case 34: // expression -> expression, WB_INVERT, expr_or
#line 181 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackInvert);
			}
#line default
        break;
      case 35: // expression -> expression, WB_XOR, expr_or
#line 185 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackXor);
			}
#line default
        break;
      case 36: // expression -> expression, WB_ASR, expr_or
#line 189 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackArithmeticShiftRight);
			}
#line default
        break;
      case 37: // expression -> expression, WB_SHL, expr_or
#line 193 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftLeft);
			}
#line default
        break;
      case 38: // expression -> expression, WB_SHR, expr_or
#line 197 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftRight);
			}
#line default
        break;
      case 39: // expression -> expr_or
#line 201 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 40: // expr_or -> expr_or, OR, expr_xor
#line 207 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Or);
			}
#line default
        break;
      case 41: // expr_or -> expr_xor
#line 211 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 42: // expr_xor -> expr_xor, XOR, expr_and
#line 217 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Xor);
			}
#line default
        break;
      case 43: // expr_xor -> expr_and
#line 221 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 44: // expr_and -> expr_and, AND, equality
#line 227 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.And);
			}
#line default
        break;
      case 45: // expr_and -> equality
#line 231 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 46: // equality -> equality, EQUAL, comparison
#line 237 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Equals);
			}
#line default
        break;
      case 47: // equality -> equality, NEQUAL, comparison
#line 241 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.NotEquals);
			}
#line default
        break;
      case 48: // equality -> comparison
#line 245 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 49: // comparison -> comparison, LEQUAL, expr_arrows
#line 251 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.LessOrEqual);
			}
#line default
        break;
      case 50: // comparison -> comparison, GEQUAL, expr_arrows
#line 255 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.MoreOrEqual);
			}
#line default
        break;
      case 51: // comparison -> comparison, LESS, expr_arrows
#line 259 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Less);
			}
#line default
        break;
      case 52: // comparison -> comparison, MORE, expr_arrows
#line 263 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.More);
			}
#line default
        break;
      case 53: // comparison -> expr_arrows
#line 267 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 54: // expr_arrows -> expr_arrows, FORWARD, sum
#line 273 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Forward);
			}
#line default
        break;
      case 55: // expr_arrows -> expr_arrows, BACKWARD, sum
#line 277 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Backward);
			}
#line default
        break;
      case 56: // expr_arrows -> sum
#line 281 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 57: // sum -> sum, PLUS, term
#line 287 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 58: // sum -> sum, MINUS, term
#line 291 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 59: // sum -> sum, CONCAT, term
#line 295 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Concat);
			}
#line default
        break;
      case 60: // sum -> term
#line 299 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 61: // term -> term, MULT, expo
#line 305 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Multiply);
			}
#line default
        break;
      case 62: // term -> term, DIV, expo
#line 309 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Divide);
			}
#line default
        break;
      case 63: // term -> term, MOD, expo
#line 313 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Modulo);
			}
#line default
        break;
      case 64: // term -> expo
#line 317 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 65: // expo -> expo, EXP, shifting
#line 323 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Exponentiate);
			}
#line default
        break;
      case 66: // expo -> shifting
#line 327 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 67: // shifting -> shifting, ASR, unary
#line 333 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ArithmeticShiftRight);
			}
#line default
        break;
      case 68: // shifting -> shifting, SHR, unary
#line 337 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftRight);
			}
#line default
        break;
      case 69: // shifting -> shifting, SHL, unary
#line 341 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftLeft);
			}
#line default
        break;
      case 70: // shifting -> unary
#line 345 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 71: // unary -> PLUS, value
#line 351 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 72: // unary -> MINUS, value
#line 355 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 73: // unary -> INVERT, value
#line 359 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Invert);
			}
#line default
        break;
      case 74: // unary -> value
#line 363 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 75: // value -> value, DOT, identifier
#line 369 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyDot(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 76: // value -> value, META, identifier
#line 373 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyMeta(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 77: // value -> value, SQUARE_O, exprlist, SQUARE_C
#line 377 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayIndexingExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ExpressionList);
			}
#line default
        break;
      case 78: // value -> value, ROUND_O, ROUND_C
#line 381 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-3].Expression, new List<Argument>());
			}
#line default
        break;
      case 79: // value -> value, ROUND_O, arglist, ROUND_C
#line 385 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ArgumentList);
			}
#line default
        break;
      case 80: // value -> ROUND_O, expression, ROUND_C
#line 389 "Psi.y"
            {
                CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-2].Expression;
            }
#line default
        break;
      case 81: // value -> identifier
#line 393 "Psi.y"
   {
            	CurrentSemanticValue.Expression = new VariableReference(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 82: // value -> functiontype
#line 397 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].FunctionType;
			}
#line default
        break;
      case 83: // value -> functiontype, block
#line 401 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionLiteral(ValueStack[ValueStack.Depth-2].FunctionType, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 84: // value -> functiontype, MAPSTO, expression
#line 405 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionLiteral(ValueStack[ValueStack.Depth-3].FunctionType, new ExpressionStatement(ValueStack[ValueStack.Depth-1].Expression));
			}
#line default
        break;
      case 85: // value -> STRING
#line 409 "Psi.y"
   {
				CurrentSemanticValue.Expression = new StringLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 86: // value -> ENUMVAL
#line 413 "Psi.y"
   {
				CurrentSemanticValue.Expression = new EnumLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 87: // value -> NUMBER
#line 417 "Psi.y"
   {
				CurrentSemanticValue.Expression = new NumberLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 88: // functiontype -> FN, ROUND_O, paramlist, ROUND_C, FORWARD, type
#line 423 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(ValueStack[ValueStack.Depth-4].ParameterList, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 89: // functiontype -> FN, ROUND_O, ROUND_C, FORWARD, type
#line 427 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(new List<Parameter>(), ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 90: // functiontype -> FN, ROUND_O, paramlist, ROUND_C
#line 431 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(ValueStack[ValueStack.Depth-2].ParameterList, null);
			}
#line default
        break;
      case 91: // functiontype -> FN, ROUND_O, ROUND_C
#line 435 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(new List<Parameter>(), null);
			}
#line default
        break;
      case 92: // paramlist -> paramlist, COMMA, parameter
#line 441 "Psi.y"
   {
				CurrentSemanticValue.ParameterList = ValueStack[ValueStack.Depth-3].ParameterList;
				CurrentSemanticValue.ParameterList.Add(ValueStack[ValueStack.Depth-1].Parameter);
			}
#line default
        break;
      case 93: // paramlist -> parameter
#line 446 "Psi.y"
   {
				CurrentSemanticValue.ParameterList = new List<Parameter>();
				CurrentSemanticValue.ParameterList.Add(ValueStack[ValueStack.Depth-1].Parameter);
			}
#line default
        break;
      case 94: // parameter -> prefix, identifier, COLON, type, IS, expression
#line 453 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-6].ParameterPrefix, ValueStack[ValueStack.Depth-5].String, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 95: // parameter -> prefix, identifier, IS, expression
#line 457 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-4].ParameterPrefix, ValueStack[ValueStack.Depth-3].String, null, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 96: // parameter -> prefix, identifier, COLON, type
#line 461 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-4].ParameterPrefix, ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].Expression, null);
			}
#line default
        break;
      case 97: // prefix -> /* empty */
#line 467 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ParameterPrefix.None;
			}
#line default
        break;
      case 98: // prefix -> prefix, IN
#line 471 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.In;
			}
#line default
        break;
      case 99: // prefix -> prefix, OUT
#line 475 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.Out;
			}
#line default
        break;
      case 100: // prefix -> prefix, INOUT
#line 479 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.InOut;
			}
#line default
        break;
      case 101: // prefix -> prefix, THIS
#line 483 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.This;
			}
#line default
        break;
      case 102: // arglist -> arglist, COMMA, argument
#line 489 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = ValueStack[ValueStack.Depth-3].ArgumentList;
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 103: // arglist -> argument
#line 494 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = new List<Argument>();
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 104: // argument -> expression
#line 501 "Psi.y"
   {
				CurrentSemanticValue.Argument = new PositionalArgument(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 105: // argument -> identifier, COLON, expression
#line 505 "Psi.y"
   {
				CurrentSemanticValue.Argument = new NamedArgument(ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 106: // exprlist -> expression
#line 511 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = new List<Expression>();
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 107: // exprlist -> exprlist, COMMA, expression
#line 516 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = ValueStack[ValueStack.Depth-3].ExpressionList;
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 108: // block -> CURLY_O, stmtlist, CURLY_C
#line 523 "Psi.y"
   {
				CurrentSemanticValue.Statement = new Block(ValueStack[ValueStack.Depth-2].StatementList);
			}
#line default
        break;
      case 109: // block -> CURLY_O, CURLY_C
#line 527 "Psi.y"
   {
				CurrentSemanticValue.Statement = new Block(new List<Statement>());
			}
#line default
        break;
      case 110: // stmtlist -> /* empty */
#line 533 "Psi.y"
   {
				CurrentSemanticValue.StatementList = new List<Statement>();
			}
#line default
        break;
      case 111: // stmtlist -> stmtlist, statement
#line 537 "Psi.y"
   {
				CurrentSemanticValue.StatementList = ValueStack[ValueStack.Depth-2].StatementList;
				CurrentSemanticValue.StatementList.Add(ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 112: // statement -> declaration
#line 544 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Declaration;
			}
#line default
        break;
      case 113: // statement -> assertion
#line 548 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Assertion;
			}
#line default
        break;
      case 114: // statement -> block
#line 552 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Statement;
			}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((PsiTokenType)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((PsiTokenType)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 596 "Psi.y"
public PsiParser(PsiLexer lexer) : base(lexer) 
{ 
	
}

public Module Result => this.CurrentSemanticValue.Module;

public Expression TypeDeclaration { get; } = new VariableReference("<type>");

private static Expression Apply(Expression lhs, Expression rhs, PsiOperator op)
{
	return new BinaryOperation(op, lhs, rhs);
}

private static Expression Apply(Expression expr, PsiOperator op)
{
	return new UnaryOperation(op, expr);
}

private static Expression ApplyDot(Expression exp, string field)
{
	return new DotExpression(exp, field);
}

private static Expression ApplyMeta(Expression exp, string field)
{
	return new MetaExpression(exp, field);
}
#line default
}
}
