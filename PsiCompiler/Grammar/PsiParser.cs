// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-2U3VU0H
// DateTime: 19.10.2017 09:30:10
// UserName: Felix
// Input file <Psi.y - 19.10.2017 09:30:09>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace PsiCompiler.Grammar
{
public enum PsiTokenType {error=2,EOF=3,CURLY_O=4,CURLY_C=5,ROUND_O=6,
    ROUND_C=7,SQUARE_O=8,SQUARE_C=9,IMPORT=10,EXPORT=11,MODULE=12,
    ASSERT=13,ERROR=14,CONST=15,VAR=16,TYPE=17,FN=18,
    NEW=19,OPERATOR=20,ENUM=21,RECORD=22,INOUT=23,IN=24,
    OUT=25,THIS=26,FOR=27,WHILE=28,LOOP=29,UNTIL=30,
    IF=31,ELSE=32,SELECT=33,WHEN=34,OTHERWISE=35,RESTRICT=36,
    BREAK=37,CONTINUE=38,NEXT=39,RETURN=40,GOTO=41,MAPSTO=42,
    COMMA=43,TERMINATOR=44,COLON=45,LAMBDA=46,PLUS=47,MINUS=48,
    MULT=49,DIV=50,AND=51,OR=52,INVERT=53,XOR=54,
    CONCAT=55,DOT=56,META=57,EXP=58,MOD=59,FORWARD=60,
    BACKWARD=61,LEQUAL=62,GEQUAL=63,EQUAL=64,NEQUAL=65,LESS=66,
    MORE=67,IS=68,ASSIGN=69,ASR=70,SHL=71,SHR=72,
    WB_PLUS=73,WB_MINUS=74,WB_MULT=75,WB_DIV=76,WB_AND=77,WB_OR=78,
    WB_INVERT=79,WB_XOR=80,WB_CONCAT=81,WB_EXP=82,WB_MOD=83,WB_ASR=84,
    WB_SHL=85,WB_SHR=86,NUMBER=87,STRING=88,ENUMVAL=89,IDENT=90,
    Comment=91,LongComment=92,Whitespace=93,UMINUS=94,UPLUS=95,UINVERT=96};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class PsiParser: ShiftReduceParser<ParserNode, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[184];
  private static State[] states = new State[290];
  private static string[] nonTerms = new string[] {
      "program", "identifier", "opsym", "module", "modname", "assertion", "type", 
      "expression", "expr_or", "expr_xor", "expr_and", "equality", "comparison", 
      "expr_arrows", "sum", "term", "expo", "shifting", "unary", "value", "exprlist", 
      "declaration", "typedecl", "vardecl", "field", "export", "storage", "arglist", 
      "argument", "functiontype", "paramlist", "parameter", "prefix", "statement", 
      "block", "stmtlist", "idlist", "fieldlist", "$accept", "terminator", };

  static PsiParser() {
    states[0] = new State(-2,new int[]{-1,1});
    states[1] = new State(new int[]{3,2,13,6,11,248,12,282,17,-21,15,-21,16,-21},new int[]{-6,3,-22,4,-4,5,-26,226});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(-5);
    states[6] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-8,7,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[7] = new State(new int[]{44,8,68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218});
    states[8] = new State(-6);
    states[9] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,10,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[10] = new State(-23);
    states[11] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-10,12,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[12] = new State(-40);
    states[13] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-11,14,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[14] = new State(-42);
    states[15] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-12,16,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[16] = new State(new int[]{64,17,65,107,51,-44,54,-44,52,-44,44,-44,68,-44,69,-44,81,-44,73,-44,74,-44,82,-44,75,-44,83,-44,76,-44,77,-44,78,-44,79,-44,80,-44,84,-44,85,-44,86,-44,9,-44,43,-44,7,-44,56,-44,57,-44,8,-44,6,-44,70,-44,72,-44,71,-44,58,-44,49,-44,50,-44,59,-44,47,-44,48,-44,55,-44,60,-44,61,-44,62,-44,63,-44,66,-44,67,-44,3,-44,13,-44,11,-44,12,-44,17,-44,15,-44,16,-44,5,-44,4,-44,42,-44});
    states[17] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-13,18,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[18] = new State(-46);
    states[19] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-14,20,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[20] = new State(-49);
    states[21] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-15,22,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[22] = new State(-54);
    states[23] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-16,24,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[24] = new State(new int[]{49,-57,50,-57,59,137,47,-57,48,-57,55,-57,60,-57,61,-57,62,-57,63,-57,66,-57,67,-57,64,-57,65,-57,51,-57,54,-57,52,-57,44,-57,68,-57,69,-57,81,-57,73,-57,74,-57,82,-57,75,-57,83,-57,76,-57,77,-57,78,-57,79,-57,80,-57,84,-57,85,-57,86,-57,9,-57,43,-57,7,-57,56,-57,57,-57,8,-57,6,-57,70,-57,72,-57,71,-57,58,-57,3,-57,13,-57,11,-57,12,-57,17,-57,15,-57,16,-57,5,-57,4,-57,42,-57});
    states[25] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-17,26,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[26] = new State(new int[]{58,27,49,-61,50,-61,59,-61,47,-61,48,-61,55,-61,60,-61,61,-61,62,-61,63,-61,66,-61,67,-61,64,-61,65,-61,51,-61,54,-61,52,-61,44,-61,68,-61,69,-61,81,-61,73,-61,74,-61,82,-61,75,-61,83,-61,76,-61,77,-61,78,-61,79,-61,80,-61,84,-61,85,-61,86,-61,9,-61,43,-61,7,-61,56,-61,57,-61,8,-61,6,-61,70,-61,72,-61,71,-61,3,-61,13,-61,11,-61,12,-61,17,-61,15,-61,16,-61,5,-61,4,-61,42,-61});
    states[27] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-18,28,-19,139,-20,167,-2,179,-30,187});
    states[28] = new State(new int[]{70,29,72,118,71,280,58,-65,49,-65,50,-65,59,-65,47,-65,48,-65,55,-65,60,-65,61,-65,62,-65,63,-65,66,-65,67,-65,64,-65,65,-65,51,-65,54,-65,52,-65,44,-65,68,-65,69,-65,81,-65,73,-65,74,-65,82,-65,75,-65,83,-65,76,-65,77,-65,78,-65,79,-65,80,-65,84,-65,85,-65,86,-65,9,-65,43,-65,7,-65,56,-65,57,-65,8,-65,6,-65,3,-65,13,-65,11,-65,12,-65,17,-65,15,-65,16,-65,5,-65,4,-65,42,-65});
    states[29] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-19,30,-20,167,-2,179,-30,187});
    states[30] = new State(-67);
    states[31] = new State(new int[]{21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-20,32,-2,179,-30,187});
    states[32] = new State(new int[]{56,33,57,95,8,97,6,122,70,-71,72,-71,71,-71,58,-71,49,-71,50,-71,59,-71,47,-71,48,-71,55,-71,60,-71,61,-71,62,-71,63,-71,66,-71,67,-71,64,-71,65,-71,51,-71,54,-71,52,-71,44,-71,68,-71,69,-71,81,-71,73,-71,74,-71,82,-71,75,-71,83,-71,76,-71,77,-71,78,-71,79,-71,80,-71,84,-71,85,-71,86,-71,9,-71,43,-71,7,-71,3,-71,13,-71,11,-71,12,-71,17,-71,15,-71,16,-71,5,-71,4,-71,42,-71});
    states[33] = new State(new int[]{90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94},new int[]{-2,34});
    states[34] = new State(-75);
    states[35] = new State(-126);
    states[36] = new State(-127);
    states[37] = new State(-128);
    states[38] = new State(-129);
    states[39] = new State(-130);
    states[40] = new State(-131);
    states[41] = new State(-132);
    states[42] = new State(-133);
    states[43] = new State(-134);
    states[44] = new State(-135);
    states[45] = new State(-136);
    states[46] = new State(new int[]{57,47,56,-138,8,-138,6,-138,70,-138,72,-138,71,-138,58,-138,49,-138,50,-138,59,-138,47,-138,48,-138,55,-138,60,-138,61,-138,62,-138,63,-138,66,-138,67,-138,64,-138,65,-138,51,-138,54,-138,52,-138,44,-138,68,-138,69,-138,81,-138,73,-138,74,-138,82,-138,75,-138,83,-138,76,-138,77,-138,78,-138,79,-138,80,-138,84,-138,85,-138,86,-138,9,-138,43,-138,7,-138,3,-138,13,-138,11,-138,12,-138,17,-138,15,-138,16,-138,5,-138,4,-138,42,-138,45,-138});
    states[47] = new State(new int[]{47,50,48,51,49,52,50,53,51,54,52,55,53,56,54,57,55,58,56,59,57,60,58,61,59,62,60,63,61,64,62,65,63,66,64,67,65,68,66,69,67,70,68,71,69,72,70,73,71,74,72,75},new int[]{-3,48});
    states[48] = new State(new int[]{57,49});
    states[49] = new State(-137);
    states[50] = new State(-158);
    states[51] = new State(-159);
    states[52] = new State(-160);
    states[53] = new State(-161);
    states[54] = new State(-162);
    states[55] = new State(-163);
    states[56] = new State(-164);
    states[57] = new State(-165);
    states[58] = new State(-166);
    states[59] = new State(-167);
    states[60] = new State(-168);
    states[61] = new State(-169);
    states[62] = new State(-170);
    states[63] = new State(-171);
    states[64] = new State(-172);
    states[65] = new State(-173);
    states[66] = new State(-174);
    states[67] = new State(-175);
    states[68] = new State(-176);
    states[69] = new State(-177);
    states[70] = new State(-178);
    states[71] = new State(-179);
    states[72] = new State(-180);
    states[73] = new State(-181);
    states[74] = new State(-182);
    states[75] = new State(-183);
    states[76] = new State(-139);
    states[77] = new State(-140);
    states[78] = new State(-141);
    states[79] = new State(-142);
    states[80] = new State(-143);
    states[81] = new State(-144);
    states[82] = new State(-145);
    states[83] = new State(-146);
    states[84] = new State(-147);
    states[85] = new State(-148);
    states[86] = new State(-149);
    states[87] = new State(-150);
    states[88] = new State(-151);
    states[89] = new State(-152);
    states[90] = new State(-153);
    states[91] = new State(-154);
    states[92] = new State(-155);
    states[93] = new State(-156);
    states[94] = new State(-157);
    states[95] = new State(new int[]{90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94},new int[]{-2,96});
    states[96] = new State(-76);
    states[97] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-21,98,-8,171,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[98] = new State(new int[]{9,99,43,100});
    states[99] = new State(-79);
    states[100] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-8,101,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[101] = new State(new int[]{68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218,9,-118,43,-118});
    states[102] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,103,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[103] = new State(-24);
    states[104] = new State(new int[]{54,13,52,-41,44,-41,68,-41,69,-41,81,-41,73,-41,74,-41,82,-41,75,-41,83,-41,76,-41,77,-41,78,-41,79,-41,80,-41,84,-41,85,-41,86,-41,9,-41,43,-41,7,-41,56,-41,57,-41,8,-41,6,-41,70,-41,72,-41,71,-41,58,-41,49,-41,50,-41,59,-41,47,-41,48,-41,55,-41,60,-41,61,-41,62,-41,63,-41,66,-41,67,-41,64,-41,65,-41,51,-41,3,-41,13,-41,11,-41,12,-41,17,-41,15,-41,16,-41,5,-41,4,-41,42,-41});
    states[105] = new State(new int[]{51,15,54,-43,52,-43,44,-43,68,-43,69,-43,81,-43,73,-43,74,-43,82,-43,75,-43,83,-43,76,-43,77,-43,78,-43,79,-43,80,-43,84,-43,85,-43,86,-43,9,-43,43,-43,7,-43,56,-43,57,-43,8,-43,6,-43,70,-43,72,-43,71,-43,58,-43,49,-43,50,-43,59,-43,47,-43,48,-43,55,-43,60,-43,61,-43,62,-43,63,-43,66,-43,67,-43,64,-43,65,-43,3,-43,13,-43,11,-43,12,-43,17,-43,15,-43,16,-43,5,-43,4,-43,42,-43});
    states[106] = new State(new int[]{64,17,65,107,51,-45,54,-45,52,-45,44,-45,68,-45,69,-45,81,-45,73,-45,74,-45,82,-45,75,-45,83,-45,76,-45,77,-45,78,-45,79,-45,80,-45,84,-45,85,-45,86,-45,9,-45,43,-45,7,-45,56,-45,57,-45,8,-45,6,-45,70,-45,72,-45,71,-45,58,-45,49,-45,50,-45,59,-45,47,-45,48,-45,55,-45,60,-45,61,-45,62,-45,63,-45,66,-45,67,-45,3,-45,13,-45,11,-45,12,-45,17,-45,15,-45,16,-45,5,-45,4,-45,42,-45});
    states[107] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-13,108,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[108] = new State(-47);
    states[109] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-14,110,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[110] = new State(-50);
    states[111] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-15,112,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[112] = new State(-55);
    states[113] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-16,114,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[114] = new State(new int[]{49,-58,50,-58,59,137,47,-58,48,-58,55,-58,60,-58,61,-58,62,-58,63,-58,66,-58,67,-58,64,-58,65,-58,51,-58,54,-58,52,-58,44,-58,68,-58,69,-58,81,-58,73,-58,74,-58,82,-58,75,-58,83,-58,76,-58,77,-58,78,-58,79,-58,80,-58,84,-58,85,-58,86,-58,9,-58,43,-58,7,-58,56,-58,57,-58,8,-58,6,-58,70,-58,72,-58,71,-58,58,-58,3,-58,13,-58,11,-58,12,-58,17,-58,15,-58,16,-58,5,-58,4,-58,42,-58});
    states[115] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-17,116,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[116] = new State(new int[]{58,27,49,-62,50,-62,59,-62,47,-62,48,-62,55,-62,60,-62,61,-62,62,-62,63,-62,66,-62,67,-62,64,-62,65,-62,51,-62,54,-62,52,-62,44,-62,68,-62,69,-62,81,-62,73,-62,74,-62,82,-62,75,-62,83,-62,76,-62,77,-62,78,-62,79,-62,80,-62,84,-62,85,-62,86,-62,9,-62,43,-62,7,-62,56,-62,57,-62,8,-62,6,-62,70,-62,72,-62,71,-62,3,-62,13,-62,11,-62,12,-62,17,-62,15,-62,16,-62,5,-62,4,-62,42,-62});
    states[117] = new State(new int[]{70,29,72,118,71,280,58,-66,49,-66,50,-66,59,-66,47,-66,48,-66,55,-66,60,-66,61,-66,62,-66,63,-66,66,-66,67,-66,64,-66,65,-66,51,-66,54,-66,52,-66,44,-66,68,-66,69,-66,81,-66,73,-66,74,-66,82,-66,75,-66,83,-66,76,-66,77,-66,78,-66,79,-66,80,-66,84,-66,85,-66,86,-66,9,-66,43,-66,7,-66,56,-66,57,-66,8,-66,6,-66,3,-66,13,-66,11,-66,12,-66,17,-66,15,-66,16,-66,5,-66,4,-66,42,-66});
    states[118] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-19,119,-20,167,-2,179,-30,187});
    states[119] = new State(-68);
    states[120] = new State(new int[]{21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-20,121,-2,179,-30,187});
    states[121] = new State(new int[]{56,33,57,95,8,97,6,122,70,-72,72,-72,71,-72,58,-72,49,-72,50,-72,59,-72,47,-72,48,-72,55,-72,60,-72,61,-72,62,-72,63,-72,66,-72,67,-72,64,-72,65,-72,51,-72,54,-72,52,-72,44,-72,68,-72,69,-72,81,-72,73,-72,74,-72,82,-72,75,-72,83,-72,76,-72,77,-72,78,-72,79,-72,80,-72,84,-72,85,-72,86,-72,9,-72,43,-72,7,-72,3,-72,13,-72,11,-72,12,-72,17,-72,15,-72,16,-72,5,-72,4,-72,42,-72});
    states[122] = new State(new int[]{7,123,47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-28,124,-29,279,-8,128,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,276,-30,187});
    states[123] = new State(-81);
    states[124] = new State(new int[]{7,125,43,126});
    states[125] = new State(-82);
    states[126] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-29,127,-8,128,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,276,-30,187});
    states[127] = new State(-113);
    states[128] = new State(new int[]{68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218,7,-115,43,-115});
    states[129] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,130,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[130] = new State(-25);
    states[131] = new State(new int[]{62,19,63,109,66,132,67,274,64,-48,65,-48,51,-48,54,-48,52,-48,44,-48,68,-48,69,-48,81,-48,73,-48,74,-48,82,-48,75,-48,83,-48,76,-48,77,-48,78,-48,79,-48,80,-48,84,-48,85,-48,86,-48,9,-48,43,-48,7,-48,56,-48,57,-48,8,-48,6,-48,70,-48,72,-48,71,-48,58,-48,49,-48,50,-48,59,-48,47,-48,48,-48,55,-48,60,-48,61,-48,3,-48,13,-48,11,-48,12,-48,17,-48,15,-48,16,-48,5,-48,4,-48,42,-48});
    states[132] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-14,133,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[133] = new State(-51);
    states[134] = new State(new int[]{47,23,48,113,55,135,60,-56,61,-56,62,-56,63,-56,66,-56,67,-56,64,-56,65,-56,51,-56,54,-56,52,-56,44,-56,68,-56,69,-56,81,-56,73,-56,74,-56,82,-56,75,-56,83,-56,76,-56,77,-56,78,-56,79,-56,80,-56,84,-56,85,-56,86,-56,9,-56,43,-56,7,-56,56,-56,57,-56,8,-56,6,-56,70,-56,72,-56,71,-56,58,-56,49,-56,50,-56,59,-56,3,-56,13,-56,11,-56,12,-56,17,-56,15,-56,16,-56,5,-56,4,-56,42,-56});
    states[135] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-16,136,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[136] = new State(-59);
    states[137] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-17,138,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[138] = new State(-63);
    states[139] = new State(-70);
    states[140] = new State(new int[]{21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-20,141,-2,179,-30,187});
    states[141] = new State(new int[]{56,-73,57,-73,8,97,6,122,70,-73,72,-73,71,-73,58,-73,49,-73,50,-73,59,-73,47,-73,48,-73,55,-73,60,-73,61,-73,62,-73,63,-73,66,-73,67,-73,64,-73,65,-73,51,-73,54,-73,52,-73,44,-73,68,-73,69,-73,81,-73,73,-73,74,-73,82,-73,75,-73,83,-73,76,-73,77,-73,78,-73,79,-73,80,-73,84,-73,85,-73,86,-73,9,-73,43,-73,7,-73,3,-73,13,-73,11,-73,12,-73,17,-73,15,-73,16,-73,5,-73,4,-73,42,-73});
    states[142] = new State(new int[]{6,143});
    states[143] = new State(new int[]{90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94},new int[]{-37,144,-2,148});
    states[144] = new State(new int[]{7,145,43,146});
    states[145] = new State(-77);
    states[146] = new State(new int[]{90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94},new int[]{-2,147});
    states[147] = new State(-92);
    states[148] = new State(-93);
    states[149] = new State(new int[]{6,150});
    states[150] = new State(new int[]{90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94},new int[]{-38,151,-25,273,-2,155});
    states[151] = new State(new int[]{7,152,43,153});
    states[152] = new State(-78);
    states[153] = new State(new int[]{90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94},new int[]{-25,154,-2,155});
    states[154] = new State(-94);
    states[155] = new State(new int[]{45,156,68,270});
    states[156] = new State(new int[]{21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-7,157,-20,186,-2,179,-30,187});
    states[157] = new State(new int[]{68,159,44,242,7,-17,43,-17},new int[]{-40,158});
    states[158] = new State(-96);
    states[159] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-8,160,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[160] = new State(new int[]{68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218,44,242,7,-17,43,-17},new int[]{-40,161});
    states[161] = new State(-98);
    states[162] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,163,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[163] = new State(-26);
    states[164] = new State(new int[]{60,21,61,111,62,-53,63,-53,66,-53,67,-53,64,-53,65,-53,51,-53,54,-53,52,-53,44,-53,68,-53,69,-53,81,-53,73,-53,74,-53,82,-53,75,-53,83,-53,76,-53,77,-53,78,-53,79,-53,80,-53,84,-53,85,-53,86,-53,9,-53,43,-53,7,-53,56,-53,57,-53,8,-53,6,-53,70,-53,72,-53,71,-53,58,-53,49,-53,50,-53,59,-53,47,-53,48,-53,55,-53,3,-53,13,-53,11,-53,12,-53,17,-53,15,-53,16,-53,5,-53,4,-53,42,-53});
    states[165] = new State(new int[]{49,25,50,115,59,137,47,-60,48,-60,55,-60,60,-60,61,-60,62,-60,63,-60,66,-60,67,-60,64,-60,65,-60,51,-60,54,-60,52,-60,44,-60,68,-60,69,-60,81,-60,73,-60,74,-60,82,-60,75,-60,83,-60,76,-60,77,-60,78,-60,79,-60,80,-60,84,-60,85,-60,86,-60,9,-60,43,-60,7,-60,56,-60,57,-60,8,-60,6,-60,70,-60,72,-60,71,-60,58,-60,3,-60,13,-60,11,-60,12,-60,17,-60,15,-60,16,-60,5,-60,4,-60,42,-60});
    states[166] = new State(new int[]{58,27,49,-64,50,-64,59,-64,47,-64,48,-64,55,-64,60,-64,61,-64,62,-64,63,-64,66,-64,67,-64,64,-64,65,-64,51,-64,54,-64,52,-64,44,-64,68,-64,69,-64,81,-64,73,-64,74,-64,82,-64,75,-64,83,-64,76,-64,77,-64,78,-64,79,-64,80,-64,84,-64,85,-64,86,-64,9,-64,43,-64,7,-64,56,-64,57,-64,8,-64,6,-64,70,-64,72,-64,71,-64,3,-64,13,-64,11,-64,12,-64,17,-64,15,-64,16,-64,5,-64,4,-64,42,-64});
    states[167] = new State(new int[]{56,33,57,95,8,97,6,122,70,-74,72,-74,71,-74,58,-74,49,-74,50,-74,59,-74,47,-74,48,-74,55,-74,60,-74,61,-74,62,-74,63,-74,66,-74,67,-74,64,-74,65,-74,51,-74,54,-74,52,-74,44,-74,68,-74,69,-74,81,-74,73,-74,74,-74,82,-74,75,-74,83,-74,76,-74,77,-74,78,-74,79,-74,80,-74,84,-74,85,-74,86,-74,9,-74,43,-74,7,-74,3,-74,13,-74,11,-74,12,-74,17,-74,15,-74,16,-74,5,-74,4,-74,42,-74});
    states[168] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-21,169,-8,171,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[169] = new State(new int[]{9,170,43,100});
    states[170] = new State(-80);
    states[171] = new State(new int[]{68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218,9,-117,43,-117});
    states[172] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,173,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[173] = new State(-27);
    states[174] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-8,175,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[175] = new State(new int[]{7,176,68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218});
    states[176] = new State(-83);
    states[177] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,178,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[178] = new State(-28);
    states[179] = new State(-84);
    states[180] = new State(new int[]{6,181,56,-135,57,-135,8,-135,70,-135,72,-135,71,-135,58,-135,49,-135,50,-135,59,-135,47,-135,48,-135,55,-135,60,-135,61,-135,62,-135,63,-135,66,-135,67,-135,64,-135,65,-135,51,-135,54,-135,52,-135,44,-135,68,-135,69,-135,81,-135,73,-135,74,-135,82,-135,75,-135,83,-135,76,-135,77,-135,78,-135,79,-135,80,-135,84,-135,85,-135,86,-135,9,-135,43,-135,7,-135,3,-135,13,-135,11,-135,12,-135,17,-135,15,-135,16,-135,5,-135,4,-135,42,-135,45,-135});
    states[181] = new State(new int[]{7,266,24,-108,25,-108,23,-108,26,-108,90,-108,10,-108,11,-108,12,-108,13,-108,14,-108,15,-108,16,-108,17,-108,18,-108,19,-108,20,-108,27,-108,28,-108,29,-108,30,-108,31,-108,32,-108,33,-108,34,-108,35,-108,36,-108,37,-108,38,-108,39,-108,40,-108,41,-108},new int[]{-31,182,-32,269,-33,254});
    states[182] = new State(new int[]{7,183,43,252});
    states[183] = new State(new int[]{60,184,42,-101,4,-101,56,-101,57,-101,8,-101,6,-101,70,-101,72,-101,71,-101,58,-101,49,-101,50,-101,59,-101,47,-101,48,-101,55,-101,61,-101,62,-101,63,-101,66,-101,67,-101,64,-101,65,-101,51,-101,54,-101,52,-101,44,-101,68,-101,69,-101,81,-101,73,-101,74,-101,82,-101,75,-101,83,-101,76,-101,77,-101,78,-101,79,-101,80,-101,84,-101,85,-101,86,-101,9,-101,43,-101,7,-101,3,-101,13,-101,11,-101,12,-101,17,-101,15,-101,16,-101,5,-101});
    states[184] = new State(new int[]{21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-7,185,-20,186,-2,179,-30,187});
    states[185] = new State(-99);
    states[186] = new State(new int[]{56,33,57,95,8,97,6,122,68,-16,44,-16,7,-16,43,-16,52,-16,69,-16,81,-16,73,-16,74,-16,82,-16,75,-16,83,-16,76,-16,77,-16,78,-16,79,-16,80,-16,84,-16,85,-16,86,-16,9,-16,70,-16,72,-16,71,-16,58,-16,49,-16,50,-16,59,-16,47,-16,48,-16,55,-16,60,-16,61,-16,62,-16,63,-16,66,-16,67,-16,64,-16,65,-16,51,-16,54,-16,3,-16,13,-16,11,-16,12,-16,17,-16,15,-16,16,-16,5,-16,4,-16,42,-16});
    states[187] = new State(new int[]{42,189,4,221,56,-85,57,-85,8,-85,6,-85,70,-85,72,-85,71,-85,58,-85,49,-85,50,-85,59,-85,47,-85,48,-85,55,-85,60,-85,61,-85,62,-85,63,-85,66,-85,67,-85,64,-85,65,-85,51,-85,54,-85,52,-85,44,-85,68,-85,69,-85,81,-85,73,-85,74,-85,82,-85,75,-85,83,-85,76,-85,77,-85,78,-85,79,-85,80,-85,84,-85,85,-85,86,-85,9,-85,43,-85,7,-85,3,-85,13,-85,11,-85,12,-85,17,-85,15,-85,16,-85,5,-85},new int[]{-35,188});
    states[188] = new State(-86);
    states[189] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-8,190,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[190] = new State(new int[]{68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218,56,-87,57,-87,8,-87,6,-87,70,-87,72,-87,71,-87,58,-87,49,-87,50,-87,59,-87,47,-87,48,-87,55,-87,60,-87,61,-87,62,-87,63,-87,66,-87,67,-87,64,-87,65,-87,51,-87,54,-87,52,-87,44,-87,9,-87,43,-87,7,-87,3,-87,13,-87,11,-87,12,-87,17,-87,15,-87,16,-87,5,-87,4,-87,42,-87});
    states[191] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,192,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[192] = new State(-29);
    states[193] = new State(new int[]{6,194});
    states[194] = new State(new int[]{90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94},new int[]{-37,195,-2,148});
    states[195] = new State(new int[]{7,196,43,146});
    states[196] = new State(new int[]{42,197});
    states[197] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-8,198,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[198] = new State(new int[]{68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218,56,-88,57,-88,8,-88,6,-88,70,-88,72,-88,71,-88,58,-88,49,-88,50,-88,59,-88,47,-88,48,-88,55,-88,60,-88,61,-88,62,-88,63,-88,66,-88,67,-88,64,-88,65,-88,51,-88,54,-88,52,-88,44,-88,9,-88,43,-88,7,-88,3,-88,13,-88,11,-88,12,-88,17,-88,15,-88,16,-88,5,-88,4,-88,42,-88});
    states[199] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,200,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[200] = new State(-30);
    states[201] = new State(-89);
    states[202] = new State(-90);
    states[203] = new State(-91);
    states[204] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,205,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[205] = new State(-31);
    states[206] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,207,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[207] = new State(-32);
    states[208] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,209,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[209] = new State(-33);
    states[210] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,211,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[211] = new State(-34);
    states[212] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,213,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[213] = new State(-35);
    states[214] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,215,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[215] = new State(-36);
    states[216] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,217,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[217] = new State(-37);
    states[218] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-9,219,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[219] = new State(-38);
    states[220] = new State(new int[]{52,11,44,-39,68,-39,69,-39,81,-39,73,-39,74,-39,82,-39,75,-39,83,-39,76,-39,77,-39,78,-39,79,-39,80,-39,84,-39,85,-39,86,-39,9,-39,43,-39,7,-39,56,-39,57,-39,8,-39,6,-39,70,-39,72,-39,71,-39,58,-39,49,-39,50,-39,59,-39,47,-39,48,-39,55,-39,60,-39,61,-39,62,-39,63,-39,66,-39,67,-39,64,-39,65,-39,51,-39,54,-39,3,-39,13,-39,11,-39,12,-39,17,-39,15,-39,16,-39,5,-39,4,-39,42,-39});
    states[221] = new State(new int[]{5,251,11,-121,13,-121,4,-121,17,-121,15,-121,16,-121},new int[]{-36,222});
    states[222] = new State(new int[]{5,223,11,248,13,6,4,221,17,-21,15,-21,16,-21},new int[]{-34,224,-22,225,-26,226,-6,249,-35,250});
    states[223] = new State(-119);
    states[224] = new State(-122);
    states[225] = new State(-123);
    states[226] = new State(new int[]{17,229,15,246,16,247},new int[]{-23,227,-24,228,-27,234});
    states[227] = new State(-10);
    states[228] = new State(-11);
    states[229] = new State(new int[]{90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94},new int[]{-2,230});
    states[230] = new State(new int[]{68,231});
    states[231] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-8,232,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[232] = new State(new int[]{44,233,68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218});
    states[233] = new State(-12);
    states[234] = new State(new int[]{90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94},new int[]{-2,235});
    states[235] = new State(new int[]{45,236,68,243});
    states[236] = new State(new int[]{21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-7,237,-20,186,-2,179,-30,187});
    states[237] = new State(new int[]{68,239,44,242,3,-17,13,-17,11,-17,12,-17,17,-17,15,-17,16,-17,5,-17,4,-17},new int[]{-40,238});
    states[238] = new State(-13);
    states[239] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-8,240,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[240] = new State(new int[]{68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218,44,242,3,-17,13,-17,11,-17,12,-17,17,-17,15,-17,16,-17,5,-17,4,-17},new int[]{-40,241});
    states[241] = new State(-15);
    states[242] = new State(-18);
    states[243] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-8,244,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[244] = new State(new int[]{68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218,44,242,3,-17,13,-17,11,-17,12,-17,17,-17,15,-17,16,-17,5,-17,4,-17},new int[]{-40,245});
    states[245] = new State(-14);
    states[246] = new State(-19);
    states[247] = new State(-20);
    states[248] = new State(-22);
    states[249] = new State(-124);
    states[250] = new State(-125);
    states[251] = new State(-120);
    states[252] = new State(-108,new int[]{-32,253,-33,254});
    states[253] = new State(-103);
    states[254] = new State(new int[]{24,262,25,263,23,264,26,265,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94},new int[]{-2,255});
    states[255] = new State(new int[]{45,256,68,260});
    states[256] = new State(new int[]{21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-7,257,-20,186,-2,179,-30,187});
    states[257] = new State(new int[]{68,258,7,-107,43,-107});
    states[258] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-8,259,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[259] = new State(new int[]{68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218,7,-105,43,-105});
    states[260] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-8,261,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[261] = new State(new int[]{68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218,7,-106,43,-106});
    states[262] = new State(new int[]{24,-109,25,-109,23,-109,26,-109,90,-109,10,-109,11,-109,12,-109,13,-109,14,-109,15,-109,16,-109,17,-109,18,-109,19,-109,20,-109,27,-109,28,-109,29,-109,30,-109,31,-109,32,-109,33,-109,34,-109,35,-109,36,-109,37,-109,38,-109,39,-109,40,-109,41,-109,45,-140,68,-140});
    states[263] = new State(new int[]{24,-110,25,-110,23,-110,26,-110,90,-110,10,-110,11,-110,12,-110,13,-110,14,-110,15,-110,16,-110,17,-110,18,-110,19,-110,20,-110,27,-110,28,-110,29,-110,30,-110,31,-110,32,-110,33,-110,34,-110,35,-110,36,-110,37,-110,38,-110,39,-110,40,-110,41,-110,45,-141,68,-141});
    states[264] = new State(new int[]{24,-111,25,-111,23,-111,26,-111,90,-111,10,-111,11,-111,12,-111,13,-111,14,-111,15,-111,16,-111,17,-111,18,-111,19,-111,20,-111,27,-111,28,-111,29,-111,30,-111,31,-111,32,-111,33,-111,34,-111,35,-111,36,-111,37,-111,38,-111,39,-111,40,-111,41,-111,45,-139,68,-139});
    states[265] = new State(new int[]{24,-112,25,-112,23,-112,26,-112,90,-112,10,-112,11,-112,12,-112,13,-112,14,-112,15,-112,16,-112,17,-112,18,-112,19,-112,20,-112,27,-112,28,-112,29,-112,30,-112,31,-112,32,-112,33,-112,34,-112,35,-112,36,-112,37,-112,38,-112,39,-112,40,-112,41,-112,45,-142,68,-142});
    states[266] = new State(new int[]{60,267,42,-102,4,-102,56,-102,57,-102,8,-102,6,-102,70,-102,72,-102,71,-102,58,-102,49,-102,50,-102,59,-102,47,-102,48,-102,55,-102,61,-102,62,-102,63,-102,66,-102,67,-102,64,-102,65,-102,51,-102,54,-102,52,-102,44,-102,68,-102,69,-102,81,-102,73,-102,74,-102,82,-102,75,-102,83,-102,76,-102,77,-102,78,-102,79,-102,80,-102,84,-102,85,-102,86,-102,9,-102,43,-102,7,-102,3,-102,13,-102,11,-102,12,-102,17,-102,15,-102,16,-102,5,-102});
    states[267] = new State(new int[]{21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-7,268,-20,186,-2,179,-30,187});
    states[268] = new State(-100);
    states[269] = new State(-104);
    states[270] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-8,271,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[271] = new State(new int[]{68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218,44,242,7,-17,43,-17},new int[]{-40,272});
    states[272] = new State(-97);
    states[273] = new State(-95);
    states[274] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-14,275,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[275] = new State(-52);
    states[276] = new State(new int[]{45,277,56,-84,57,-84,8,-84,6,-84,70,-84,72,-84,71,-84,58,-84,49,-84,50,-84,59,-84,47,-84,48,-84,55,-84,60,-84,61,-84,62,-84,63,-84,66,-84,67,-84,64,-84,65,-84,51,-84,54,-84,52,-84,68,-84,69,-84,81,-84,73,-84,74,-84,82,-84,75,-84,83,-84,76,-84,77,-84,78,-84,79,-84,80,-84,84,-84,85,-84,86,-84,7,-84,43,-84});
    states[277] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-8,278,-9,220,-10,104,-11,105,-12,106,-13,131,-14,164,-15,134,-16,165,-17,166,-18,117,-19,139,-20,167,-2,179,-30,187});
    states[278] = new State(new int[]{68,9,69,102,81,129,73,162,74,172,82,177,75,191,83,199,76,204,77,206,78,208,79,210,80,212,84,214,85,216,86,218,7,-116,43,-116});
    states[279] = new State(-114);
    states[280] = new State(new int[]{47,31,48,120,53,140,21,142,22,149,8,168,6,174,90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,180,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94,46,193,88,201,89,202,87,203},new int[]{-19,281,-20,167,-2,179,-30,187});
    states[281] = new State(-69);
    states[282] = new State(new int[]{90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94},new int[]{-5,283,-2,289});
    states[283] = new State(new int[]{4,284,56,287});
    states[284] = new State(-2,new int[]{-1,285});
    states[285] = new State(new int[]{5,286,13,6,11,248,12,282,17,-21,15,-21,16,-21},new int[]{-6,3,-22,4,-4,5,-26,226});
    states[286] = new State(-7);
    states[287] = new State(new int[]{90,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,23,76,24,77,25,78,26,79,27,80,28,81,29,82,30,83,31,84,32,85,33,86,34,87,35,88,36,89,37,90,38,91,39,92,40,93,41,94},new int[]{-2,288});
    states[288] = new State(-9);
    states[289] = new State(-8);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-39, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-1,-6});
    rules[4] = new Rule(-1, new int[]{-1,-22});
    rules[5] = new Rule(-1, new int[]{-1,-4});
    rules[6] = new Rule(-6, new int[]{13,-8,44});
    rules[7] = new Rule(-4, new int[]{12,-5,4,-1,5});
    rules[8] = new Rule(-5, new int[]{-2});
    rules[9] = new Rule(-5, new int[]{-5,56,-2});
    rules[10] = new Rule(-22, new int[]{-26,-23});
    rules[11] = new Rule(-22, new int[]{-26,-24});
    rules[12] = new Rule(-23, new int[]{17,-2,68,-8,44});
    rules[13] = new Rule(-24, new int[]{-27,-2,45,-7,-40});
    rules[14] = new Rule(-24, new int[]{-27,-2,68,-8,-40});
    rules[15] = new Rule(-24, new int[]{-27,-2,45,-7,68,-8,-40});
    rules[16] = new Rule(-7, new int[]{-20});
    rules[17] = new Rule(-40, new int[]{});
    rules[18] = new Rule(-40, new int[]{44});
    rules[19] = new Rule(-27, new int[]{15});
    rules[20] = new Rule(-27, new int[]{16});
    rules[21] = new Rule(-26, new int[]{});
    rules[22] = new Rule(-26, new int[]{11});
    rules[23] = new Rule(-8, new int[]{-8,68,-9});
    rules[24] = new Rule(-8, new int[]{-8,69,-9});
    rules[25] = new Rule(-8, new int[]{-8,81,-9});
    rules[26] = new Rule(-8, new int[]{-8,73,-9});
    rules[27] = new Rule(-8, new int[]{-8,74,-9});
    rules[28] = new Rule(-8, new int[]{-8,82,-9});
    rules[29] = new Rule(-8, new int[]{-8,75,-9});
    rules[30] = new Rule(-8, new int[]{-8,83,-9});
    rules[31] = new Rule(-8, new int[]{-8,76,-9});
    rules[32] = new Rule(-8, new int[]{-8,77,-9});
    rules[33] = new Rule(-8, new int[]{-8,78,-9});
    rules[34] = new Rule(-8, new int[]{-8,79,-9});
    rules[35] = new Rule(-8, new int[]{-8,80,-9});
    rules[36] = new Rule(-8, new int[]{-8,84,-9});
    rules[37] = new Rule(-8, new int[]{-8,85,-9});
    rules[38] = new Rule(-8, new int[]{-8,86,-9});
    rules[39] = new Rule(-8, new int[]{-9});
    rules[40] = new Rule(-9, new int[]{-9,52,-10});
    rules[41] = new Rule(-9, new int[]{-10});
    rules[42] = new Rule(-10, new int[]{-10,54,-11});
    rules[43] = new Rule(-10, new int[]{-11});
    rules[44] = new Rule(-11, new int[]{-11,51,-12});
    rules[45] = new Rule(-11, new int[]{-12});
    rules[46] = new Rule(-12, new int[]{-12,64,-13});
    rules[47] = new Rule(-12, new int[]{-12,65,-13});
    rules[48] = new Rule(-12, new int[]{-13});
    rules[49] = new Rule(-13, new int[]{-13,62,-14});
    rules[50] = new Rule(-13, new int[]{-13,63,-14});
    rules[51] = new Rule(-13, new int[]{-13,66,-14});
    rules[52] = new Rule(-13, new int[]{-13,67,-14});
    rules[53] = new Rule(-13, new int[]{-14});
    rules[54] = new Rule(-14, new int[]{-14,60,-15});
    rules[55] = new Rule(-14, new int[]{-14,61,-15});
    rules[56] = new Rule(-14, new int[]{-15});
    rules[57] = new Rule(-15, new int[]{-15,47,-16});
    rules[58] = new Rule(-15, new int[]{-15,48,-16});
    rules[59] = new Rule(-15, new int[]{-15,55,-16});
    rules[60] = new Rule(-15, new int[]{-16});
    rules[61] = new Rule(-16, new int[]{-16,49,-17});
    rules[62] = new Rule(-16, new int[]{-16,50,-17});
    rules[63] = new Rule(-16, new int[]{-16,59,-17});
    rules[64] = new Rule(-16, new int[]{-17});
    rules[65] = new Rule(-17, new int[]{-17,58,-18});
    rules[66] = new Rule(-17, new int[]{-18});
    rules[67] = new Rule(-18, new int[]{-18,70,-19});
    rules[68] = new Rule(-18, new int[]{-18,72,-19});
    rules[69] = new Rule(-18, new int[]{-18,71,-19});
    rules[70] = new Rule(-18, new int[]{-19});
    rules[71] = new Rule(-19, new int[]{47,-20});
    rules[72] = new Rule(-19, new int[]{48,-20});
    rules[73] = new Rule(-19, new int[]{53,-20});
    rules[74] = new Rule(-19, new int[]{-20});
    rules[75] = new Rule(-20, new int[]{-20,56,-2});
    rules[76] = new Rule(-20, new int[]{-20,57,-2});
    rules[77] = new Rule(-20, new int[]{21,6,-37,7});
    rules[78] = new Rule(-20, new int[]{22,6,-38,7});
    rules[79] = new Rule(-20, new int[]{-20,8,-21,9});
    rules[80] = new Rule(-20, new int[]{8,-21,9});
    rules[81] = new Rule(-20, new int[]{-20,6,7});
    rules[82] = new Rule(-20, new int[]{-20,6,-28,7});
    rules[83] = new Rule(-20, new int[]{6,-8,7});
    rules[84] = new Rule(-20, new int[]{-2});
    rules[85] = new Rule(-20, new int[]{-30});
    rules[86] = new Rule(-20, new int[]{-30,-35});
    rules[87] = new Rule(-20, new int[]{-30,42,-8});
    rules[88] = new Rule(-20, new int[]{46,6,-37,7,42,-8});
    rules[89] = new Rule(-20, new int[]{88});
    rules[90] = new Rule(-20, new int[]{89});
    rules[91] = new Rule(-20, new int[]{87});
    rules[92] = new Rule(-37, new int[]{-37,43,-2});
    rules[93] = new Rule(-37, new int[]{-2});
    rules[94] = new Rule(-38, new int[]{-38,43,-25});
    rules[95] = new Rule(-38, new int[]{-25});
    rules[96] = new Rule(-25, new int[]{-2,45,-7,-40});
    rules[97] = new Rule(-25, new int[]{-2,68,-8,-40});
    rules[98] = new Rule(-25, new int[]{-2,45,-7,68,-8,-40});
    rules[99] = new Rule(-30, new int[]{18,6,-31,7,60,-7});
    rules[100] = new Rule(-30, new int[]{18,6,7,60,-7});
    rules[101] = new Rule(-30, new int[]{18,6,-31,7});
    rules[102] = new Rule(-30, new int[]{18,6,7});
    rules[103] = new Rule(-31, new int[]{-31,43,-32});
    rules[104] = new Rule(-31, new int[]{-32});
    rules[105] = new Rule(-32, new int[]{-33,-2,45,-7,68,-8});
    rules[106] = new Rule(-32, new int[]{-33,-2,68,-8});
    rules[107] = new Rule(-32, new int[]{-33,-2,45,-7});
    rules[108] = new Rule(-33, new int[]{});
    rules[109] = new Rule(-33, new int[]{-33,24});
    rules[110] = new Rule(-33, new int[]{-33,25});
    rules[111] = new Rule(-33, new int[]{-33,23});
    rules[112] = new Rule(-33, new int[]{-33,26});
    rules[113] = new Rule(-28, new int[]{-28,43,-29});
    rules[114] = new Rule(-28, new int[]{-29});
    rules[115] = new Rule(-29, new int[]{-8});
    rules[116] = new Rule(-29, new int[]{-2,45,-8});
    rules[117] = new Rule(-21, new int[]{-8});
    rules[118] = new Rule(-21, new int[]{-21,43,-8});
    rules[119] = new Rule(-35, new int[]{4,-36,5});
    rules[120] = new Rule(-35, new int[]{4,5});
    rules[121] = new Rule(-36, new int[]{});
    rules[122] = new Rule(-36, new int[]{-36,-34});
    rules[123] = new Rule(-34, new int[]{-22});
    rules[124] = new Rule(-34, new int[]{-6});
    rules[125] = new Rule(-34, new int[]{-35});
    rules[126] = new Rule(-2, new int[]{90});
    rules[127] = new Rule(-2, new int[]{10});
    rules[128] = new Rule(-2, new int[]{11});
    rules[129] = new Rule(-2, new int[]{12});
    rules[130] = new Rule(-2, new int[]{13});
    rules[131] = new Rule(-2, new int[]{14});
    rules[132] = new Rule(-2, new int[]{15});
    rules[133] = new Rule(-2, new int[]{16});
    rules[134] = new Rule(-2, new int[]{17});
    rules[135] = new Rule(-2, new int[]{18});
    rules[136] = new Rule(-2, new int[]{19});
    rules[137] = new Rule(-2, new int[]{20,57,-3,57});
    rules[138] = new Rule(-2, new int[]{20});
    rules[139] = new Rule(-2, new int[]{23});
    rules[140] = new Rule(-2, new int[]{24});
    rules[141] = new Rule(-2, new int[]{25});
    rules[142] = new Rule(-2, new int[]{26});
    rules[143] = new Rule(-2, new int[]{27});
    rules[144] = new Rule(-2, new int[]{28});
    rules[145] = new Rule(-2, new int[]{29});
    rules[146] = new Rule(-2, new int[]{30});
    rules[147] = new Rule(-2, new int[]{31});
    rules[148] = new Rule(-2, new int[]{32});
    rules[149] = new Rule(-2, new int[]{33});
    rules[150] = new Rule(-2, new int[]{34});
    rules[151] = new Rule(-2, new int[]{35});
    rules[152] = new Rule(-2, new int[]{36});
    rules[153] = new Rule(-2, new int[]{37});
    rules[154] = new Rule(-2, new int[]{38});
    rules[155] = new Rule(-2, new int[]{39});
    rules[156] = new Rule(-2, new int[]{40});
    rules[157] = new Rule(-2, new int[]{41});
    rules[158] = new Rule(-3, new int[]{47});
    rules[159] = new Rule(-3, new int[]{48});
    rules[160] = new Rule(-3, new int[]{49});
    rules[161] = new Rule(-3, new int[]{50});
    rules[162] = new Rule(-3, new int[]{51});
    rules[163] = new Rule(-3, new int[]{52});
    rules[164] = new Rule(-3, new int[]{53});
    rules[165] = new Rule(-3, new int[]{54});
    rules[166] = new Rule(-3, new int[]{55});
    rules[167] = new Rule(-3, new int[]{56});
    rules[168] = new Rule(-3, new int[]{57});
    rules[169] = new Rule(-3, new int[]{58});
    rules[170] = new Rule(-3, new int[]{59});
    rules[171] = new Rule(-3, new int[]{60});
    rules[172] = new Rule(-3, new int[]{61});
    rules[173] = new Rule(-3, new int[]{62});
    rules[174] = new Rule(-3, new int[]{63});
    rules[175] = new Rule(-3, new int[]{64});
    rules[176] = new Rule(-3, new int[]{65});
    rules[177] = new Rule(-3, new int[]{66});
    rules[178] = new Rule(-3, new int[]{67});
    rules[179] = new Rule(-3, new int[]{68});
    rules[180] = new Rule(-3, new int[]{69});
    rules[181] = new Rule(-3, new int[]{70});
    rules[182] = new Rule(-3, new int[]{71});
    rules[183] = new Rule(-3, new int[]{72});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)PsiTokenType.error, (int)PsiTokenType.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> /* empty */
#line 75 "Psi.y"
                                  { CurrentSemanticValue.Module = new Module(); }
#line default
        break;
      case 3: // program -> program, assertion
#line 76 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Assertion); }
#line default
        break;
      case 4: // program -> program, declaration
#line 77 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Declaration); }
#line default
        break;
      case 5: // program -> program, module
#line 78 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Module); }
#line default
        break;
      case 6: // assertion -> ASSERT, expression, TERMINATOR
#line 81 "Psi.y"
                                           {
            	CurrentSemanticValue.Assertion = new Assertion(ValueStack[ValueStack.Depth-2].Expression); 
            }
#line default
        break;
      case 7: // module -> MODULE, modname, CURLY_O, program, CURLY_C
#line 86 "Psi.y"
                                                     {
				CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module;
				CurrentSemanticValue.Module.Name = ValueStack[ValueStack.Depth-4].Name;
			}
#line default
        break;
      case 8: // modname -> identifier
#line 92 "Psi.y"
                         {
            	CurrentSemanticValue.Name = new CompoundName(ValueStack[ValueStack.Depth-1].String); 
            }
#line default
        break;
      case 9: // modname -> modname, DOT, identifier
#line 95 "Psi.y"
                                     {
            	CurrentSemanticValue.Name = ValueStack[ValueStack.Depth-3].Name;
            	CurrentSemanticValue.Name.Add(ValueStack[ValueStack.Depth-1].String);
        	}
#line default
        break;
      case 10: // declaration -> export, typedecl
#line 101 "Psi.y"
                              {
            	CurrentSemanticValue.Declaration = ValueStack[ValueStack.Depth-1].Declaration;
            	CurrentSemanticValue.Declaration.IsExported = (bool)ValueStack[ValueStack.Depth-2].Boolean;
            }
#line default
        break;
      case 11: // declaration -> export, vardecl
#line 105 "Psi.y"
                             {
            	CurrentSemanticValue.Declaration = ValueStack[ValueStack.Depth-1].Declaration;
            	CurrentSemanticValue.Declaration.IsExported = (bool)ValueStack[ValueStack.Depth-2].Boolean;
            }
#line default
        break;
      case 12: // typedecl -> TYPE, identifier, IS, expression, TERMINATOR
#line 111 "Psi.y"
                                                       {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, TypeDeclaration, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = true;
            }
#line default
        break;
      case 13: // vardecl -> storage, identifier, COLON, type, terminator
#line 117 "Psi.y"
                                                       {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].Expression, null);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 14: // vardecl -> storage, identifier, IS, expression, terminator
#line 121 "Psi.y"
                                                             {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, Undefined, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 15: // vardecl -> storage, identifier, COLON, type, IS, expression, terminator
#line 125 "Psi.y"
                                                                     {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-6].String, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-7].Boolean;
            }
#line default
        break;
      case 16: // type -> value
#line 132 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 19: // storage -> CONST
#line 140 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 20: // storage -> VAR
#line 141 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 21: // export -> /* empty */
#line 144 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 22: // export -> EXPORT
#line 145 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 23: // expression -> expression, IS, expr_or
#line 149 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.CopyAssign);
			}
#line default
        break;
      case 24: // expression -> expression, ASSIGN, expr_or
#line 153 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.SemanticAssign);
			}
#line default
        break;
      case 25: // expression -> expression, WB_CONCAT, expr_or
#line 157 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackConcat);
			}
#line default
        break;
      case 26: // expression -> expression, WB_PLUS, expr_or
#line 161 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackPlus);
			}
#line default
        break;
      case 27: // expression -> expression, WB_MINUS, expr_or
#line 165 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMinus);
			}
#line default
        break;
      case 28: // expression -> expression, WB_EXP, expr_or
#line 169 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackExponentiate);
			}
#line default
        break;
      case 29: // expression -> expression, WB_MULT, expr_or
#line 173 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMultiply);
			}
#line default
        break;
      case 30: // expression -> expression, WB_MOD, expr_or
#line 177 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackModulo);
			}
#line default
        break;
      case 31: // expression -> expression, WB_DIV, expr_or
#line 181 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackDivide);
			}
#line default
        break;
      case 32: // expression -> expression, WB_AND, expr_or
#line 185 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackAnd);
			}
#line default
        break;
      case 33: // expression -> expression, WB_OR, expr_or
#line 189 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackOr);
			}
#line default
        break;
      case 34: // expression -> expression, WB_INVERT, expr_or
#line 193 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackInvert);
			}
#line default
        break;
      case 35: // expression -> expression, WB_XOR, expr_or
#line 197 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackXor);
			}
#line default
        break;
      case 36: // expression -> expression, WB_ASR, expr_or
#line 201 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackArithmeticShiftRight);
			}
#line default
        break;
      case 37: // expression -> expression, WB_SHL, expr_or
#line 205 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftLeft);
			}
#line default
        break;
      case 38: // expression -> expression, WB_SHR, expr_or
#line 209 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftRight);
			}
#line default
        break;
      case 39: // expression -> expr_or
#line 213 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 40: // expr_or -> expr_or, OR, expr_xor
#line 219 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Or);
			}
#line default
        break;
      case 41: // expr_or -> expr_xor
#line 223 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 42: // expr_xor -> expr_xor, XOR, expr_and
#line 229 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Xor);
			}
#line default
        break;
      case 43: // expr_xor -> expr_and
#line 233 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 44: // expr_and -> expr_and, AND, equality
#line 239 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.And);
			}
#line default
        break;
      case 45: // expr_and -> equality
#line 243 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 46: // equality -> equality, EQUAL, comparison
#line 249 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Equals);
			}
#line default
        break;
      case 47: // equality -> equality, NEQUAL, comparison
#line 253 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.NotEquals);
			}
#line default
        break;
      case 48: // equality -> comparison
#line 257 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 49: // comparison -> comparison, LEQUAL, expr_arrows
#line 263 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.LessOrEqual);
			}
#line default
        break;
      case 50: // comparison -> comparison, GEQUAL, expr_arrows
#line 267 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.MoreOrEqual);
			}
#line default
        break;
      case 51: // comparison -> comparison, LESS, expr_arrows
#line 271 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Less);
			}
#line default
        break;
      case 52: // comparison -> comparison, MORE, expr_arrows
#line 275 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.More);
			}
#line default
        break;
      case 53: // comparison -> expr_arrows
#line 279 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 54: // expr_arrows -> expr_arrows, FORWARD, sum
#line 285 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Forward);
			}
#line default
        break;
      case 55: // expr_arrows -> expr_arrows, BACKWARD, sum
#line 289 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Backward);
			}
#line default
        break;
      case 56: // expr_arrows -> sum
#line 293 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 57: // sum -> sum, PLUS, term
#line 299 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 58: // sum -> sum, MINUS, term
#line 303 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 59: // sum -> sum, CONCAT, term
#line 307 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Concat);
			}
#line default
        break;
      case 60: // sum -> term
#line 311 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 61: // term -> term, MULT, expo
#line 317 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Multiply);
			}
#line default
        break;
      case 62: // term -> term, DIV, expo
#line 321 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Divide);
			}
#line default
        break;
      case 63: // term -> term, MOD, expo
#line 325 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Modulo);
			}
#line default
        break;
      case 64: // term -> expo
#line 329 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 65: // expo -> expo, EXP, shifting
#line 335 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Exponentiate);
			}
#line default
        break;
      case 66: // expo -> shifting
#line 339 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 67: // shifting -> shifting, ASR, unary
#line 345 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ArithmeticShiftRight);
			}
#line default
        break;
      case 68: // shifting -> shifting, SHR, unary
#line 349 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftRight);
			}
#line default
        break;
      case 69: // shifting -> shifting, SHL, unary
#line 353 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftLeft);
			}
#line default
        break;
      case 70: // shifting -> unary
#line 357 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 71: // unary -> PLUS, value
#line 363 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 72: // unary -> MINUS, value
#line 367 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 73: // unary -> INVERT, value
#line 371 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Invert);
			}
#line default
        break;
      case 74: // unary -> value
#line 375 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 75: // value -> value, DOT, identifier
#line 381 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyDot(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 76: // value -> value, META, identifier
#line 385 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyMeta(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 77: // value -> ENUM, ROUND_O, idlist, ROUND_C
#line 389 "Psi.y"
   {
				CurrentSemanticValue.Expression = new EnumTypeLiteral(ValueStack[ValueStack.Depth-2].StringList);
			}
#line default
        break;
      case 78: // value -> RECORD, ROUND_O, fieldlist, ROUND_C
#line 393 "Psi.y"
   {
				CurrentSemanticValue.Expression = new RecordTypeLiteral(ValueStack[ValueStack.Depth-2].FieldList);
			}
#line default
        break;
      case 79: // value -> value, SQUARE_O, exprlist, SQUARE_C
#line 397 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayIndexingExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ExpressionList);
			}
#line default
        break;
      case 80: // value -> SQUARE_O, exprlist, SQUARE_C
#line 401 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayLiteral(ValueStack[ValueStack.Depth-2].ExpressionList);
			}
#line default
        break;
      case 81: // value -> value, ROUND_O, ROUND_C
#line 405 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-3].Expression, new List<Argument>());
			}
#line default
        break;
      case 82: // value -> value, ROUND_O, arglist, ROUND_C
#line 409 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ArgumentList);
			}
#line default
        break;
      case 83: // value -> ROUND_O, expression, ROUND_C
#line 413 "Psi.y"
            {
                CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-2].Expression;
            }
#line default
        break;
      case 84: // value -> identifier
#line 417 "Psi.y"
   {
            	CurrentSemanticValue.Expression = new VariableReference(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 85: // value -> functiontype
#line 421 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].FunctionType;
			}
#line default
        break;
      case 86: // value -> functiontype, block
#line 425 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionLiteral(ValueStack[ValueStack.Depth-2].FunctionType, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 87: // value -> functiontype, MAPSTO, expression
#line 429 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionLiteral(ValueStack[ValueStack.Depth-3].FunctionType, new ExpressionStatement(ValueStack[ValueStack.Depth-1].Expression));
			}
#line default
        break;
      case 88: // value -> LAMBDA, ROUND_O, idlist, ROUND_C, MAPSTO, expression
#line 433 "Psi.y"
   {
				CurrentSemanticValue.Expression = new LambdaLiteral(ValueStack[ValueStack.Depth-4].StringList, new ExpressionStatement(ValueStack[ValueStack.Depth-1].Expression));
			}
#line default
        break;
      case 89: // value -> STRING
#line 437 "Psi.y"
   {
				CurrentSemanticValue.Expression = new StringLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 90: // value -> ENUMVAL
#line 441 "Psi.y"
   {
				CurrentSemanticValue.Expression = new EnumLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 91: // value -> NUMBER
#line 445 "Psi.y"
   {
				CurrentSemanticValue.Expression = new NumberLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 92: // idlist -> idlist, COMMA, identifier
#line 451 "Psi.y"
   {
				CurrentSemanticValue.StringList = ValueStack[ValueStack.Depth-3].StringList;
				CurrentSemanticValue.StringList.Add(ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 93: // idlist -> identifier
#line 456 "Psi.y"
   {
				CurrentSemanticValue.StringList = new List<string>();
				CurrentSemanticValue.StringList.Add(ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 94: // fieldlist -> fieldlist, COMMA, field
#line 463 "Psi.y"
   {
				CurrentSemanticValue.FieldList = ValueStack[ValueStack.Depth-3].FieldList;
				CurrentSemanticValue.FieldList.Add(ValueStack[ValueStack.Depth-1].Declaration);	
			}
#line default
        break;
      case 95: // fieldlist -> field
#line 468 "Psi.y"
   {
				CurrentSemanticValue.FieldList = new List<Declaration>();
				CurrentSemanticValue.FieldList.Add(ValueStack[ValueStack.Depth-1].Declaration);
			}
#line default
        break;
      case 96: // field -> identifier, COLON, type, terminator
#line 474 "Psi.y"
                                               {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].Expression, null);
            	CurrentSemanticValue.Declaration.IsField = true;
            }
#line default
        break;
      case 97: // field -> identifier, IS, expression, terminator
#line 478 "Psi.y"
                                                     {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, Undefined, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsField = true;
            }
#line default
        break;
      case 98: // field -> identifier, COLON, type, IS, expression, terminator
#line 482 "Psi.y"
                                                             {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-6].String, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsField = true;
            }
#line default
        break;
      case 99: // functiontype -> FN, ROUND_O, paramlist, ROUND_C, FORWARD, type
#line 489 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(ValueStack[ValueStack.Depth-4].ParameterList, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 100: // functiontype -> FN, ROUND_O, ROUND_C, FORWARD, type
#line 493 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(new List<Parameter>(), ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 101: // functiontype -> FN, ROUND_O, paramlist, ROUND_C
#line 497 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(ValueStack[ValueStack.Depth-2].ParameterList, Void);
			}
#line default
        break;
      case 102: // functiontype -> FN, ROUND_O, ROUND_C
#line 501 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(new List<Parameter>(), Void);
			}
#line default
        break;
      case 103: // paramlist -> paramlist, COMMA, parameter
#line 507 "Psi.y"
   {
				CurrentSemanticValue.ParameterList = ValueStack[ValueStack.Depth-3].ParameterList;
				CurrentSemanticValue.ParameterList.Add(ValueStack[ValueStack.Depth-1].Parameter);
			}
#line default
        break;
      case 104: // paramlist -> parameter
#line 512 "Psi.y"
   {
				CurrentSemanticValue.ParameterList = new List<Parameter>();
				CurrentSemanticValue.ParameterList.Add(ValueStack[ValueStack.Depth-1].Parameter);
			}
#line default
        break;
      case 105: // parameter -> prefix, identifier, COLON, type, IS, expression
#line 519 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-6].ParameterPrefix, ValueStack[ValueStack.Depth-5].String, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 106: // parameter -> prefix, identifier, IS, expression
#line 523 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-4].ParameterPrefix, ValueStack[ValueStack.Depth-3].String, Undefined, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 107: // parameter -> prefix, identifier, COLON, type
#line 527 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-4].ParameterPrefix, ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].Expression, null);
			}
#line default
        break;
      case 108: // prefix -> /* empty */
#line 533 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ParameterPrefix.None;
			}
#line default
        break;
      case 109: // prefix -> prefix, IN
#line 537 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.In;
			}
#line default
        break;
      case 110: // prefix -> prefix, OUT
#line 541 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.Out;
			}
#line default
        break;
      case 111: // prefix -> prefix, INOUT
#line 545 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.InOut;
			}
#line default
        break;
      case 112: // prefix -> prefix, THIS
#line 549 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.This;
			}
#line default
        break;
      case 113: // arglist -> arglist, COMMA, argument
#line 555 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = ValueStack[ValueStack.Depth-3].ArgumentList;
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 114: // arglist -> argument
#line 560 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = new List<Argument>();
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 115: // argument -> expression
#line 567 "Psi.y"
   {
				CurrentSemanticValue.Argument = new PositionalArgument(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 116: // argument -> identifier, COLON, expression
#line 571 "Psi.y"
   {
				CurrentSemanticValue.Argument = new NamedArgument(ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 117: // exprlist -> expression
#line 577 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = new List<Expression>();
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 118: // exprlist -> exprlist, COMMA, expression
#line 582 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = ValueStack[ValueStack.Depth-3].ExpressionList;
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 119: // block -> CURLY_O, stmtlist, CURLY_C
#line 589 "Psi.y"
   {
				CurrentSemanticValue.Statement = new Block(ValueStack[ValueStack.Depth-2].StatementList);
			}
#line default
        break;
      case 120: // block -> CURLY_O, CURLY_C
#line 593 "Psi.y"
   {
				CurrentSemanticValue.Statement = new Block(new List<Statement>());
			}
#line default
        break;
      case 121: // stmtlist -> /* empty */
#line 599 "Psi.y"
   {
				CurrentSemanticValue.StatementList = new List<Statement>();
			}
#line default
        break;
      case 122: // stmtlist -> stmtlist, statement
#line 603 "Psi.y"
   {
				CurrentSemanticValue.StatementList = ValueStack[ValueStack.Depth-2].StatementList;
				CurrentSemanticValue.StatementList.Add(ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 123: // statement -> declaration
#line 610 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Declaration;
			}
#line default
        break;
      case 124: // statement -> assertion
#line 614 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Assertion;
			}
#line default
        break;
      case 125: // statement -> block
#line 618 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Statement;
			}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((PsiTokenType)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((PsiTokenType)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 665 "Psi.y"
public PsiParser(PsiLexer lexer) : base(lexer) 
{ 
	
}

public Module Result => this.CurrentSemanticValue.Module;

public static Expression TypeDeclaration { get; } = new VariableReference("<type>");

public static Expression Undefined { get; } = new VariableReference("<?>");

public static Expression Void { get; } = new VariableReference("<void>");

private static Expression Apply(Expression lhs, Expression rhs, PsiOperator op)
{
	return new BinaryOperation(op, lhs, rhs);
}

private static Expression Apply(Expression expr, PsiOperator op)
{
	return new UnaryOperation(op, expr);
}

private static Expression ApplyDot(Expression exp, string field)
{
	return new DotExpression(exp, field);
}

private static Expression ApplyMeta(Expression exp, string field)
{
	return new MetaExpression(exp, field);
}
#line default
}
}
