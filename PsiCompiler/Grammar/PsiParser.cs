// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DENKPLATTE-W7
// DateTime: 27.04.2018 09:37:23
// UserName: Felix
// Input file <Psi.y - 26.04.2018 23:49:44>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Psi.Compiler.Grammar
{
public enum PsiTokenType {error=2,EOF=3,CURLY_O=4,CURLY_C=5,ROUND_O=6,
    ROUND_C=7,SQUARE_O=8,SQUARE_C=9,IMPORT=10,EXPORT=11,MODULE=12,
    ASSERT=13,ERROR=14,CONST=15,VAR=16,TYPE=17,FN=18,
    NEW=19,OPERATOR=20,ENUM=21,RECORD=22,INOUT=23,IN=24,
    OUT=25,THIS=26,LAZY=27,FOR=28,WHILE=29,LOOP=30,
    UNTIL=31,IF=32,ELSE=33,SELECT=34,WHEN=35,OTHERWISE=36,
    RESTRICT=37,BREAK=38,CONTINUE=39,FALLTROUGH=40,RETURN=41,GOTO=42,
    MAPSTO=43,COMMA=44,TERMINATOR=45,COLON=46,LAMBDA=47,REF=48,
    ARRAY=49,PLUS=50,MINUS=51,MULT=52,DIV=53,AND=54,
    OR=55,INVERT=56,XOR=57,CONCAT=58,DOT=59,META=60,
    EXP=61,MOD=62,FORWARD=63,BACKWARD=64,LEQUAL=65,GEQUAL=66,
    EQUAL=67,NEQUAL=68,LESS=69,MORE=70,IS=71,ASSIGN=72,
    ASR=73,SHL=74,SHR=75,WB_PLUS=76,WB_MINUS=77,WB_MULT=78,
    WB_DIV=79,WB_AND=80,WB_OR=81,WB_XOR=82,WB_CONCAT=83,WB_EXP=84,
    WB_MOD=85,WB_ASR=86,WB_SHL=87,WB_SHR=88,NUMBER=89,STRING=90,
    ENUMVAL=91,IDENT=92,Comment=93,LongComment=94,Whitespace=95,UMINUS=96,
    UPLUS=97,UINVERT=98};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class PsiParser: ShiftReduceParser<ParserNode, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[183];
  private static State[] states = new State[352];
  private static string[] nonTerms = new string[] {
      "program", "identifier", "opsym", "module", "modname", "import", "assertion", 
      "type", "expression", "expr_or", "expr_xor", "expr_and", "equality", "comparison", 
      "expr_arrows", "sum", "term", "expo", "shifting", "unary", "value", "exprlist", 
      "declaration", "vardecl", "field", "typedecl", "export", "storage", "arglist", 
      "argument", "functiontype", "paramlist", "parameter", "prefix", "statement", 
      "block", "stmtlist", "idlist", "fieldlist", "options", "$accept", "terminator", 
      };

  static PsiParser() {
    states[0] = new State(-2,new int[]{-1,1});
    states[1] = new State(new int[]{3,2,13,8,11,271,12,344,10,349,17,-30,15,-30,16,-30},new int[]{-7,3,-23,4,-26,5,-4,6,-6,7,-27,251});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(-5);
    states[6] = new State(-6);
    states[7] = new State(-7);
    states[8] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,9,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[9] = new State(new int[]{45,10,71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[10] = new State(-8);
    states[11] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,12,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[12] = new State(new int[]{71,-32,72,-32,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,45,-32,9,-32,44,-32,7,-32,59,-32,60,-32,8,-32,6,-32,73,-32,75,-32,74,-32,61,-32,52,-32,53,-32,62,-32,50,-32,51,-32,58,-32,63,-32,64,-32,65,-32,66,-32,69,-32,70,-32,67,-32,68,-32,54,-32,57,-32,55,-32,3,-32,13,-32,11,-32,12,-32,10,-32,17,-32,15,-32,16,-32,5,-32,4,-32,38,-32,40,-32,39,-32,14,-32,41,-32,42,-32,32,-32,29,-32,30,-32,37,-32,28,-32,34,-32,56,-32,19,-32,92,-32,20,-32,18,-32,47,-32,90,-32,91,-32,89,-32,33,-32,31,-32,35,-32,36,-32,46,-32});
    states[13] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,14,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[14] = new State(new int[]{71,-33,72,-33,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,45,-33,9,-33,44,-33,7,-33,59,-33,60,-33,8,-33,6,-33,73,-33,75,-33,74,-33,61,-33,52,-33,53,-33,62,-33,50,-33,51,-33,58,-33,63,-33,64,-33,65,-33,66,-33,69,-33,70,-33,67,-33,68,-33,54,-33,57,-33,55,-33,3,-33,13,-33,11,-33,12,-33,10,-33,17,-33,15,-33,16,-33,5,-33,4,-33,38,-33,40,-33,39,-33,14,-33,41,-33,42,-33,32,-33,29,-33,30,-33,37,-33,28,-33,34,-33,56,-33,19,-33,92,-33,20,-33,18,-33,47,-33,90,-33,91,-33,89,-33,33,-33,31,-33,35,-33,36,-33,46,-33});
    states[15] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,16,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[16] = new State(new int[]{71,-34,72,-34,83,-34,76,-34,77,-34,84,-34,78,-34,85,-34,79,-34,80,-34,81,-34,82,-34,86,35,87,37,88,39,45,-34,9,-34,44,-34,7,-34,59,-34,60,-34,8,-34,6,-34,73,-34,75,-34,74,-34,61,-34,52,-34,53,-34,62,-34,50,-34,51,-34,58,-34,63,-34,64,-34,65,-34,66,-34,69,-34,70,-34,67,-34,68,-34,54,-34,57,-34,55,-34,3,-34,13,-34,11,-34,12,-34,10,-34,17,-34,15,-34,16,-34,5,-34,4,-34,38,-34,40,-34,39,-34,14,-34,41,-34,42,-34,32,-34,29,-34,30,-34,37,-34,28,-34,34,-34,56,-34,19,-34,92,-34,20,-34,18,-34,47,-34,90,-34,91,-34,89,-34,33,-34,31,-34,35,-34,36,-34,46,-34});
    states[17] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,18,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[18] = new State(new int[]{71,-35,72,-35,83,15,76,-35,77,-35,84,21,78,-35,85,25,79,-35,80,29,81,31,82,33,86,35,87,37,88,39,45,-35,9,-35,44,-35,7,-35,59,-35,60,-35,8,-35,6,-35,73,-35,75,-35,74,-35,61,-35,52,-35,53,-35,62,-35,50,-35,51,-35,58,-35,63,-35,64,-35,65,-35,66,-35,69,-35,70,-35,67,-35,68,-35,54,-35,57,-35,55,-35,3,-35,13,-35,11,-35,12,-35,10,-35,17,-35,15,-35,16,-35,5,-35,4,-35,38,-35,40,-35,39,-35,14,-35,41,-35,42,-35,32,-35,29,-35,30,-35,37,-35,28,-35,34,-35,56,-35,19,-35,92,-35,20,-35,18,-35,47,-35,90,-35,91,-35,89,-35,33,-35,31,-35,35,-35,36,-35,46,-35});
    states[19] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,20,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[20] = new State(new int[]{71,-36,72,-36,83,15,76,-36,77,-36,84,21,78,-36,85,25,79,-36,80,29,81,31,82,33,86,35,87,37,88,39,45,-36,9,-36,44,-36,7,-36,59,-36,60,-36,8,-36,6,-36,73,-36,75,-36,74,-36,61,-36,52,-36,53,-36,62,-36,50,-36,51,-36,58,-36,63,-36,64,-36,65,-36,66,-36,69,-36,70,-36,67,-36,68,-36,54,-36,57,-36,55,-36,3,-36,13,-36,11,-36,12,-36,10,-36,17,-36,15,-36,16,-36,5,-36,4,-36,38,-36,40,-36,39,-36,14,-36,41,-36,42,-36,32,-36,29,-36,30,-36,37,-36,28,-36,34,-36,56,-36,19,-36,92,-36,20,-36,18,-36,47,-36,90,-36,91,-36,89,-36,33,-36,31,-36,35,-36,36,-36,46,-36});
    states[21] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,22,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[22] = new State(new int[]{71,-37,72,-37,83,-37,76,-37,77,-37,84,-37,78,-37,85,-37,79,-37,80,-37,81,-37,82,-37,86,35,87,37,88,39,45,-37,9,-37,44,-37,7,-37,59,-37,60,-37,8,-37,6,-37,73,-37,75,-37,74,-37,61,-37,52,-37,53,-37,62,-37,50,-37,51,-37,58,-37,63,-37,64,-37,65,-37,66,-37,69,-37,70,-37,67,-37,68,-37,54,-37,57,-37,55,-37,3,-37,13,-37,11,-37,12,-37,10,-37,17,-37,15,-37,16,-37,5,-37,4,-37,38,-37,40,-37,39,-37,14,-37,41,-37,42,-37,32,-37,29,-37,30,-37,37,-37,28,-37,34,-37,56,-37,19,-37,92,-37,20,-37,18,-37,47,-37,90,-37,91,-37,89,-37,33,-37,31,-37,35,-37,36,-37,46,-37});
    states[23] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,24,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[24] = new State(new int[]{71,-38,72,-38,83,15,76,-38,77,-38,84,21,78,-38,85,25,79,-38,80,29,81,31,82,33,86,35,87,37,88,39,45,-38,9,-38,44,-38,7,-38,59,-38,60,-38,8,-38,6,-38,73,-38,75,-38,74,-38,61,-38,52,-38,53,-38,62,-38,50,-38,51,-38,58,-38,63,-38,64,-38,65,-38,66,-38,69,-38,70,-38,67,-38,68,-38,54,-38,57,-38,55,-38,3,-38,13,-38,11,-38,12,-38,10,-38,17,-38,15,-38,16,-38,5,-38,4,-38,38,-38,40,-38,39,-38,14,-38,41,-38,42,-38,32,-38,29,-38,30,-38,37,-38,28,-38,34,-38,56,-38,19,-38,92,-38,20,-38,18,-38,47,-38,90,-38,91,-38,89,-38,33,-38,31,-38,35,-38,36,-38,46,-38});
    states[25] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,26,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[26] = new State(new int[]{71,-39,72,-39,83,-39,76,-39,77,-39,84,-39,78,-39,85,-39,79,-39,80,-39,81,-39,82,-39,86,35,87,37,88,39,45,-39,9,-39,44,-39,7,-39,59,-39,60,-39,8,-39,6,-39,73,-39,75,-39,74,-39,61,-39,52,-39,53,-39,62,-39,50,-39,51,-39,58,-39,63,-39,64,-39,65,-39,66,-39,69,-39,70,-39,67,-39,68,-39,54,-39,57,-39,55,-39,3,-39,13,-39,11,-39,12,-39,10,-39,17,-39,15,-39,16,-39,5,-39,4,-39,38,-39,40,-39,39,-39,14,-39,41,-39,42,-39,32,-39,29,-39,30,-39,37,-39,28,-39,34,-39,56,-39,19,-39,92,-39,20,-39,18,-39,47,-39,90,-39,91,-39,89,-39,33,-39,31,-39,35,-39,36,-39,46,-39});
    states[27] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,28,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[28] = new State(new int[]{71,-40,72,-40,83,15,76,-40,77,-40,84,21,78,-40,85,25,79,-40,80,29,81,31,82,33,86,35,87,37,88,39,45,-40,9,-40,44,-40,7,-40,59,-40,60,-40,8,-40,6,-40,73,-40,75,-40,74,-40,61,-40,52,-40,53,-40,62,-40,50,-40,51,-40,58,-40,63,-40,64,-40,65,-40,66,-40,69,-40,70,-40,67,-40,68,-40,54,-40,57,-40,55,-40,3,-40,13,-40,11,-40,12,-40,10,-40,17,-40,15,-40,16,-40,5,-40,4,-40,38,-40,40,-40,39,-40,14,-40,41,-40,42,-40,32,-40,29,-40,30,-40,37,-40,28,-40,34,-40,56,-40,19,-40,92,-40,20,-40,18,-40,47,-40,90,-40,91,-40,89,-40,33,-40,31,-40,35,-40,36,-40,46,-40});
    states[29] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,30,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[30] = new State(new int[]{71,-41,72,-41,83,-41,76,-41,77,-41,84,-41,78,-41,85,-41,79,-41,80,-41,81,-41,82,-41,86,35,87,37,88,39,45,-41,9,-41,44,-41,7,-41,59,-41,60,-41,8,-41,6,-41,73,-41,75,-41,74,-41,61,-41,52,-41,53,-41,62,-41,50,-41,51,-41,58,-41,63,-41,64,-41,65,-41,66,-41,69,-41,70,-41,67,-41,68,-41,54,-41,57,-41,55,-41,3,-41,13,-41,11,-41,12,-41,10,-41,17,-41,15,-41,16,-41,5,-41,4,-41,38,-41,40,-41,39,-41,14,-41,41,-41,42,-41,32,-41,29,-41,30,-41,37,-41,28,-41,34,-41,56,-41,19,-41,92,-41,20,-41,18,-41,47,-41,90,-41,91,-41,89,-41,33,-41,31,-41,35,-41,36,-41,46,-41});
    states[31] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,32,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[32] = new State(new int[]{71,-42,72,-42,83,-42,76,-42,77,-42,84,-42,78,-42,85,-42,79,-42,80,-42,81,-42,82,-42,86,35,87,37,88,39,45,-42,9,-42,44,-42,7,-42,59,-42,60,-42,8,-42,6,-42,73,-42,75,-42,74,-42,61,-42,52,-42,53,-42,62,-42,50,-42,51,-42,58,-42,63,-42,64,-42,65,-42,66,-42,69,-42,70,-42,67,-42,68,-42,54,-42,57,-42,55,-42,3,-42,13,-42,11,-42,12,-42,10,-42,17,-42,15,-42,16,-42,5,-42,4,-42,38,-42,40,-42,39,-42,14,-42,41,-42,42,-42,32,-42,29,-42,30,-42,37,-42,28,-42,34,-42,56,-42,19,-42,92,-42,20,-42,18,-42,47,-42,90,-42,91,-42,89,-42,33,-42,31,-42,35,-42,36,-42,46,-42});
    states[33] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,34,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[34] = new State(new int[]{71,-43,72,-43,83,-43,76,-43,77,-43,84,-43,78,-43,85,-43,79,-43,80,-43,81,-43,82,-43,86,35,87,37,88,39,45,-43,9,-43,44,-43,7,-43,59,-43,60,-43,8,-43,6,-43,73,-43,75,-43,74,-43,61,-43,52,-43,53,-43,62,-43,50,-43,51,-43,58,-43,63,-43,64,-43,65,-43,66,-43,69,-43,70,-43,67,-43,68,-43,54,-43,57,-43,55,-43,3,-43,13,-43,11,-43,12,-43,10,-43,17,-43,15,-43,16,-43,5,-43,4,-43,38,-43,40,-43,39,-43,14,-43,41,-43,42,-43,32,-43,29,-43,30,-43,37,-43,28,-43,34,-43,56,-43,19,-43,92,-43,20,-43,18,-43,47,-43,90,-43,91,-43,89,-43,33,-43,31,-43,35,-43,36,-43,46,-43});
    states[35] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,36,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[36] = new State(-44);
    states[37] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,38,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[38] = new State(-45);
    states[39] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,40,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[40] = new State(-46);
    states[41] = new State(new int[]{55,42,45,-47,71,-47,72,-47,83,-47,76,-47,77,-47,84,-47,78,-47,85,-47,79,-47,80,-47,81,-47,82,-47,86,-47,87,-47,88,-47,9,-47,44,-47,7,-47,59,-47,60,-47,8,-47,6,-47,73,-47,75,-47,74,-47,61,-47,52,-47,53,-47,62,-47,50,-47,51,-47,58,-47,63,-47,64,-47,65,-47,66,-47,69,-47,70,-47,67,-47,68,-47,54,-47,57,-47,3,-47,13,-47,11,-47,12,-47,10,-47,17,-47,15,-47,16,-47,5,-47,4,-47,38,-47,40,-47,39,-47,14,-47,41,-47,42,-47,32,-47,29,-47,30,-47,37,-47,28,-47,34,-47,56,-47,19,-47,92,-47,20,-47,18,-47,47,-47,90,-47,91,-47,89,-47,33,-47,31,-47,35,-47,36,-47,46,-47});
    states[42] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-10,43,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[43] = new State(-48);
    states[44] = new State(new int[]{57,45,55,-49,45,-49,71,-49,72,-49,83,-49,76,-49,77,-49,84,-49,78,-49,85,-49,79,-49,80,-49,81,-49,82,-49,86,-49,87,-49,88,-49,9,-49,44,-49,7,-49,59,-49,60,-49,8,-49,6,-49,73,-49,75,-49,74,-49,61,-49,52,-49,53,-49,62,-49,50,-49,51,-49,58,-49,63,-49,64,-49,65,-49,66,-49,69,-49,70,-49,67,-49,68,-49,54,-49,3,-49,13,-49,11,-49,12,-49,10,-49,17,-49,15,-49,16,-49,5,-49,4,-49,38,-49,40,-49,39,-49,14,-49,41,-49,42,-49,32,-49,29,-49,30,-49,37,-49,28,-49,34,-49,56,-49,19,-49,92,-49,20,-49,18,-49,47,-49,90,-49,91,-49,89,-49,33,-49,31,-49,35,-49,36,-49,46,-49});
    states[45] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-11,46,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[46] = new State(-50);
    states[47] = new State(new int[]{54,48,57,-51,55,-51,45,-51,71,-51,72,-51,83,-51,76,-51,77,-51,84,-51,78,-51,85,-51,79,-51,80,-51,81,-51,82,-51,86,-51,87,-51,88,-51,9,-51,44,-51,7,-51,59,-51,60,-51,8,-51,6,-51,73,-51,75,-51,74,-51,61,-51,52,-51,53,-51,62,-51,50,-51,51,-51,58,-51,63,-51,64,-51,65,-51,66,-51,69,-51,70,-51,67,-51,68,-51,3,-51,13,-51,11,-51,12,-51,10,-51,17,-51,15,-51,16,-51,5,-51,4,-51,38,-51,40,-51,39,-51,14,-51,41,-51,42,-51,32,-51,29,-51,30,-51,37,-51,28,-51,34,-51,56,-51,19,-51,92,-51,20,-51,18,-51,47,-51,90,-51,91,-51,89,-51,33,-51,31,-51,35,-51,36,-51,46,-51});
    states[48] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-12,49,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[49] = new State(-52);
    states[50] = new State(new int[]{67,51,68,53,54,-53,57,-53,55,-53,45,-53,71,-53,72,-53,83,-53,76,-53,77,-53,84,-53,78,-53,85,-53,79,-53,80,-53,81,-53,82,-53,86,-53,87,-53,88,-53,9,-53,44,-53,7,-53,59,-53,60,-53,8,-53,6,-53,73,-53,75,-53,74,-53,61,-53,52,-53,53,-53,62,-53,50,-53,51,-53,58,-53,63,-53,64,-53,65,-53,66,-53,69,-53,70,-53,3,-53,13,-53,11,-53,12,-53,10,-53,17,-53,15,-53,16,-53,5,-53,4,-53,38,-53,40,-53,39,-53,14,-53,41,-53,42,-53,32,-53,29,-53,30,-53,37,-53,28,-53,34,-53,56,-53,19,-53,92,-53,20,-53,18,-53,47,-53,90,-53,91,-53,89,-53,33,-53,31,-53,35,-53,36,-53,46,-53});
    states[51] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-13,52,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[52] = new State(-54);
    states[53] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-13,54,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[54] = new State(-55);
    states[55] = new State(new int[]{65,56,66,58,69,60,70,62,67,-56,68,-56,54,-56,57,-56,55,-56,45,-56,71,-56,72,-56,83,-56,76,-56,77,-56,84,-56,78,-56,85,-56,79,-56,80,-56,81,-56,82,-56,86,-56,87,-56,88,-56,9,-56,44,-56,7,-56,59,-56,60,-56,8,-56,6,-56,73,-56,75,-56,74,-56,61,-56,52,-56,53,-56,62,-56,50,-56,51,-56,58,-56,63,-56,64,-56,3,-56,13,-56,11,-56,12,-56,10,-56,17,-56,15,-56,16,-56,5,-56,4,-56,38,-56,40,-56,39,-56,14,-56,41,-56,42,-56,32,-56,29,-56,30,-56,37,-56,28,-56,34,-56,56,-56,19,-56,92,-56,20,-56,18,-56,47,-56,90,-56,91,-56,89,-56,33,-56,31,-56,35,-56,36,-56,46,-56});
    states[56] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-14,57,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[57] = new State(-57);
    states[58] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-14,59,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[59] = new State(-58);
    states[60] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-14,61,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[61] = new State(-59);
    states[62] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-14,63,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[63] = new State(-60);
    states[64] = new State(new int[]{63,65,64,67,65,-61,66,-61,69,-61,70,-61,67,-61,68,-61,54,-61,57,-61,55,-61,45,-61,71,-61,72,-61,83,-61,76,-61,77,-61,84,-61,78,-61,85,-61,79,-61,80,-61,81,-61,82,-61,86,-61,87,-61,88,-61,9,-61,44,-61,7,-61,59,-61,60,-61,8,-61,6,-61,73,-61,75,-61,74,-61,61,-61,52,-61,53,-61,62,-61,50,-61,51,-61,58,-61,3,-61,13,-61,11,-61,12,-61,10,-61,17,-61,15,-61,16,-61,5,-61,4,-61,38,-61,40,-61,39,-61,14,-61,41,-61,42,-61,32,-61,29,-61,30,-61,37,-61,28,-61,34,-61,56,-61,19,-61,92,-61,20,-61,18,-61,47,-61,90,-61,91,-61,89,-61,33,-61,31,-61,35,-61,36,-61,46,-61});
    states[65] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-15,66,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[66] = new State(-62);
    states[67] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-15,68,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[68] = new State(-63);
    states[69] = new State(new int[]{50,70,51,72,58,74,63,-64,64,-64,65,-64,66,-64,69,-64,70,-64,67,-64,68,-64,54,-64,57,-64,55,-64,45,-64,71,-64,72,-64,83,-64,76,-64,77,-64,84,-64,78,-64,85,-64,79,-64,80,-64,81,-64,82,-64,86,-64,87,-64,88,-64,9,-64,44,-64,7,-64,59,-64,60,-64,8,-64,6,-64,73,-64,75,-64,74,-64,61,-64,52,-64,53,-64,62,-64,3,-64,13,-64,11,-64,12,-64,10,-64,17,-64,15,-64,16,-64,5,-64,4,-64,38,-64,40,-64,39,-64,14,-64,41,-64,42,-64,32,-64,29,-64,30,-64,37,-64,28,-64,34,-64,56,-64,19,-64,92,-64,20,-64,18,-64,47,-64,90,-64,91,-64,89,-64,33,-64,31,-64,35,-64,36,-64,46,-64});
    states[70] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-16,71,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[71] = new State(new int[]{50,-65,51,-65,58,74,63,-65,64,-65,65,-65,66,-65,69,-65,70,-65,67,-65,68,-65,54,-65,57,-65,55,-65,45,-65,71,-65,72,-65,83,-65,76,-65,77,-65,84,-65,78,-65,85,-65,79,-65,80,-65,81,-65,82,-65,86,-65,87,-65,88,-65,9,-65,44,-65,7,-65,59,-65,60,-65,8,-65,6,-65,73,-65,75,-65,74,-65,61,-65,52,-65,53,-65,62,-65,3,-65,13,-65,11,-65,12,-65,10,-65,17,-65,15,-65,16,-65,5,-65,4,-65,38,-65,40,-65,39,-65,14,-65,41,-65,42,-65,32,-65,29,-65,30,-65,37,-65,28,-65,34,-65,56,-65,19,-65,92,-65,20,-65,18,-65,47,-65,90,-65,91,-65,89,-65,33,-65,31,-65,35,-65,36,-65,46,-65});
    states[72] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-16,73,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[73] = new State(new int[]{50,-66,51,-66,58,74,63,-66,64,-66,65,-66,66,-66,69,-66,70,-66,67,-66,68,-66,54,-66,57,-66,55,-66,45,-66,71,-66,72,-66,83,-66,76,-66,77,-66,84,-66,78,-66,85,-66,79,-66,80,-66,81,-66,82,-66,86,-66,87,-66,88,-66,9,-66,44,-66,7,-66,59,-66,60,-66,8,-66,6,-66,73,-66,75,-66,74,-66,61,-66,52,-66,53,-66,62,-66,3,-66,13,-66,11,-66,12,-66,10,-66,17,-66,15,-66,16,-66,5,-66,4,-66,38,-66,40,-66,39,-66,14,-66,41,-66,42,-66,32,-66,29,-66,30,-66,37,-66,28,-66,34,-66,56,-66,19,-66,92,-66,20,-66,18,-66,47,-66,90,-66,91,-66,89,-66,33,-66,31,-66,35,-66,36,-66,46,-66});
    states[74] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-16,75,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[75] = new State(-67);
    states[76] = new State(new int[]{52,77,53,79,62,81,50,-68,51,-68,58,-68,63,-68,64,-68,65,-68,66,-68,69,-68,70,-68,67,-68,68,-68,54,-68,57,-68,55,-68,45,-68,71,-68,72,-68,83,-68,76,-68,77,-68,84,-68,78,-68,85,-68,79,-68,80,-68,81,-68,82,-68,86,-68,87,-68,88,-68,9,-68,44,-68,7,-68,59,-68,60,-68,8,-68,6,-68,73,-68,75,-68,74,-68,61,-68,3,-68,13,-68,11,-68,12,-68,10,-68,17,-68,15,-68,16,-68,5,-68,4,-68,38,-68,40,-68,39,-68,14,-68,41,-68,42,-68,32,-68,29,-68,30,-68,37,-68,28,-68,34,-68,56,-68,19,-68,92,-68,20,-68,18,-68,47,-68,90,-68,91,-68,89,-68,33,-68,31,-68,35,-68,36,-68,46,-68});
    states[77] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-17,78,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[78] = new State(new int[]{52,-69,53,-69,62,81,50,-69,51,-69,58,-69,63,-69,64,-69,65,-69,66,-69,69,-69,70,-69,67,-69,68,-69,54,-69,57,-69,55,-69,45,-69,71,-69,72,-69,83,-69,76,-69,77,-69,84,-69,78,-69,85,-69,79,-69,80,-69,81,-69,82,-69,86,-69,87,-69,88,-69,9,-69,44,-69,7,-69,59,-69,60,-69,8,-69,6,-69,73,-69,75,-69,74,-69,61,-69,3,-69,13,-69,11,-69,12,-69,10,-69,17,-69,15,-69,16,-69,5,-69,4,-69,38,-69,40,-69,39,-69,14,-69,41,-69,42,-69,32,-69,29,-69,30,-69,37,-69,28,-69,34,-69,56,-69,19,-69,92,-69,20,-69,18,-69,47,-69,90,-69,91,-69,89,-69,33,-69,31,-69,35,-69,36,-69,46,-69});
    states[79] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-17,80,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[80] = new State(new int[]{52,-70,53,-70,62,81,50,-70,51,-70,58,-70,63,-70,64,-70,65,-70,66,-70,69,-70,70,-70,67,-70,68,-70,54,-70,57,-70,55,-70,45,-70,71,-70,72,-70,83,-70,76,-70,77,-70,84,-70,78,-70,85,-70,79,-70,80,-70,81,-70,82,-70,86,-70,87,-70,88,-70,9,-70,44,-70,7,-70,59,-70,60,-70,8,-70,6,-70,73,-70,75,-70,74,-70,61,-70,3,-70,13,-70,11,-70,12,-70,10,-70,17,-70,15,-70,16,-70,5,-70,4,-70,38,-70,40,-70,39,-70,14,-70,41,-70,42,-70,32,-70,29,-70,30,-70,37,-70,28,-70,34,-70,56,-70,19,-70,92,-70,20,-70,18,-70,47,-70,90,-70,91,-70,89,-70,33,-70,31,-70,35,-70,36,-70,46,-70});
    states[81] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-17,82,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[82] = new State(-71);
    states[83] = new State(new int[]{61,84,52,-72,53,-72,62,-72,50,-72,51,-72,58,-72,63,-72,64,-72,65,-72,66,-72,69,-72,70,-72,67,-72,68,-72,54,-72,57,-72,55,-72,45,-72,71,-72,72,-72,83,-72,76,-72,77,-72,84,-72,78,-72,85,-72,79,-72,80,-72,81,-72,82,-72,86,-72,87,-72,88,-72,9,-72,44,-72,7,-72,59,-72,60,-72,8,-72,6,-72,73,-72,75,-72,74,-72,3,-72,13,-72,11,-72,12,-72,10,-72,17,-72,15,-72,16,-72,5,-72,4,-72,38,-72,40,-72,39,-72,14,-72,41,-72,42,-72,32,-72,29,-72,30,-72,37,-72,28,-72,34,-72,56,-72,19,-72,92,-72,20,-72,18,-72,47,-72,90,-72,91,-72,89,-72,33,-72,31,-72,35,-72,36,-72,46,-72});
    states[84] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-18,85,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[85] = new State(-73);
    states[86] = new State(new int[]{73,87,75,89,74,91,61,-74,52,-74,53,-74,62,-74,50,-74,51,-74,58,-74,63,-74,64,-74,65,-74,66,-74,69,-74,70,-74,67,-74,68,-74,54,-74,57,-74,55,-74,45,-74,71,-74,72,-74,83,-74,76,-74,77,-74,84,-74,78,-74,85,-74,79,-74,80,-74,81,-74,82,-74,86,-74,87,-74,88,-74,9,-74,44,-74,7,-74,59,-74,60,-74,8,-74,6,-74,3,-74,13,-74,11,-74,12,-74,10,-74,17,-74,15,-74,16,-74,5,-74,4,-74,38,-74,40,-74,39,-74,14,-74,41,-74,42,-74,32,-74,29,-74,30,-74,37,-74,28,-74,34,-74,56,-74,19,-74,92,-74,20,-74,18,-74,47,-74,90,-74,91,-74,89,-74,33,-74,31,-74,35,-74,36,-74,46,-74});
    states[87] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-19,88,-20,93,-21,159,-2,160,-31,161});
    states[88] = new State(-75);
    states[89] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-19,90,-20,93,-21,159,-2,160,-31,161});
    states[90] = new State(-76);
    states[91] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-19,92,-20,93,-21,159,-2,160,-31,161});
    states[92] = new State(-77);
    states[93] = new State(-78);
    states[94] = new State(new int[]{8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-21,95,-2,160,-31,161});
    states[95] = new State(new int[]{59,96,60,132,8,134,6,141,73,-79,75,-79,74,-79,61,-79,52,-79,53,-79,62,-79,50,-79,51,-79,58,-79,63,-79,64,-79,65,-79,66,-79,69,-79,70,-79,67,-79,68,-79,54,-79,57,-79,55,-79,45,-79,71,-79,72,-79,83,-79,76,-79,77,-79,84,-79,78,-79,85,-79,79,-79,80,-79,81,-79,82,-79,86,-79,87,-79,88,-79,9,-79,44,-79,7,-79,3,-79,13,-79,11,-79,12,-79,10,-79,17,-79,15,-79,16,-79,5,-79,4,-79,38,-79,40,-79,39,-79,14,-79,41,-79,42,-79,32,-79,29,-79,30,-79,37,-79,28,-79,34,-79,56,-79,19,-79,92,-79,20,-79,18,-79,47,-79,90,-79,91,-79,89,-79,33,-79,31,-79,35,-79,36,-79,46,-79});
    states[96] = new State(new int[]{92,98,17,99,20,100},new int[]{-2,97});
    states[97] = new State(-84);
    states[98] = new State(-153);
    states[99] = new State(-154);
    states[100] = new State(new int[]{60,101});
    states[101] = new State(new int[]{50,104,51,105,52,106,53,107,54,108,55,109,56,110,57,111,58,112,59,113,60,114,61,115,62,116,63,117,64,118,65,119,66,120,67,121,68,122,69,123,70,124,71,125,72,126,73,127,74,128,75,129,8,130},new int[]{-3,102});
    states[102] = new State(new int[]{60,103});
    states[103] = new State(-155);
    states[104] = new State(-156);
    states[105] = new State(-157);
    states[106] = new State(-158);
    states[107] = new State(-159);
    states[108] = new State(-160);
    states[109] = new State(-161);
    states[110] = new State(-162);
    states[111] = new State(-163);
    states[112] = new State(-164);
    states[113] = new State(-165);
    states[114] = new State(-166);
    states[115] = new State(-167);
    states[116] = new State(-168);
    states[117] = new State(-169);
    states[118] = new State(-170);
    states[119] = new State(-171);
    states[120] = new State(-172);
    states[121] = new State(-173);
    states[122] = new State(-174);
    states[123] = new State(-175);
    states[124] = new State(-176);
    states[125] = new State(-177);
    states[126] = new State(-178);
    states[127] = new State(-179);
    states[128] = new State(-180);
    states[129] = new State(-181);
    states[130] = new State(new int[]{9,131});
    states[131] = new State(-182);
    states[132] = new State(new int[]{92,98,17,99,20,100},new int[]{-2,133});
    states[133] = new State(-85);
    states[134] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-22,135,-9,153,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[135] = new State(new int[]{9,136,44,137});
    states[136] = new State(-86);
    states[137] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,138,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[138] = new State(new int[]{71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,9,-125,44,-125,7,-125});
    states[139] = new State(new int[]{8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-21,140,-2,160,-31,161});
    states[140] = new State(new int[]{59,96,60,132,8,134,6,141,73,-80,75,-80,74,-80,61,-80,52,-80,53,-80,62,-80,50,-80,51,-80,58,-80,63,-80,64,-80,65,-80,66,-80,69,-80,70,-80,67,-80,68,-80,54,-80,57,-80,55,-80,45,-80,71,-80,72,-80,83,-80,76,-80,77,-80,84,-80,78,-80,85,-80,79,-80,80,-80,81,-80,82,-80,86,-80,87,-80,88,-80,9,-80,44,-80,7,-80,3,-80,13,-80,11,-80,12,-80,10,-80,17,-80,15,-80,16,-80,5,-80,4,-80,38,-80,40,-80,39,-80,14,-80,41,-80,42,-80,32,-80,29,-80,30,-80,37,-80,28,-80,34,-80,56,-80,19,-80,92,-80,20,-80,18,-80,47,-80,90,-80,91,-80,89,-80,33,-80,31,-80,35,-80,36,-80,46,-80});
    states[141] = new State(new int[]{7,142,50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-29,143,-30,343,-9,147,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,340,-31,161});
    states[142] = new State(-88);
    states[143] = new State(new int[]{7,144,44,145});
    states[144] = new State(-89);
    states[145] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-30,146,-9,147,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,340,-31,161});
    states[146] = new State(-120);
    states[147] = new State(new int[]{71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,7,-122,44,-122});
    states[148] = new State(new int[]{8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-21,149,-2,160,-31,161});
    states[149] = new State(new int[]{59,-81,60,-81,8,134,6,141,73,-81,75,-81,74,-81,61,-81,52,-81,53,-81,62,-81,50,-81,51,-81,58,-81,63,-81,64,-81,65,-81,66,-81,69,-81,70,-81,67,-81,68,-81,54,-81,57,-81,55,-81,45,-81,71,-81,72,-81,83,-81,76,-81,77,-81,84,-81,78,-81,85,-81,79,-81,80,-81,81,-81,82,-81,86,-81,87,-81,88,-81,9,-81,44,-81,7,-81,3,-81,13,-81,11,-81,12,-81,10,-81,17,-81,15,-81,16,-81,5,-81,4,-81,38,-81,40,-81,39,-81,14,-81,41,-81,42,-81,32,-81,29,-81,30,-81,37,-81,28,-81,34,-81,56,-81,19,-81,92,-81,20,-81,18,-81,47,-81,90,-81,91,-81,89,-81,33,-81,31,-81,35,-81,36,-81,46,-81});
    states[150] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-22,151,-9,153,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[151] = new State(new int[]{9,152,44,137});
    states[152] = new State(-87);
    states[153] = new State(new int[]{71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,9,-124,44,-124,7,-124});
    states[154] = new State(new int[]{8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-21,155,-2,160,-31,161});
    states[155] = new State(new int[]{59,96,60,132,8,134,6,141,73,-82,75,-82,74,-82,61,-82,52,-82,53,-82,62,-82,50,-82,51,-82,58,-82,63,-82,64,-82,65,-82,66,-82,69,-82,70,-82,67,-82,68,-82,54,-82,57,-82,55,-82,45,-82,71,-82,72,-82,83,-82,76,-82,77,-82,84,-82,78,-82,85,-82,79,-82,80,-82,81,-82,82,-82,86,-82,87,-82,88,-82,9,-82,44,-82,7,-82,3,-82,13,-82,11,-82,12,-82,10,-82,17,-82,15,-82,16,-82,5,-82,4,-82,38,-82,40,-82,39,-82,14,-82,41,-82,42,-82,32,-82,29,-82,30,-82,37,-82,28,-82,34,-82,56,-82,19,-82,92,-82,20,-82,18,-82,47,-82,90,-82,91,-82,89,-82,33,-82,31,-82,35,-82,36,-82,46,-82});
    states[156] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,157,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[157] = new State(new int[]{7,158,71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[158] = new State(-90);
    states[159] = new State(new int[]{59,96,60,132,8,134,6,141,73,-83,75,-83,74,-83,61,-83,52,-83,53,-83,62,-83,50,-83,51,-83,58,-83,63,-83,64,-83,65,-83,66,-83,69,-83,70,-83,67,-83,68,-83,54,-83,57,-83,55,-83,45,-83,71,-83,72,-83,83,-83,76,-83,77,-83,84,-83,78,-83,85,-83,79,-83,80,-83,81,-83,82,-83,86,-83,87,-83,88,-83,9,-83,44,-83,7,-83,3,-83,13,-83,11,-83,12,-83,10,-83,17,-83,15,-83,16,-83,5,-83,4,-83,38,-83,40,-83,39,-83,14,-83,41,-83,42,-83,32,-83,29,-83,30,-83,37,-83,28,-83,34,-83,56,-83,19,-83,92,-83,20,-83,18,-83,47,-83,90,-83,91,-83,89,-83,33,-83,31,-83,35,-83,36,-83,46,-83});
    states[160] = new State(-91);
    states[161] = new State(new int[]{43,163,4,246},new int[]{-36,162});
    states[162] = new State(-92);
    states[163] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,164,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[164] = new State(new int[]{71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,59,-93,60,-93,8,-93,6,-93,73,-93,75,-93,74,-93,61,-93,52,-93,53,-93,62,-93,50,-93,51,-93,58,-93,63,-93,64,-93,65,-93,66,-93,69,-93,70,-93,67,-93,68,-93,54,-93,57,-93,55,-93,45,-93,9,-93,44,-93,7,-93,3,-93,13,-93,11,-93,12,-93,10,-93,17,-93,15,-93,16,-93,5,-93,4,-93,38,-93,40,-93,39,-93,14,-93,41,-93,42,-93,32,-93,29,-93,30,-93,37,-93,28,-93,34,-93,56,-93,19,-93,92,-93,20,-93,18,-93,47,-93,90,-93,91,-93,89,-93,33,-93,31,-93,35,-93,36,-93,46,-93});
    states[165] = new State(new int[]{6,166});
    states[166] = new State(new int[]{7,242,24,-114,25,-114,23,-114,26,-114,27,-114,92,-114,17,-114,20,-114},new int[]{-32,167,-33,245,-34,229});
    states[167] = new State(new int[]{7,168,44,227});
    states[168] = new State(new int[]{63,169,43,-107,4,-107,70,-107,71,-107,45,-107,7,-107,44,-107,3,-107,13,-107,11,-107,12,-107,10,-107,17,-107,15,-107,16,-107,5,-107,38,-107,40,-107,39,-107,14,-107,41,-107,42,-107,32,-107,29,-107,30,-107,37,-107,28,-107,34,-107,50,-107,51,-107,56,-107,19,-107,8,-107,6,-107,92,-107,20,-107,18,-107,47,-107,90,-107,91,-107,89,-107,33,-107,31,-107,35,-107,36,-107});
    states[169] = new State(new int[]{21,171,48,203,22,207,49,212,18,165,92,98,17,99,20,100},new int[]{-8,170,-31,219,-5,220,-2,223});
    states[170] = new State(-105);
    states[171] = new State(new int[]{6,172,69,178});
    states[172] = new State(new int[]{92,98,17,99,20,100},new int[]{-38,173,-2,177});
    states[173] = new State(new int[]{7,174,44,175});
    states[174] = new State(-18);
    states[175] = new State(new int[]{92,98,17,99,20,100},new int[]{-2,176});
    states[176] = new State(-98);
    states[177] = new State(-99);
    states[178] = new State(new int[]{21,171,48,203,22,207,49,212,18,165,92,98,17,99,20,100},new int[]{-8,179,-31,219,-5,220,-2,223});
    states[179] = new State(new int[]{70,180});
    states[180] = new State(new int[]{6,181});
    states[181] = new State(new int[]{92,98,17,99,20,100},new int[]{-39,182,-25,211,-2,186});
    states[182] = new State(new int[]{7,183,44,184});
    states[183] = new State(-19);
    states[184] = new State(new int[]{92,98,17,99,20,100},new int[]{-25,185,-2,186});
    states[185] = new State(-100);
    states[186] = new State(new int[]{46,187,71,224});
    states[187] = new State(new int[]{21,171,48,203,22,207,49,212,18,165,92,98,17,99,20,100},new int[]{-8,188,-31,219,-5,220,-2,223});
    states[188] = new State(new int[]{71,190,45,193,7,-26,44,-26},new int[]{-42,189});
    states[189] = new State(-102);
    states[190] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,191,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[191] = new State(new int[]{71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,45,193,7,-26,44,-26},new int[]{-42,192});
    states[192] = new State(-104);
    states[193] = new State(-27);
    states[194] = new State(new int[]{6,195});
    states[195] = new State(new int[]{92,98,17,99,20,100},new int[]{-38,196,-2,177});
    states[196] = new State(new int[]{7,197,44,175});
    states[197] = new State(new int[]{43,198});
    states[198] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,199,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[199] = new State(new int[]{71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,59,-94,60,-94,8,-94,6,-94,73,-94,75,-94,74,-94,61,-94,52,-94,53,-94,62,-94,50,-94,51,-94,58,-94,63,-94,64,-94,65,-94,66,-94,69,-94,70,-94,67,-94,68,-94,54,-94,57,-94,55,-94,45,-94,9,-94,44,-94,7,-94,3,-94,13,-94,11,-94,12,-94,10,-94,17,-94,15,-94,16,-94,5,-94,4,-94,38,-94,40,-94,39,-94,14,-94,41,-94,42,-94,32,-94,29,-94,30,-94,37,-94,28,-94,34,-94,56,-94,19,-94,92,-94,20,-94,18,-94,47,-94,90,-94,91,-94,89,-94,33,-94,31,-94,35,-94,36,-94,46,-94});
    states[200] = new State(-95);
    states[201] = new State(-96);
    states[202] = new State(-97);
    states[203] = new State(new int[]{69,204});
    states[204] = new State(new int[]{21,171,48,203,22,207,49,212,18,165,92,98,17,99,20,100},new int[]{-8,205,-31,219,-5,220,-2,223});
    states[205] = new State(new int[]{70,206});
    states[206] = new State(-20);
    states[207] = new State(new int[]{6,208});
    states[208] = new State(new int[]{92,98,17,99,20,100},new int[]{-39,209,-25,211,-2,186});
    states[209] = new State(new int[]{7,210,44,184});
    states[210] = new State(-21);
    states[211] = new State(-101);
    states[212] = new State(new int[]{69,213});
    states[213] = new State(new int[]{21,171,48,203,22,207,49,212,18,165,92,98,17,99,20,100},new int[]{-8,214,-31,219,-5,220,-2,223});
    states[214] = new State(new int[]{70,215,44,216});
    states[215] = new State(-22);
    states[216] = new State(new int[]{89,217});
    states[217] = new State(new int[]{70,218});
    states[218] = new State(-23);
    states[219] = new State(-24);
    states[220] = new State(new int[]{59,221,43,-25,4,-25,70,-25,71,-25,45,-25,7,-25,44,-25,3,-25,13,-25,11,-25,12,-25,10,-25,17,-25,15,-25,16,-25,5,-25,38,-25,40,-25,39,-25,14,-25,41,-25,42,-25,32,-25,29,-25,30,-25,37,-25,28,-25,34,-25,50,-25,51,-25,56,-25,19,-25,8,-25,6,-25,92,-25,20,-25,18,-25,47,-25,90,-25,91,-25,89,-25,33,-25,31,-25,35,-25,36,-25});
    states[221] = new State(new int[]{92,98,17,99,20,100},new int[]{-2,222});
    states[222] = new State(-12);
    states[223] = new State(-11);
    states[224] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,225,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[225] = new State(new int[]{71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,45,193,7,-26,44,-26},new int[]{-42,226});
    states[226] = new State(-103);
    states[227] = new State(-114,new int[]{-33,228,-34,229});
    states[228] = new State(-109);
    states[229] = new State(new int[]{24,237,25,238,23,239,26,240,27,241,92,98,17,99,20,100},new int[]{-2,230});
    states[230] = new State(new int[]{46,231,71,235});
    states[231] = new State(new int[]{21,171,48,203,22,207,49,212,18,165,92,98,17,99,20,100},new int[]{-8,232,-31,219,-5,220,-2,223});
    states[232] = new State(new int[]{71,233,7,-113,44,-113});
    states[233] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,234,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[234] = new State(new int[]{71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,7,-111,44,-111});
    states[235] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,236,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[236] = new State(new int[]{71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,7,-112,44,-112});
    states[237] = new State(-115);
    states[238] = new State(-116);
    states[239] = new State(-117);
    states[240] = new State(-118);
    states[241] = new State(-119);
    states[242] = new State(new int[]{63,243,43,-108,4,-108,70,-108,71,-108,45,-108,7,-108,44,-108,3,-108,13,-108,11,-108,12,-108,10,-108,17,-108,15,-108,16,-108,5,-108,38,-108,40,-108,39,-108,14,-108,41,-108,42,-108,32,-108,29,-108,30,-108,37,-108,28,-108,34,-108,50,-108,51,-108,56,-108,19,-108,8,-108,6,-108,92,-108,20,-108,18,-108,47,-108,90,-108,91,-108,89,-108,33,-108,31,-108,35,-108,36,-108});
    states[243] = new State(new int[]{21,171,48,203,22,207,49,212,18,165,92,98,17,99,20,100},new int[]{-8,244,-31,219,-5,220,-2,223});
    states[244] = new State(-106);
    states[245] = new State(-110);
    states[246] = new State(new int[]{5,339,11,-128,13,-128,4,-128,38,-128,40,-128,39,-128,14,-128,41,-128,42,-128,32,-128,29,-128,30,-128,37,-128,28,-128,34,-128,50,-128,51,-128,56,-128,19,-128,8,-128,6,-128,92,-128,17,-128,20,-128,18,-128,47,-128,90,-128,91,-128,89,-128,45,-128,15,-128,16,-128},new int[]{-37,247});
    states[247] = new State(new int[]{5,248,11,271,13,8,4,246,38,275,40,277,39,279,14,281,41,284,42,288,32,291,29,298,30,303,37,310,28,315,34,322,50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202,45,335,15,-30,16,-30},new int[]{-35,249,-23,250,-27,251,-26,272,-7,273,-36,274,-9,333,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[248] = new State(-126);
    states[249] = new State(-129);
    states[250] = new State(-130);
    states[251] = new State(new int[]{17,253,15,269,16,270},new int[]{-24,252,-28,258});
    states[252] = new State(-13);
    states[253] = new State(new int[]{92,98,17,99,20,100},new int[]{-2,254});
    states[254] = new State(new int[]{71,255});
    states[255] = new State(new int[]{21,171,48,203,22,207,49,212,18,165,92,98,17,99,20,100},new int[]{-8,256,-31,219,-5,220,-2,223});
    states[256] = new State(new int[]{45,257});
    states[257] = new State(-14);
    states[258] = new State(new int[]{92,98,17,99,20,100},new int[]{-2,259});
    states[259] = new State(new int[]{46,260,71,266});
    states[260] = new State(new int[]{21,171,48,203,22,207,49,212,18,165,92,98,17,99,20,100},new int[]{-8,261,-31,219,-5,220,-2,223});
    states[261] = new State(new int[]{71,263,45,193,3,-26,13,-26,11,-26,12,-26,10,-26,17,-26,15,-26,16,-26,5,-26,4,-26,38,-26,40,-26,39,-26,14,-26,41,-26,42,-26,32,-26,29,-26,30,-26,37,-26,28,-26,34,-26,50,-26,51,-26,56,-26,19,-26,8,-26,6,-26,92,-26,20,-26,18,-26,47,-26,90,-26,91,-26,89,-26,33,-26,31,-26,35,-26,36,-26},new int[]{-42,262});
    states[262] = new State(-15);
    states[263] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,264,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[264] = new State(new int[]{71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,45,193,3,-26,13,-26,11,-26,12,-26,10,-26,17,-26,15,-26,16,-26,5,-26,4,-26,38,-26,40,-26,39,-26,14,-26,41,-26,42,-26,32,-26,29,-26,30,-26,37,-26,28,-26,34,-26,50,-26,51,-26,56,-26,19,-26,8,-26,6,-26,92,-26,20,-26,18,-26,47,-26,90,-26,91,-26,89,-26,33,-26,31,-26,35,-26,36,-26},new int[]{-42,265});
    states[265] = new State(-17);
    states[266] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,267,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[267] = new State(new int[]{71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,45,193,3,-26,13,-26,11,-26,12,-26,10,-26,17,-26,15,-26,16,-26,5,-26,4,-26,38,-26,40,-26,39,-26,14,-26,41,-26,42,-26,32,-26,29,-26,30,-26,37,-26,28,-26,34,-26,50,-26,51,-26,56,-26,19,-26,8,-26,6,-26,92,-26,20,-26,18,-26,47,-26,90,-26,91,-26,89,-26,33,-26,31,-26,35,-26,36,-26},new int[]{-42,268});
    states[268] = new State(-16);
    states[269] = new State(-28);
    states[270] = new State(-29);
    states[271] = new State(-31);
    states[272] = new State(-131);
    states[273] = new State(-132);
    states[274] = new State(-133);
    states[275] = new State(new int[]{45,276});
    states[276] = new State(-134);
    states[277] = new State(new int[]{45,278});
    states[278] = new State(-135);
    states[279] = new State(new int[]{45,280});
    states[280] = new State(-136);
    states[281] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,282,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[282] = new State(new int[]{45,283,71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[283] = new State(-137);
    states[284] = new State(new int[]{45,287,50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,285,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[285] = new State(new int[]{45,286,71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[286] = new State(-138);
    states[287] = new State(-139);
    states[288] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,289,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[289] = new State(new int[]{45,290,71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[290] = new State(-140);
    states[291] = new State(new int[]{6,292});
    states[292] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,293,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[293] = new State(new int[]{7,294,71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[294] = new State(new int[]{11,271,13,8,4,246,38,275,40,277,39,279,14,281,41,284,42,288,32,291,29,298,30,303,37,310,28,315,34,322,50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202,45,335,15,-30,16,-30},new int[]{-35,295,-23,250,-27,251,-26,272,-7,273,-36,274,-9,333,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[295] = new State(new int[]{33,296,5,-142,11,-142,13,-142,4,-142,38,-142,40,-142,39,-142,14,-142,41,-142,42,-142,32,-142,29,-142,30,-142,37,-142,28,-142,34,-142,50,-142,51,-142,56,-142,19,-142,8,-142,6,-142,92,-142,17,-142,20,-142,18,-142,47,-142,90,-142,91,-142,89,-142,45,-142,15,-142,16,-142,31,-142,35,-142,36,-142});
    states[296] = new State(new int[]{11,271,13,8,4,246,38,275,40,277,39,279,14,281,41,284,42,288,32,291,29,298,30,303,37,310,28,315,34,322,50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202,45,335,15,-30,16,-30},new int[]{-35,297,-23,250,-27,251,-26,272,-7,273,-36,274,-9,333,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[297] = new State(-141);
    states[298] = new State(new int[]{6,299});
    states[299] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,300,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[300] = new State(new int[]{7,301,71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[301] = new State(new int[]{11,271,13,8,4,246,38,275,40,277,39,279,14,281,41,284,42,288,32,291,29,298,30,303,37,310,28,315,34,322,50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202,45,335,15,-30,16,-30},new int[]{-35,302,-23,250,-27,251,-26,272,-7,273,-36,274,-9,333,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[302] = new State(-143);
    states[303] = new State(new int[]{11,271,13,8,4,246,38,275,40,277,39,279,14,281,41,284,42,288,32,291,29,298,30,303,37,310,28,315,34,322,50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202,45,335,15,-30,16,-30},new int[]{-35,304,-23,250,-27,251,-26,272,-7,273,-36,274,-9,333,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[304] = new State(new int[]{31,305});
    states[305] = new State(new int[]{6,306});
    states[306] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,307,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[307] = new State(new int[]{7,308,71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[308] = new State(new int[]{45,309});
    states[309] = new State(-144);
    states[310] = new State(new int[]{6,311});
    states[311] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-22,312,-9,153,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[312] = new State(new int[]{7,313,44,137});
    states[313] = new State(new int[]{11,271,13,8,4,246,38,275,40,277,39,279,14,281,41,284,42,288,32,291,29,298,30,303,37,310,28,315,34,322,50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202,45,335,15,-30,16,-30},new int[]{-35,314,-23,250,-27,251,-26,272,-7,273,-36,274,-9,333,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[314] = new State(-145);
    states[315] = new State(new int[]{6,316});
    states[316] = new State(new int[]{92,98,17,99,20,100},new int[]{-2,317});
    states[317] = new State(new int[]{24,318});
    states[318] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,319,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[319] = new State(new int[]{7,320,71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[320] = new State(new int[]{11,271,13,8,4,246,38,275,40,277,39,279,14,281,41,284,42,288,32,291,29,298,30,303,37,310,28,315,34,322,50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202,45,335,15,-30,16,-30},new int[]{-35,321,-23,250,-27,251,-26,272,-7,273,-36,274,-9,333,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[321] = new State(-146);
    states[322] = new State(new int[]{6,323});
    states[323] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,324,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[324] = new State(new int[]{7,325,71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[325] = new State(new int[]{4,326});
    states[326] = new State(-150,new int[]{-40,327});
    states[327] = new State(new int[]{5,328,35,329,36,336});
    states[328] = new State(-147);
    states[329] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,330,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[330] = new State(new int[]{46,331,71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[331] = new State(-128,new int[]{-37,332});
    states[332] = new State(new int[]{11,271,13,8,4,246,38,275,40,277,39,279,14,281,41,284,42,288,32,291,29,298,30,303,37,310,28,315,34,322,50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202,45,335,5,-151,35,-151,36,-151,15,-30,16,-30},new int[]{-35,249,-23,250,-27,251,-26,272,-7,273,-36,274,-9,333,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[333] = new State(new int[]{45,334,71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[334] = new State(-148);
    states[335] = new State(-149);
    states[336] = new State(new int[]{46,337});
    states[337] = new State(-128,new int[]{-37,338});
    states[338] = new State(new int[]{11,271,13,8,4,246,38,275,40,277,39,279,14,281,41,284,42,288,32,291,29,298,30,303,37,310,28,315,34,322,50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202,45,335,5,-152,35,-152,36,-152,15,-30,16,-30},new int[]{-35,249,-23,250,-27,251,-26,272,-7,273,-36,274,-9,333,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[339] = new State(-127);
    states[340] = new State(new int[]{46,341,59,-91,60,-91,8,-91,6,-91,73,-91,75,-91,74,-91,61,-91,52,-91,53,-91,62,-91,50,-91,51,-91,58,-91,63,-91,64,-91,65,-91,66,-91,69,-91,70,-91,67,-91,68,-91,54,-91,57,-91,55,-91,71,-91,72,-91,83,-91,76,-91,77,-91,84,-91,78,-91,85,-91,79,-91,80,-91,81,-91,82,-91,86,-91,87,-91,88,-91,7,-91,44,-91});
    states[341] = new State(new int[]{50,94,51,139,56,148,19,154,8,150,6,156,92,98,17,99,20,100,18,165,47,194,90,200,91,201,89,202},new int[]{-9,342,-10,41,-11,44,-12,47,-13,50,-14,55,-15,64,-16,69,-17,76,-18,83,-19,86,-20,93,-21,159,-2,160,-31,161});
    states[342] = new State(new int[]{71,11,72,13,83,15,76,17,77,19,84,21,78,23,85,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,7,-123,44,-123});
    states[343] = new State(-121);
    states[344] = new State(new int[]{92,98,17,99,20,100},new int[]{-5,345,-2,223});
    states[345] = new State(new int[]{4,346,59,221});
    states[346] = new State(-2,new int[]{-1,347});
    states[347] = new State(new int[]{5,348,13,8,11,271,12,344,10,349,17,-30,15,-30,16,-30},new int[]{-7,3,-23,4,-26,5,-4,6,-6,7,-27,251});
    states[348] = new State(-10);
    states[349] = new State(new int[]{92,98,17,99,20,100},new int[]{-5,350,-2,223});
    states[350] = new State(new int[]{45,351,59,221});
    states[351] = new State(-9);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-41, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-1,-7});
    rules[4] = new Rule(-1, new int[]{-1,-23});
    rules[5] = new Rule(-1, new int[]{-1,-26});
    rules[6] = new Rule(-1, new int[]{-1,-4});
    rules[7] = new Rule(-1, new int[]{-1,-6});
    rules[8] = new Rule(-7, new int[]{13,-9,45});
    rules[9] = new Rule(-6, new int[]{10,-5,45});
    rules[10] = new Rule(-4, new int[]{12,-5,4,-1,5});
    rules[11] = new Rule(-5, new int[]{-2});
    rules[12] = new Rule(-5, new int[]{-5,59,-2});
    rules[13] = new Rule(-23, new int[]{-27,-24});
    rules[14] = new Rule(-26, new int[]{-27,17,-2,71,-8,45});
    rules[15] = new Rule(-24, new int[]{-28,-2,46,-8,-42});
    rules[16] = new Rule(-24, new int[]{-28,-2,71,-9,-42});
    rules[17] = new Rule(-24, new int[]{-28,-2,46,-8,71,-9,-42});
    rules[18] = new Rule(-8, new int[]{21,6,-38,7});
    rules[19] = new Rule(-8, new int[]{21,69,-8,70,6,-39,7});
    rules[20] = new Rule(-8, new int[]{48,69,-8,70});
    rules[21] = new Rule(-8, new int[]{22,6,-39,7});
    rules[22] = new Rule(-8, new int[]{49,69,-8,70});
    rules[23] = new Rule(-8, new int[]{49,69,-8,44,89,70});
    rules[24] = new Rule(-8, new int[]{-31});
    rules[25] = new Rule(-8, new int[]{-5});
    rules[26] = new Rule(-42, new int[]{});
    rules[27] = new Rule(-42, new int[]{45});
    rules[28] = new Rule(-28, new int[]{15});
    rules[29] = new Rule(-28, new int[]{16});
    rules[30] = new Rule(-27, new int[]{});
    rules[31] = new Rule(-27, new int[]{11});
    rules[32] = new Rule(-9, new int[]{-9,71,-9});
    rules[33] = new Rule(-9, new int[]{-9,72,-9});
    rules[34] = new Rule(-9, new int[]{-9,83,-9});
    rules[35] = new Rule(-9, new int[]{-9,76,-9});
    rules[36] = new Rule(-9, new int[]{-9,77,-9});
    rules[37] = new Rule(-9, new int[]{-9,84,-9});
    rules[38] = new Rule(-9, new int[]{-9,78,-9});
    rules[39] = new Rule(-9, new int[]{-9,85,-9});
    rules[40] = new Rule(-9, new int[]{-9,79,-9});
    rules[41] = new Rule(-9, new int[]{-9,80,-9});
    rules[42] = new Rule(-9, new int[]{-9,81,-9});
    rules[43] = new Rule(-9, new int[]{-9,82,-9});
    rules[44] = new Rule(-9, new int[]{-9,86,-9});
    rules[45] = new Rule(-9, new int[]{-9,87,-9});
    rules[46] = new Rule(-9, new int[]{-9,88,-9});
    rules[47] = new Rule(-9, new int[]{-10});
    rules[48] = new Rule(-10, new int[]{-10,55,-10});
    rules[49] = new Rule(-10, new int[]{-11});
    rules[50] = new Rule(-11, new int[]{-11,57,-11});
    rules[51] = new Rule(-11, new int[]{-12});
    rules[52] = new Rule(-12, new int[]{-12,54,-12});
    rules[53] = new Rule(-12, new int[]{-13});
    rules[54] = new Rule(-13, new int[]{-13,67,-13});
    rules[55] = new Rule(-13, new int[]{-13,68,-13});
    rules[56] = new Rule(-13, new int[]{-14});
    rules[57] = new Rule(-14, new int[]{-14,65,-14});
    rules[58] = new Rule(-14, new int[]{-14,66,-14});
    rules[59] = new Rule(-14, new int[]{-14,69,-14});
    rules[60] = new Rule(-14, new int[]{-14,70,-14});
    rules[61] = new Rule(-14, new int[]{-15});
    rules[62] = new Rule(-15, new int[]{-15,63,-15});
    rules[63] = new Rule(-15, new int[]{-15,64,-15});
    rules[64] = new Rule(-15, new int[]{-16});
    rules[65] = new Rule(-16, new int[]{-16,50,-16});
    rules[66] = new Rule(-16, new int[]{-16,51,-16});
    rules[67] = new Rule(-16, new int[]{-16,58,-16});
    rules[68] = new Rule(-16, new int[]{-17});
    rules[69] = new Rule(-17, new int[]{-17,52,-17});
    rules[70] = new Rule(-17, new int[]{-17,53,-17});
    rules[71] = new Rule(-17, new int[]{-17,62,-17});
    rules[72] = new Rule(-17, new int[]{-18});
    rules[73] = new Rule(-18, new int[]{-18,61,-18});
    rules[74] = new Rule(-18, new int[]{-19});
    rules[75] = new Rule(-19, new int[]{-19,73,-19});
    rules[76] = new Rule(-19, new int[]{-19,75,-19});
    rules[77] = new Rule(-19, new int[]{-19,74,-19});
    rules[78] = new Rule(-19, new int[]{-20});
    rules[79] = new Rule(-20, new int[]{50,-21});
    rules[80] = new Rule(-20, new int[]{51,-21});
    rules[81] = new Rule(-20, new int[]{56,-21});
    rules[82] = new Rule(-20, new int[]{19,-21});
    rules[83] = new Rule(-20, new int[]{-21});
    rules[84] = new Rule(-21, new int[]{-21,59,-2});
    rules[85] = new Rule(-21, new int[]{-21,60,-2});
    rules[86] = new Rule(-21, new int[]{-21,8,-22,9});
    rules[87] = new Rule(-21, new int[]{8,-22,9});
    rules[88] = new Rule(-21, new int[]{-21,6,7});
    rules[89] = new Rule(-21, new int[]{-21,6,-29,7});
    rules[90] = new Rule(-21, new int[]{6,-9,7});
    rules[91] = new Rule(-21, new int[]{-2});
    rules[92] = new Rule(-21, new int[]{-31,-36});
    rules[93] = new Rule(-21, new int[]{-31,43,-9});
    rules[94] = new Rule(-21, new int[]{47,6,-38,7,43,-9});
    rules[95] = new Rule(-21, new int[]{90});
    rules[96] = new Rule(-21, new int[]{91});
    rules[97] = new Rule(-21, new int[]{89});
    rules[98] = new Rule(-38, new int[]{-38,44,-2});
    rules[99] = new Rule(-38, new int[]{-2});
    rules[100] = new Rule(-39, new int[]{-39,44,-25});
    rules[101] = new Rule(-39, new int[]{-25});
    rules[102] = new Rule(-25, new int[]{-2,46,-8,-42});
    rules[103] = new Rule(-25, new int[]{-2,71,-9,-42});
    rules[104] = new Rule(-25, new int[]{-2,46,-8,71,-9,-42});
    rules[105] = new Rule(-31, new int[]{18,6,-32,7,63,-8});
    rules[106] = new Rule(-31, new int[]{18,6,7,63,-8});
    rules[107] = new Rule(-31, new int[]{18,6,-32,7});
    rules[108] = new Rule(-31, new int[]{18,6,7});
    rules[109] = new Rule(-32, new int[]{-32,44,-33});
    rules[110] = new Rule(-32, new int[]{-33});
    rules[111] = new Rule(-33, new int[]{-34,-2,46,-8,71,-9});
    rules[112] = new Rule(-33, new int[]{-34,-2,71,-9});
    rules[113] = new Rule(-33, new int[]{-34,-2,46,-8});
    rules[114] = new Rule(-34, new int[]{});
    rules[115] = new Rule(-34, new int[]{-34,24});
    rules[116] = new Rule(-34, new int[]{-34,25});
    rules[117] = new Rule(-34, new int[]{-34,23});
    rules[118] = new Rule(-34, new int[]{-34,26});
    rules[119] = new Rule(-34, new int[]{-34,27});
    rules[120] = new Rule(-29, new int[]{-29,44,-30});
    rules[121] = new Rule(-29, new int[]{-30});
    rules[122] = new Rule(-30, new int[]{-9});
    rules[123] = new Rule(-30, new int[]{-2,46,-9});
    rules[124] = new Rule(-22, new int[]{-9});
    rules[125] = new Rule(-22, new int[]{-22,44,-9});
    rules[126] = new Rule(-36, new int[]{4,-37,5});
    rules[127] = new Rule(-36, new int[]{4,5});
    rules[128] = new Rule(-37, new int[]{});
    rules[129] = new Rule(-37, new int[]{-37,-35});
    rules[130] = new Rule(-35, new int[]{-23});
    rules[131] = new Rule(-35, new int[]{-26});
    rules[132] = new Rule(-35, new int[]{-7});
    rules[133] = new Rule(-35, new int[]{-36});
    rules[134] = new Rule(-35, new int[]{38,45});
    rules[135] = new Rule(-35, new int[]{40,45});
    rules[136] = new Rule(-35, new int[]{39,45});
    rules[137] = new Rule(-35, new int[]{14,-9,45});
    rules[138] = new Rule(-35, new int[]{41,-9,45});
    rules[139] = new Rule(-35, new int[]{41,45});
    rules[140] = new Rule(-35, new int[]{42,-9,45});
    rules[141] = new Rule(-35, new int[]{32,6,-9,7,-35,33,-35});
    rules[142] = new Rule(-35, new int[]{32,6,-9,7,-35});
    rules[143] = new Rule(-35, new int[]{29,6,-9,7,-35});
    rules[144] = new Rule(-35, new int[]{30,-35,31,6,-9,7,45});
    rules[145] = new Rule(-35, new int[]{37,6,-22,7,-35});
    rules[146] = new Rule(-35, new int[]{28,6,-2,24,-9,7,-35});
    rules[147] = new Rule(-35, new int[]{34,6,-9,7,4,-40,5});
    rules[148] = new Rule(-35, new int[]{-9,45});
    rules[149] = new Rule(-35, new int[]{45});
    rules[150] = new Rule(-40, new int[]{});
    rules[151] = new Rule(-40, new int[]{-40,35,-9,46,-37});
    rules[152] = new Rule(-40, new int[]{-40,36,46,-37});
    rules[153] = new Rule(-2, new int[]{92});
    rules[154] = new Rule(-2, new int[]{17});
    rules[155] = new Rule(-2, new int[]{20,60,-3,60});
    rules[156] = new Rule(-3, new int[]{50});
    rules[157] = new Rule(-3, new int[]{51});
    rules[158] = new Rule(-3, new int[]{52});
    rules[159] = new Rule(-3, new int[]{53});
    rules[160] = new Rule(-3, new int[]{54});
    rules[161] = new Rule(-3, new int[]{55});
    rules[162] = new Rule(-3, new int[]{56});
    rules[163] = new Rule(-3, new int[]{57});
    rules[164] = new Rule(-3, new int[]{58});
    rules[165] = new Rule(-3, new int[]{59});
    rules[166] = new Rule(-3, new int[]{60});
    rules[167] = new Rule(-3, new int[]{61});
    rules[168] = new Rule(-3, new int[]{62});
    rules[169] = new Rule(-3, new int[]{63});
    rules[170] = new Rule(-3, new int[]{64});
    rules[171] = new Rule(-3, new int[]{65});
    rules[172] = new Rule(-3, new int[]{66});
    rules[173] = new Rule(-3, new int[]{67});
    rules[174] = new Rule(-3, new int[]{68});
    rules[175] = new Rule(-3, new int[]{69});
    rules[176] = new Rule(-3, new int[]{70});
    rules[177] = new Rule(-3, new int[]{71});
    rules[178] = new Rule(-3, new int[]{72});
    rules[179] = new Rule(-3, new int[]{73});
    rules[180] = new Rule(-3, new int[]{74});
    rules[181] = new Rule(-3, new int[]{75});
    rules[182] = new Rule(-3, new int[]{8,9});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)PsiTokenType.error, (int)PsiTokenType.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> /* empty */
#line 65 "Psi.y"
                                  { CurrentSemanticValue.Module = new Module() { Name = new CompoundName("GLOBAL") }; }
#line default
        break;
      case 3: // program -> program, assertion
#line 66 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Assertion); }
#line default
        break;
      case 4: // program -> program, declaration
#line 67 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Declaration); }
#line default
        break;
      case 5: // program -> program, typedecl
#line 68 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].TypeDeclaration); }
#line default
        break;
      case 6: // program -> program, module
#line 69 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Module); }
#line default
        break;
      case 7: // program -> program, import
#line 70 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Name); }
#line default
        break;
      case 8: // assertion -> ASSERT, expression, TERMINATOR
#line 74 "Psi.y"
   {
            	CurrentSemanticValue.Assertion = new Assertion(ValueStack[ValueStack.Depth-2].Expression); 
            }
#line default
        break;
      case 9: // import -> IMPORT, modname, TERMINATOR
#line 80 "Psi.y"
   {
				CurrentSemanticValue.Name = ValueStack[ValueStack.Depth-2].Name;
			}
#line default
        break;
      case 10: // module -> MODULE, modname, CURLY_O, program, CURLY_C
#line 86 "Psi.y"
   {
				CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module;
				CurrentSemanticValue.Module.Name = ValueStack[ValueStack.Depth-4].Name;
			}
#line default
        break;
      case 11: // modname -> identifier
#line 93 "Psi.y"
   {
            	CurrentSemanticValue.Name = new CompoundName(ValueStack[ValueStack.Depth-1].String); 
            }
#line default
        break;
      case 12: // modname -> modname, DOT, identifier
#line 97 "Psi.y"
   {
            	CurrentSemanticValue.Name = ValueStack[ValueStack.Depth-3].Name;
            	CurrentSemanticValue.Name.Add(ValueStack[ValueStack.Depth-1].String);
        	}
#line default
        break;
      case 13: // declaration -> export, vardecl
#line 104 "Psi.y"
   {
            	CurrentSemanticValue.Declaration = ValueStack[ValueStack.Depth-1].Declaration;
            	CurrentSemanticValue.Declaration.IsExported = (bool)ValueStack[ValueStack.Depth-2].Boolean;
            }
#line default
        break;
      case 14: // typedecl -> export, TYPE, identifier, IS, type, TERMINATOR
#line 111 "Psi.y"
   {
            	CurrentSemanticValue.TypeDeclaration = new TypeDeclaration(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].AstType);
            	CurrentSemanticValue.TypeDeclaration.IsExported = ValueStack[ValueStack.Depth-6].Boolean ?? false;
            }
#line default
        break;
      case 15: // vardecl -> storage, identifier, COLON, type, terminator
#line 118 "Psi.y"
   {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].AstType, null);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 16: // vardecl -> storage, identifier, IS, expression, terminator
#line 123 "Psi.y"
            {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, Undefined, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 17: // vardecl -> storage, identifier, COLON, type, IS, expression, terminator
#line 128 "Psi.y"
   {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-6].String, ValueStack[ValueStack.Depth-4].AstType, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-7].Boolean;
            }
#line default
        break;
      case 18: // type -> ENUM, ROUND_O, idlist, ROUND_C
#line 135 "Psi.y"
   {
				CurrentSemanticValue.AstType = new EnumTypeLiteral(ValueStack[ValueStack.Depth-2].StringList);
			}
#line default
        break;
      case 19: // type -> ENUM, LESS, type, MORE, ROUND_O, fieldlist, ROUND_C
#line 139 "Psi.y"
   {
				CurrentSemanticValue.AstType = new TypedEnumTypeLiteral(ValueStack[ValueStack.Depth-5].AstType, ValueStack[ValueStack.Depth-2].FieldList);
			}
#line default
        break;
      case 20: // type -> REF, LESS, type, MORE
#line 143 "Psi.y"
   {
				CurrentSemanticValue.AstType = new ReferenceTypeLiteral(ValueStack[ValueStack.Depth-2].AstType);
			}
#line default
        break;
      case 21: // type -> RECORD, ROUND_O, fieldlist, ROUND_C
#line 147 "Psi.y"
   {
				CurrentSemanticValue.AstType = new RecordTypeLiteral(ValueStack[ValueStack.Depth-2].FieldList);
			}
#line default
        break;
      case 22: // type -> ARRAY, LESS, type, MORE
#line 151 "Psi.y"
   {
				CurrentSemanticValue.AstType = new ArrayTypeLiteral(ValueStack[ValueStack.Depth-2].AstType, 1);
			}
#line default
        break;
      case 23: // type -> ARRAY, LESS, type, COMMA, NUMBER, MORE
#line 155 "Psi.y"
   {
				CurrentSemanticValue.AstType = new ArrayTypeLiteral(ValueStack[ValueStack.Depth-4].AstType, int.Parse(ValueStack[ValueStack.Depth-2].String));
			}
#line default
        break;
      case 24: // type -> functiontype
#line 159 "Psi.y"
   {
				CurrentSemanticValue.AstType = ValueStack[ValueStack.Depth-1].FunctionType;
			}
#line default
        break;
      case 25: // type -> modname
#line 163 "Psi.y"
   {
            	CurrentSemanticValue.AstType = new NamedTypeLiteral(ValueStack[ValueStack.Depth-1].Name);
            }
#line default
        break;
      case 28: // storage -> CONST
#line 171 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 29: // storage -> VAR
#line 172 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 30: // export -> /* empty */
#line 175 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 31: // export -> EXPORT
#line 176 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 32: // expression -> expression, IS, expression
#line 180 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.CopyAssign);
			}
#line default
        break;
      case 33: // expression -> expression, ASSIGN, expression
#line 184 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.SemanticAssign);
			}
#line default
        break;
      case 34: // expression -> expression, WB_CONCAT, expression
#line 188 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackConcat);
			}
#line default
        break;
      case 35: // expression -> expression, WB_PLUS, expression
#line 192 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackPlus);
			}
#line default
        break;
      case 36: // expression -> expression, WB_MINUS, expression
#line 196 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMinus);
			}
#line default
        break;
      case 37: // expression -> expression, WB_EXP, expression
#line 200 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackExponentiate);
			}
#line default
        break;
      case 38: // expression -> expression, WB_MULT, expression
#line 204 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMultiply);
			}
#line default
        break;
      case 39: // expression -> expression, WB_MOD, expression
#line 208 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackModulo);
			}
#line default
        break;
      case 40: // expression -> expression, WB_DIV, expression
#line 212 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackDivide);
			}
#line default
        break;
      case 41: // expression -> expression, WB_AND, expression
#line 216 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackAnd);
			}
#line default
        break;
      case 42: // expression -> expression, WB_OR, expression
#line 220 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackOr);
			}
#line default
        break;
      case 43: // expression -> expression, WB_XOR, expression
#line 224 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackXor);
			}
#line default
        break;
      case 44: // expression -> expression, WB_ASR, expression
#line 228 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackArithmeticShiftRight);
			}
#line default
        break;
      case 45: // expression -> expression, WB_SHL, expression
#line 232 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftLeft);
			}
#line default
        break;
      case 46: // expression -> expression, WB_SHR, expression
#line 236 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftRight);
			}
#line default
        break;
      case 47: // expression -> expr_or
#line 240 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 48: // expr_or -> expr_or, OR, expr_or
#line 246 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Or);
			}
#line default
        break;
      case 49: // expr_or -> expr_xor
#line 250 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 50: // expr_xor -> expr_xor, XOR, expr_xor
#line 256 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Xor);
			}
#line default
        break;
      case 51: // expr_xor -> expr_and
#line 260 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 52: // expr_and -> expr_and, AND, expr_and
#line 266 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.And);
			}
#line default
        break;
      case 53: // expr_and -> equality
#line 270 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 54: // equality -> equality, EQUAL, equality
#line 276 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Equals);
			}
#line default
        break;
      case 55: // equality -> equality, NEQUAL, equality
#line 280 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.NotEquals);
			}
#line default
        break;
      case 56: // equality -> comparison
#line 284 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 57: // comparison -> comparison, LEQUAL, comparison
#line 290 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.LessOrEqual);
			}
#line default
        break;
      case 58: // comparison -> comparison, GEQUAL, comparison
#line 294 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.MoreOrEqual);
			}
#line default
        break;
      case 59: // comparison -> comparison, LESS, comparison
#line 298 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Less);
			}
#line default
        break;
      case 60: // comparison -> comparison, MORE, comparison
#line 302 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.More);
			}
#line default
        break;
      case 61: // comparison -> expr_arrows
#line 306 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 62: // expr_arrows -> expr_arrows, FORWARD, expr_arrows
#line 312 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Forward);
			}
#line default
        break;
      case 63: // expr_arrows -> expr_arrows, BACKWARD, expr_arrows
#line 316 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Backward);
			}
#line default
        break;
      case 64: // expr_arrows -> sum
#line 320 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 65: // sum -> sum, PLUS, sum
#line 326 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 66: // sum -> sum, MINUS, sum
#line 330 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 67: // sum -> sum, CONCAT, sum
#line 334 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Concat);
			}
#line default
        break;
      case 68: // sum -> term
#line 338 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 69: // term -> term, MULT, term
#line 344 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Multiply);
			}
#line default
        break;
      case 70: // term -> term, DIV, term
#line 348 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Divide);
			}
#line default
        break;
      case 71: // term -> term, MOD, term
#line 352 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Modulo);
			}
#line default
        break;
      case 72: // term -> expo
#line 356 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 73: // expo -> expo, EXP, expo
#line 362 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Exponentiate);
			}
#line default
        break;
      case 74: // expo -> shifting
#line 366 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 75: // shifting -> shifting, ASR, shifting
#line 372 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ArithmeticShiftRight);
			}
#line default
        break;
      case 76: // shifting -> shifting, SHR, shifting
#line 376 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftRight);
			}
#line default
        break;
      case 77: // shifting -> shifting, SHL, shifting
#line 380 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftLeft);
			}
#line default
        break;
      case 78: // shifting -> unary
#line 384 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 79: // unary -> PLUS, value
#line 390 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 80: // unary -> MINUS, value
#line 394 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 81: // unary -> INVERT, value
#line 398 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Invert);
			}
#line default
        break;
      case 82: // unary -> NEW, value
#line 402 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.New);
			}
#line default
        break;
      case 83: // unary -> value
#line 406 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 84: // value -> value, DOT, identifier
#line 412 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyDot(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 85: // value -> value, META, identifier
#line 416 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyMeta(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 86: // value -> value, SQUARE_O, exprlist, SQUARE_C
#line 420 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayIndexingExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ExpressionList);
			}
#line default
        break;
      case 87: // value -> SQUARE_O, exprlist, SQUARE_C
#line 424 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayLiteral(ValueStack[ValueStack.Depth-2].ExpressionList);
			}
#line default
        break;
      case 88: // value -> value, ROUND_O, ROUND_C
#line 428 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-3].Expression, new List<Argument>());
			}
#line default
        break;
      case 89: // value -> value, ROUND_O, arglist, ROUND_C
#line 432 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ArgumentList);
			}
#line default
        break;
      case 90: // value -> ROUND_O, expression, ROUND_C
#line 436 "Psi.y"
            {
                CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-2].Expression;
            }
#line default
        break;
      case 91: // value -> identifier
#line 440 "Psi.y"
   {
            	CurrentSemanticValue.Expression = new VariableReference(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 92: // value -> functiontype, block
#line 444 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionLiteral(ValueStack[ValueStack.Depth-2].FunctionType, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 93: // value -> functiontype, MAPSTO, expression
#line 448 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionLiteral(ValueStack[ValueStack.Depth-3].FunctionType, new ExpressionStatement(ValueStack[ValueStack.Depth-1].Expression));
			}
#line default
        break;
      case 94: // value -> LAMBDA, ROUND_O, idlist, ROUND_C, MAPSTO, expression
#line 452 "Psi.y"
   {
				CurrentSemanticValue.Expression = new LambdaLiteral(ValueStack[ValueStack.Depth-4].StringList, new ExpressionStatement(ValueStack[ValueStack.Depth-1].Expression));
			}
#line default
        break;
      case 95: // value -> STRING
#line 456 "Psi.y"
   {
				CurrentSemanticValue.Expression = new StringLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 96: // value -> ENUMVAL
#line 460 "Psi.y"
   {
				CurrentSemanticValue.Expression = new EnumLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 97: // value -> NUMBER
#line 464 "Psi.y"
   {
				CurrentSemanticValue.Expression = new NumberLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 98: // idlist -> idlist, COMMA, identifier
#line 470 "Psi.y"
   {
				CurrentSemanticValue.StringList = ValueStack[ValueStack.Depth-3].StringList;
				CurrentSemanticValue.StringList.Add(ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 99: // idlist -> identifier
#line 475 "Psi.y"
   {
				CurrentSemanticValue.StringList = new List<string>();
				CurrentSemanticValue.StringList.Add(ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 100: // fieldlist -> fieldlist, COMMA, field
#line 482 "Psi.y"
   {
				CurrentSemanticValue.FieldList = ValueStack[ValueStack.Depth-3].FieldList;
				CurrentSemanticValue.FieldList.Add(ValueStack[ValueStack.Depth-1].Declaration);	
			}
#line default
        break;
      case 101: // fieldlist -> field
#line 487 "Psi.y"
   {
				CurrentSemanticValue.FieldList = new List<Declaration>();
				CurrentSemanticValue.FieldList.Add(ValueStack[ValueStack.Depth-1].Declaration);
			}
#line default
        break;
      case 102: // field -> identifier, COLON, type, terminator
#line 493 "Psi.y"
                                               {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].AstType, null);
            	CurrentSemanticValue.Declaration.IsField = true;
            }
#line default
        break;
      case 103: // field -> identifier, IS, expression, terminator
#line 497 "Psi.y"
                                                     {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, Undefined, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsField = true;
            }
#line default
        break;
      case 104: // field -> identifier, COLON, type, IS, expression, terminator
#line 501 "Psi.y"
                                                             {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-6].String, ValueStack[ValueStack.Depth-4].AstType, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsField = true;
            }
#line default
        break;
      case 105: // functiontype -> FN, ROUND_O, paramlist, ROUND_C, FORWARD, type
#line 508 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(ValueStack[ValueStack.Depth-4].ParameterList, ValueStack[ValueStack.Depth-1].AstType);
			}
#line default
        break;
      case 106: // functiontype -> FN, ROUND_O, ROUND_C, FORWARD, type
#line 512 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(new List<Parameter>(), ValueStack[ValueStack.Depth-1].AstType);
			}
#line default
        break;
      case 107: // functiontype -> FN, ROUND_O, paramlist, ROUND_C
#line 516 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(ValueStack[ValueStack.Depth-2].ParameterList, Void);
			}
#line default
        break;
      case 108: // functiontype -> FN, ROUND_O, ROUND_C
#line 520 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(new List<Parameter>(), Void);
			}
#line default
        break;
      case 109: // paramlist -> paramlist, COMMA, parameter
#line 526 "Psi.y"
   {
				CurrentSemanticValue.ParameterList = ValueStack[ValueStack.Depth-3].ParameterList;
				CurrentSemanticValue.ParameterList.Add(ValueStack[ValueStack.Depth-1].Parameter);
			}
#line default
        break;
      case 110: // paramlist -> parameter
#line 531 "Psi.y"
   {
				CurrentSemanticValue.ParameterList = new List<Parameter>();
				CurrentSemanticValue.ParameterList.Add(ValueStack[ValueStack.Depth-1].Parameter);
			}
#line default
        break;
      case 111: // parameter -> prefix, identifier, COLON, type, IS, expression
#line 538 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterFlags)ValueStack[ValueStack.Depth-6].ParameterPrefix, ValueStack[ValueStack.Depth-5].String, ValueStack[ValueStack.Depth-3].AstType, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 112: // parameter -> prefix, identifier, IS, expression
#line 542 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterFlags)ValueStack[ValueStack.Depth-4].ParameterPrefix, ValueStack[ValueStack.Depth-3].String, Undefined, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 113: // parameter -> prefix, identifier, COLON, type
#line 546 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterFlags)ValueStack[ValueStack.Depth-4].ParameterPrefix, ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].AstType, null);
			}
#line default
        break;
      case 114: // prefix -> /* empty */
#line 552 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ParameterFlags.None;
			}
#line default
        break;
      case 115: // prefix -> prefix, IN
#line 556 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterFlags.In;
			}
#line default
        break;
      case 116: // prefix -> prefix, OUT
#line 560 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterFlags.Out;
			}
#line default
        break;
      case 117: // prefix -> prefix, INOUT
#line 564 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterFlags.InOut;
			}
#line default
        break;
      case 118: // prefix -> prefix, THIS
#line 568 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterFlags.This;
			}
#line default
        break;
      case 119: // prefix -> prefix, LAZY
#line 572 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterFlags.Lazy;
			}
#line default
        break;
      case 120: // arglist -> arglist, COMMA, argument
#line 578 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = ValueStack[ValueStack.Depth-3].ArgumentList;
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 121: // arglist -> argument
#line 583 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = new List<Argument>();
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 122: // argument -> expression
#line 590 "Psi.y"
   {
				CurrentSemanticValue.Argument = new PositionalArgument(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 123: // argument -> identifier, COLON, expression
#line 594 "Psi.y"
   {
				CurrentSemanticValue.Argument = new NamedArgument(ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 124: // exprlist -> expression
#line 600 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = new List<Expression>();
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 125: // exprlist -> exprlist, COMMA, expression
#line 605 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = ValueStack[ValueStack.Depth-3].ExpressionList;
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 126: // block -> CURLY_O, stmtlist, CURLY_C
#line 612 "Psi.y"
   {
				CurrentSemanticValue.Statement = new Block(ValueStack[ValueStack.Depth-2].StatementList);
			}
#line default
        break;
      case 127: // block -> CURLY_O, CURLY_C
#line 616 "Psi.y"
   {
				CurrentSemanticValue.Statement = new Block(new List<Statement>());
			}
#line default
        break;
      case 128: // stmtlist -> /* empty */
#line 622 "Psi.y"
   {
				CurrentSemanticValue.StatementList = new List<Statement>();
			}
#line default
        break;
      case 129: // stmtlist -> stmtlist, statement
#line 626 "Psi.y"
   {
				CurrentSemanticValue.StatementList = ValueStack[ValueStack.Depth-2].StatementList;
				CurrentSemanticValue.StatementList.Add(ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 130: // statement -> declaration
#line 633 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Declaration;
			}
#line default
        break;
      case 131: // statement -> typedecl
#line 637 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].TypeDeclaration;
			}
#line default
        break;
      case 132: // statement -> assertion
#line 641 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Assertion;
			}
#line default
        break;
      case 133: // statement -> block
#line 645 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Statement;
			}
#line default
        break;
      case 134: // statement -> BREAK, TERMINATOR
#line 649 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Break);
			}
#line default
        break;
      case 135: // statement -> FALLTROUGH, TERMINATOR
#line 653 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Fallthrough);
			}
#line default
        break;
      case 136: // statement -> CONTINUE, TERMINATOR
#line 657 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Continue);
			}
#line default
        break;
      case 137: // statement -> ERROR, expression, TERMINATOR
#line 661 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Error, ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 138: // statement -> RETURN, expression, TERMINATOR
#line 665 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Return, ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 139: // statement -> RETURN, TERMINATOR
#line 669 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Return);
			}
#line default
        break;
      case 140: // statement -> GOTO, expression, TERMINATOR
#line 673 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Goto, ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 141: // statement -> IF, ROUND_O, expression, ROUND_C, statement, ELSE, statement
#line 677 "Psi.y"
   {
				CurrentSemanticValue.Statement = new IfElseStatement(ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-3].Statement, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 142: // statement -> IF, ROUND_O, expression, ROUND_C, statement
#line 681 "Psi.y"
   {
				CurrentSemanticValue.Statement = new IfElseStatement(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement, null);
			}
#line default
        break;
      case 143: // statement -> WHILE, ROUND_O, expression, ROUND_C, statement
#line 685 "Psi.y"
   {
				CurrentSemanticValue.Statement = new WhileLoopStatement(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 144: // statement -> LOOP, statement, UNTIL, ROUND_O, expression, ROUND_C, TERMINATOR
#line 689 "Psi.y"
   {
				CurrentSemanticValue.Statement = new LoopUntilStatement(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-6].Statement);
			}
#line default
        break;
      case 145: // statement -> RESTRICT, ROUND_O, exprlist, ROUND_C, statement
#line 693 "Psi.y"
   {
				CurrentSemanticValue.Statement = new RestrictStatement(ValueStack[ValueStack.Depth-3].ExpressionList, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 146: // statement -> FOR, ROUND_O, identifier, IN, expression, ROUND_C, statement
#line 697 "Psi.y"
   {
				CurrentSemanticValue.Statement = new ForLoopStatement(ValueStack[ValueStack.Depth-5].String, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 147: // statement -> SELECT, ROUND_O, expression, ROUND_C, CURLY_O, options, CURLY_C
#line 701 "Psi.y"
   {
				CurrentSemanticValue.Statement = new SelectStatement(ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-2].SelectOptions);
			}
#line default
        break;
      case 148: // statement -> expression, TERMINATOR
#line 705 "Psi.y"
   {
				CurrentSemanticValue.Statement = new ExpressionStatement(ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 149: // statement -> TERMINATOR
#line 709 "Psi.y"
   {
				CurrentSemanticValue.Statement = Statement.Null;
			}
#line default
        break;
      case 150: // options -> /* empty */
#line 715 "Psi.y"
   {
				CurrentSemanticValue.SelectOptions = new List<SelectOption>();
			}
#line default
        break;
      case 151: // options -> options, WHEN, expression, COLON, stmtlist
#line 719 "Psi.y"
   {
				CurrentSemanticValue.SelectOptions = ValueStack[ValueStack.Depth-5].SelectOptions;
				CurrentSemanticValue.SelectOptions.Add(new SelectOption(ValueStack[ValueStack.Depth-3].Expression, new Block(ValueStack[ValueStack.Depth-1].StatementList)));
			}
#line default
        break;
      case 152: // options -> options, OTHERWISE, COLON, stmtlist
#line 724 "Psi.y"
   {
				CurrentSemanticValue.SelectOptions = ValueStack[ValueStack.Depth-4].SelectOptions;
				CurrentSemanticValue.SelectOptions.Add(new SelectOption(new Block(ValueStack[ValueStack.Depth-1].StatementList)));
			}
#line default
        break;
      case 155: // identifier -> OPERATOR, META, opsym, META
#line 732 "Psi.y"
                              { CurrentSemanticValue.String = ValueStack[ValueStack.Depth-2].Operator.Value.ToSymbolName(); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((PsiTokenType)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((PsiTokenType)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 772 "Psi.y"
public PsiParser(PsiLexer lexer) : base(lexer) 
{ 
	
}

public Module Result => this.CurrentSemanticValue.Module;

public static Expression TypeDeclaration { get; } = new VariableReference("<type>");

public static AstType Undefined { get; } = LiteralType.Unknown;

public static AstType Void { get; } = LiteralType.Void;

private static Expression Apply(Expression lhs, Expression rhs, PsiOperator op)
{
	return new BinaryOperation(op, lhs, rhs);
}

private static Expression Apply(Expression expr, PsiOperator op)
{
	return new UnaryOperation(op, expr);
}

private static Expression ApplyDot(Expression exp, string field)
{
	return new DotExpression(exp, field);
}

private static Expression ApplyMeta(Expression exp, string field)
{
	return new MetaExpression(exp, field);
}
#line default
}
}
