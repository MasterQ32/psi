// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  rechenknecht
// DateTime: 21.10.2017 18:54:26
// UserName: felix
// Input file <Psi.y - 21.10.2017 18:52:40>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace PsiCompiler.Grammar
{
public enum PsiTokenType {error=2,EOF=3,CURLY_O=4,CURLY_C=5,ROUND_O=6,
    ROUND_C=7,SQUARE_O=8,SQUARE_C=9,IMPORT=10,EXPORT=11,MODULE=12,
    ASSERT=13,ERROR=14,CONST=15,VAR=16,TYPE=17,FN=18,
    NEW=19,OPERATOR=20,ENUM=21,RECORD=22,INOUT=23,IN=24,
    OUT=25,THIS=26,FOR=27,WHILE=28,LOOP=29,UNTIL=30,
    IF=31,ELSE=32,SELECT=33,WHEN=34,OTHERWISE=35,RESTRICT=36,
    BREAK=37,CONTINUE=38,NEXT=39,RETURN=40,GOTO=41,MAPSTO=42,
    COMMA=43,TERMINATOR=44,COLON=45,LAMBDA=46,REF=47,ARRAY=48,
    PLUS=49,MINUS=50,MULT=51,DIV=52,AND=53,OR=54,
    INVERT=55,XOR=56,CONCAT=57,DOT=58,META=59,EXP=60,
    MOD=61,FORWARD=62,BACKWARD=63,LEQUAL=64,GEQUAL=65,EQUAL=66,
    NEQUAL=67,LESS=68,MORE=69,IS=70,ASSIGN=71,ASR=72,
    SHL=73,SHR=74,WB_PLUS=75,WB_MINUS=76,WB_MULT=77,WB_DIV=78,
    WB_AND=79,WB_OR=80,WB_INVERT=81,WB_XOR=82,WB_CONCAT=83,WB_EXP=84,
    WB_MOD=85,WB_ASR=86,WB_SHL=87,WB_SHR=88,NUMBER=89,STRING=90,
    ENUMVAL=91,IDENT=92,Comment=93,LongComment=94,Whitespace=95,UMINUS=96,
    UPLUS=97,UINVERT=98};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class PsiParser: ShiftReduceParser<ParserNode, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[179];
  private static State[] states = new State[346];
  private static string[] nonTerms = new string[] {
      "program", "identifier", "opsym", "module", "modname", "assertion", "type", 
      "expression", "expr_or", "expr_xor", "expr_and", "equality", "comparison", 
      "expr_arrows", "sum", "term", "expo", "shifting", "unary", "value", "exprlist", 
      "declaration", "typedecl", "vardecl", "field", "export", "storage", "arglist", 
      "argument", "functiontype", "paramlist", "parameter", "prefix", "statement", 
      "block", "stmtlist", "idlist", "fieldlist", "options", "$accept", "terminator", 
      };

  static PsiParser() {
    states[0] = new State(-2,new int[]{-1,1});
    states[1] = new State(new int[]{3,2,13,6,11,263,12,338,17,-21,15,-21,16,-21},new int[]{-6,3,-22,4,-4,5,-26,242});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(-5);
    states[6] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,7,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[7] = new State(new int[]{44,8,70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[8] = new State(-6);
    states[9] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,10,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[10] = new State(new int[]{70,-23,71,-23,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,44,-23,9,-23,43,-23,7,-23,58,-23,59,-23,8,-23,6,-23,72,-23,74,-23,73,-23,60,-23,51,-23,52,-23,61,-23,49,-23,50,-23,57,-23,62,-23,63,-23,64,-23,65,-23,68,-23,69,-23,66,-23,67,-23,53,-23,56,-23,54,-23,3,-23,13,-23,11,-23,12,-23,17,-23,15,-23,16,-23,5,-23,4,-23,37,-23,39,-23,38,-23,14,-23,40,-23,41,-23,31,-23,28,-23,29,-23,36,-23,27,-23,33,-23,55,-23,19,-23,21,-23,47,-23,22,-23,48,-23,92,-23,20,-23,18,-23,46,-23,90,-23,91,-23,89,-23,32,-23,30,-23,34,-23,35,-23,45,-23,42,-23});
    states[11] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,12,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[12] = new State(new int[]{70,-24,71,-24,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,44,-24,9,-24,43,-24,7,-24,58,-24,59,-24,8,-24,6,-24,72,-24,74,-24,73,-24,60,-24,51,-24,52,-24,61,-24,49,-24,50,-24,57,-24,62,-24,63,-24,64,-24,65,-24,68,-24,69,-24,66,-24,67,-24,53,-24,56,-24,54,-24,3,-24,13,-24,11,-24,12,-24,17,-24,15,-24,16,-24,5,-24,4,-24,37,-24,39,-24,38,-24,14,-24,40,-24,41,-24,31,-24,28,-24,29,-24,36,-24,27,-24,33,-24,55,-24,19,-24,21,-24,47,-24,22,-24,48,-24,92,-24,20,-24,18,-24,46,-24,90,-24,91,-24,89,-24,32,-24,30,-24,34,-24,35,-24,45,-24,42,-24});
    states[13] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,14,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[14] = new State(new int[]{70,-25,71,-25,83,-25,75,-25,76,-25,84,-25,77,-25,85,-25,78,-25,79,-25,80,-25,81,-25,82,-25,86,35,87,37,88,39,44,-25,9,-25,43,-25,7,-25,58,-25,59,-25,8,-25,6,-25,72,-25,74,-25,73,-25,60,-25,51,-25,52,-25,61,-25,49,-25,50,-25,57,-25,62,-25,63,-25,64,-25,65,-25,68,-25,69,-25,66,-25,67,-25,53,-25,56,-25,54,-25,3,-25,13,-25,11,-25,12,-25,17,-25,15,-25,16,-25,5,-25,4,-25,37,-25,39,-25,38,-25,14,-25,40,-25,41,-25,31,-25,28,-25,29,-25,36,-25,27,-25,33,-25,55,-25,19,-25,21,-25,47,-25,22,-25,48,-25,92,-25,20,-25,18,-25,46,-25,90,-25,91,-25,89,-25,32,-25,30,-25,34,-25,35,-25,45,-25,42,-25});
    states[15] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,16,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[16] = new State(new int[]{70,-26,71,-26,83,13,75,-26,76,-26,84,19,77,-26,85,23,78,-26,79,27,80,29,81,31,82,33,86,35,87,37,88,39,44,-26,9,-26,43,-26,7,-26,58,-26,59,-26,8,-26,6,-26,72,-26,74,-26,73,-26,60,-26,51,-26,52,-26,61,-26,49,-26,50,-26,57,-26,62,-26,63,-26,64,-26,65,-26,68,-26,69,-26,66,-26,67,-26,53,-26,56,-26,54,-26,3,-26,13,-26,11,-26,12,-26,17,-26,15,-26,16,-26,5,-26,4,-26,37,-26,39,-26,38,-26,14,-26,40,-26,41,-26,31,-26,28,-26,29,-26,36,-26,27,-26,33,-26,55,-26,19,-26,21,-26,47,-26,22,-26,48,-26,92,-26,20,-26,18,-26,46,-26,90,-26,91,-26,89,-26,32,-26,30,-26,34,-26,35,-26,45,-26,42,-26});
    states[17] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,18,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[18] = new State(new int[]{70,-27,71,-27,83,13,75,-27,76,-27,84,19,77,-27,85,23,78,-27,79,27,80,29,81,31,82,33,86,35,87,37,88,39,44,-27,9,-27,43,-27,7,-27,58,-27,59,-27,8,-27,6,-27,72,-27,74,-27,73,-27,60,-27,51,-27,52,-27,61,-27,49,-27,50,-27,57,-27,62,-27,63,-27,64,-27,65,-27,68,-27,69,-27,66,-27,67,-27,53,-27,56,-27,54,-27,3,-27,13,-27,11,-27,12,-27,17,-27,15,-27,16,-27,5,-27,4,-27,37,-27,39,-27,38,-27,14,-27,40,-27,41,-27,31,-27,28,-27,29,-27,36,-27,27,-27,33,-27,55,-27,19,-27,21,-27,47,-27,22,-27,48,-27,92,-27,20,-27,18,-27,46,-27,90,-27,91,-27,89,-27,32,-27,30,-27,34,-27,35,-27,45,-27,42,-27});
    states[19] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,20,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[20] = new State(new int[]{70,-28,71,-28,83,-28,75,-28,76,-28,84,-28,77,-28,85,-28,78,-28,79,-28,80,-28,81,-28,82,-28,86,35,87,37,88,39,44,-28,9,-28,43,-28,7,-28,58,-28,59,-28,8,-28,6,-28,72,-28,74,-28,73,-28,60,-28,51,-28,52,-28,61,-28,49,-28,50,-28,57,-28,62,-28,63,-28,64,-28,65,-28,68,-28,69,-28,66,-28,67,-28,53,-28,56,-28,54,-28,3,-28,13,-28,11,-28,12,-28,17,-28,15,-28,16,-28,5,-28,4,-28,37,-28,39,-28,38,-28,14,-28,40,-28,41,-28,31,-28,28,-28,29,-28,36,-28,27,-28,33,-28,55,-28,19,-28,21,-28,47,-28,22,-28,48,-28,92,-28,20,-28,18,-28,46,-28,90,-28,91,-28,89,-28,32,-28,30,-28,34,-28,35,-28,45,-28,42,-28});
    states[21] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,22,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[22] = new State(new int[]{70,-29,71,-29,83,13,75,-29,76,-29,84,19,77,-29,85,23,78,-29,79,27,80,29,81,31,82,33,86,35,87,37,88,39,44,-29,9,-29,43,-29,7,-29,58,-29,59,-29,8,-29,6,-29,72,-29,74,-29,73,-29,60,-29,51,-29,52,-29,61,-29,49,-29,50,-29,57,-29,62,-29,63,-29,64,-29,65,-29,68,-29,69,-29,66,-29,67,-29,53,-29,56,-29,54,-29,3,-29,13,-29,11,-29,12,-29,17,-29,15,-29,16,-29,5,-29,4,-29,37,-29,39,-29,38,-29,14,-29,40,-29,41,-29,31,-29,28,-29,29,-29,36,-29,27,-29,33,-29,55,-29,19,-29,21,-29,47,-29,22,-29,48,-29,92,-29,20,-29,18,-29,46,-29,90,-29,91,-29,89,-29,32,-29,30,-29,34,-29,35,-29,45,-29,42,-29});
    states[23] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,24,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[24] = new State(new int[]{70,-30,71,-30,83,-30,75,-30,76,-30,84,-30,77,-30,85,-30,78,-30,79,-30,80,-30,81,-30,82,-30,86,35,87,37,88,39,44,-30,9,-30,43,-30,7,-30,58,-30,59,-30,8,-30,6,-30,72,-30,74,-30,73,-30,60,-30,51,-30,52,-30,61,-30,49,-30,50,-30,57,-30,62,-30,63,-30,64,-30,65,-30,68,-30,69,-30,66,-30,67,-30,53,-30,56,-30,54,-30,3,-30,13,-30,11,-30,12,-30,17,-30,15,-30,16,-30,5,-30,4,-30,37,-30,39,-30,38,-30,14,-30,40,-30,41,-30,31,-30,28,-30,29,-30,36,-30,27,-30,33,-30,55,-30,19,-30,21,-30,47,-30,22,-30,48,-30,92,-30,20,-30,18,-30,46,-30,90,-30,91,-30,89,-30,32,-30,30,-30,34,-30,35,-30,45,-30,42,-30});
    states[25] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,26,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[26] = new State(new int[]{70,-31,71,-31,83,13,75,-31,76,-31,84,19,77,-31,85,23,78,-31,79,27,80,29,81,31,82,33,86,35,87,37,88,39,44,-31,9,-31,43,-31,7,-31,58,-31,59,-31,8,-31,6,-31,72,-31,74,-31,73,-31,60,-31,51,-31,52,-31,61,-31,49,-31,50,-31,57,-31,62,-31,63,-31,64,-31,65,-31,68,-31,69,-31,66,-31,67,-31,53,-31,56,-31,54,-31,3,-31,13,-31,11,-31,12,-31,17,-31,15,-31,16,-31,5,-31,4,-31,37,-31,39,-31,38,-31,14,-31,40,-31,41,-31,31,-31,28,-31,29,-31,36,-31,27,-31,33,-31,55,-31,19,-31,21,-31,47,-31,22,-31,48,-31,92,-31,20,-31,18,-31,46,-31,90,-31,91,-31,89,-31,32,-31,30,-31,34,-31,35,-31,45,-31,42,-31});
    states[27] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,28,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[28] = new State(new int[]{70,-32,71,-32,83,-32,75,-32,76,-32,84,-32,77,-32,85,-32,78,-32,79,-32,80,-32,81,-32,82,-32,86,35,87,37,88,39,44,-32,9,-32,43,-32,7,-32,58,-32,59,-32,8,-32,6,-32,72,-32,74,-32,73,-32,60,-32,51,-32,52,-32,61,-32,49,-32,50,-32,57,-32,62,-32,63,-32,64,-32,65,-32,68,-32,69,-32,66,-32,67,-32,53,-32,56,-32,54,-32,3,-32,13,-32,11,-32,12,-32,17,-32,15,-32,16,-32,5,-32,4,-32,37,-32,39,-32,38,-32,14,-32,40,-32,41,-32,31,-32,28,-32,29,-32,36,-32,27,-32,33,-32,55,-32,19,-32,21,-32,47,-32,22,-32,48,-32,92,-32,20,-32,18,-32,46,-32,90,-32,91,-32,89,-32,32,-32,30,-32,34,-32,35,-32,45,-32,42,-32});
    states[29] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,30,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[30] = new State(new int[]{70,-33,71,-33,83,-33,75,-33,76,-33,84,-33,77,-33,85,-33,78,-33,79,-33,80,-33,81,-33,82,-33,86,35,87,37,88,39,44,-33,9,-33,43,-33,7,-33,58,-33,59,-33,8,-33,6,-33,72,-33,74,-33,73,-33,60,-33,51,-33,52,-33,61,-33,49,-33,50,-33,57,-33,62,-33,63,-33,64,-33,65,-33,68,-33,69,-33,66,-33,67,-33,53,-33,56,-33,54,-33,3,-33,13,-33,11,-33,12,-33,17,-33,15,-33,16,-33,5,-33,4,-33,37,-33,39,-33,38,-33,14,-33,40,-33,41,-33,31,-33,28,-33,29,-33,36,-33,27,-33,33,-33,55,-33,19,-33,21,-33,47,-33,22,-33,48,-33,92,-33,20,-33,18,-33,46,-33,90,-33,91,-33,89,-33,32,-33,30,-33,34,-33,35,-33,45,-33,42,-33});
    states[31] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,32,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[32] = new State(new int[]{70,-34,71,-34,83,-34,75,-34,76,-34,84,-34,77,-34,85,-34,78,-34,79,-34,80,-34,81,-34,82,-34,86,35,87,37,88,39,44,-34,9,-34,43,-34,7,-34,58,-34,59,-34,8,-34,6,-34,72,-34,74,-34,73,-34,60,-34,51,-34,52,-34,61,-34,49,-34,50,-34,57,-34,62,-34,63,-34,64,-34,65,-34,68,-34,69,-34,66,-34,67,-34,53,-34,56,-34,54,-34,3,-34,13,-34,11,-34,12,-34,17,-34,15,-34,16,-34,5,-34,4,-34,37,-34,39,-34,38,-34,14,-34,40,-34,41,-34,31,-34,28,-34,29,-34,36,-34,27,-34,33,-34,55,-34,19,-34,21,-34,47,-34,22,-34,48,-34,92,-34,20,-34,18,-34,46,-34,90,-34,91,-34,89,-34,32,-34,30,-34,34,-34,35,-34,45,-34,42,-34});
    states[33] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,34,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[34] = new State(new int[]{70,-35,71,-35,83,-35,75,-35,76,-35,84,-35,77,-35,85,-35,78,-35,79,-35,80,-35,81,-35,82,-35,86,35,87,37,88,39,44,-35,9,-35,43,-35,7,-35,58,-35,59,-35,8,-35,6,-35,72,-35,74,-35,73,-35,60,-35,51,-35,52,-35,61,-35,49,-35,50,-35,57,-35,62,-35,63,-35,64,-35,65,-35,68,-35,69,-35,66,-35,67,-35,53,-35,56,-35,54,-35,3,-35,13,-35,11,-35,12,-35,17,-35,15,-35,16,-35,5,-35,4,-35,37,-35,39,-35,38,-35,14,-35,40,-35,41,-35,31,-35,28,-35,29,-35,36,-35,27,-35,33,-35,55,-35,19,-35,21,-35,47,-35,22,-35,48,-35,92,-35,20,-35,18,-35,46,-35,90,-35,91,-35,89,-35,32,-35,30,-35,34,-35,35,-35,45,-35,42,-35});
    states[35] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,36,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[36] = new State(-36);
    states[37] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,38,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[38] = new State(-37);
    states[39] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,40,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[40] = new State(-38);
    states[41] = new State(new int[]{54,42,44,-39,70,-39,71,-39,83,-39,75,-39,76,-39,84,-39,77,-39,85,-39,78,-39,79,-39,80,-39,81,-39,82,-39,86,-39,87,-39,88,-39,9,-39,43,-39,7,-39,58,-39,59,-39,8,-39,6,-39,72,-39,74,-39,73,-39,60,-39,51,-39,52,-39,61,-39,49,-39,50,-39,57,-39,62,-39,63,-39,64,-39,65,-39,68,-39,69,-39,66,-39,67,-39,53,-39,56,-39,3,-39,13,-39,11,-39,12,-39,17,-39,15,-39,16,-39,5,-39,4,-39,37,-39,39,-39,38,-39,14,-39,40,-39,41,-39,31,-39,28,-39,29,-39,36,-39,27,-39,33,-39,55,-39,19,-39,21,-39,47,-39,22,-39,48,-39,92,-39,20,-39,18,-39,46,-39,90,-39,91,-39,89,-39,32,-39,30,-39,34,-39,35,-39,45,-39,42,-39});
    states[42] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-9,43,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[43] = new State(-40);
    states[44] = new State(new int[]{56,45,54,-41,44,-41,70,-41,71,-41,83,-41,75,-41,76,-41,84,-41,77,-41,85,-41,78,-41,79,-41,80,-41,81,-41,82,-41,86,-41,87,-41,88,-41,9,-41,43,-41,7,-41,58,-41,59,-41,8,-41,6,-41,72,-41,74,-41,73,-41,60,-41,51,-41,52,-41,61,-41,49,-41,50,-41,57,-41,62,-41,63,-41,64,-41,65,-41,68,-41,69,-41,66,-41,67,-41,53,-41,3,-41,13,-41,11,-41,12,-41,17,-41,15,-41,16,-41,5,-41,4,-41,37,-41,39,-41,38,-41,14,-41,40,-41,41,-41,31,-41,28,-41,29,-41,36,-41,27,-41,33,-41,55,-41,19,-41,21,-41,47,-41,22,-41,48,-41,92,-41,20,-41,18,-41,46,-41,90,-41,91,-41,89,-41,32,-41,30,-41,34,-41,35,-41,45,-41,42,-41});
    states[45] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-10,46,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[46] = new State(-42);
    states[47] = new State(new int[]{53,48,56,-43,54,-43,44,-43,70,-43,71,-43,83,-43,75,-43,76,-43,84,-43,77,-43,85,-43,78,-43,79,-43,80,-43,81,-43,82,-43,86,-43,87,-43,88,-43,9,-43,43,-43,7,-43,58,-43,59,-43,8,-43,6,-43,72,-43,74,-43,73,-43,60,-43,51,-43,52,-43,61,-43,49,-43,50,-43,57,-43,62,-43,63,-43,64,-43,65,-43,68,-43,69,-43,66,-43,67,-43,3,-43,13,-43,11,-43,12,-43,17,-43,15,-43,16,-43,5,-43,4,-43,37,-43,39,-43,38,-43,14,-43,40,-43,41,-43,31,-43,28,-43,29,-43,36,-43,27,-43,33,-43,55,-43,19,-43,21,-43,47,-43,22,-43,48,-43,92,-43,20,-43,18,-43,46,-43,90,-43,91,-43,89,-43,32,-43,30,-43,34,-43,35,-43,45,-43,42,-43});
    states[48] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-11,49,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[49] = new State(-44);
    states[50] = new State(new int[]{66,51,67,53,53,-45,56,-45,54,-45,44,-45,70,-45,71,-45,83,-45,75,-45,76,-45,84,-45,77,-45,85,-45,78,-45,79,-45,80,-45,81,-45,82,-45,86,-45,87,-45,88,-45,9,-45,43,-45,7,-45,58,-45,59,-45,8,-45,6,-45,72,-45,74,-45,73,-45,60,-45,51,-45,52,-45,61,-45,49,-45,50,-45,57,-45,62,-45,63,-45,64,-45,65,-45,68,-45,69,-45,3,-45,13,-45,11,-45,12,-45,17,-45,15,-45,16,-45,5,-45,4,-45,37,-45,39,-45,38,-45,14,-45,40,-45,41,-45,31,-45,28,-45,29,-45,36,-45,27,-45,33,-45,55,-45,19,-45,21,-45,47,-45,22,-45,48,-45,92,-45,20,-45,18,-45,46,-45,90,-45,91,-45,89,-45,32,-45,30,-45,34,-45,35,-45,45,-45,42,-45});
    states[51] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-12,52,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[52] = new State(-46);
    states[53] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-12,54,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[54] = new State(-47);
    states[55] = new State(new int[]{64,56,65,58,68,60,69,62,66,-48,67,-48,53,-48,56,-48,54,-48,44,-48,70,-48,71,-48,83,-48,75,-48,76,-48,84,-48,77,-48,85,-48,78,-48,79,-48,80,-48,81,-48,82,-48,86,-48,87,-48,88,-48,9,-48,43,-48,7,-48,58,-48,59,-48,8,-48,6,-48,72,-48,74,-48,73,-48,60,-48,51,-48,52,-48,61,-48,49,-48,50,-48,57,-48,62,-48,63,-48,3,-48,13,-48,11,-48,12,-48,17,-48,15,-48,16,-48,5,-48,4,-48,37,-48,39,-48,38,-48,14,-48,40,-48,41,-48,31,-48,28,-48,29,-48,36,-48,27,-48,33,-48,55,-48,19,-48,21,-48,47,-48,22,-48,48,-48,92,-48,20,-48,18,-48,46,-48,90,-48,91,-48,89,-48,32,-48,30,-48,34,-48,35,-48,45,-48,42,-48});
    states[56] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-13,57,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[57] = new State(-49);
    states[58] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-13,59,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[59] = new State(-50);
    states[60] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-13,61,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[61] = new State(-51);
    states[62] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-13,63,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[63] = new State(-52);
    states[64] = new State(new int[]{62,65,63,67,64,-53,65,-53,68,-53,69,-53,66,-53,67,-53,53,-53,56,-53,54,-53,44,-53,70,-53,71,-53,83,-53,75,-53,76,-53,84,-53,77,-53,85,-53,78,-53,79,-53,80,-53,81,-53,82,-53,86,-53,87,-53,88,-53,9,-53,43,-53,7,-53,58,-53,59,-53,8,-53,6,-53,72,-53,74,-53,73,-53,60,-53,51,-53,52,-53,61,-53,49,-53,50,-53,57,-53,3,-53,13,-53,11,-53,12,-53,17,-53,15,-53,16,-53,5,-53,4,-53,37,-53,39,-53,38,-53,14,-53,40,-53,41,-53,31,-53,28,-53,29,-53,36,-53,27,-53,33,-53,55,-53,19,-53,21,-53,47,-53,22,-53,48,-53,92,-53,20,-53,18,-53,46,-53,90,-53,91,-53,89,-53,32,-53,30,-53,34,-53,35,-53,45,-53,42,-53});
    states[65] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-14,66,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[66] = new State(-54);
    states[67] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-14,68,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[68] = new State(-55);
    states[69] = new State(new int[]{49,70,50,72,57,74,62,-56,63,-56,64,-56,65,-56,68,-56,69,-56,66,-56,67,-56,53,-56,56,-56,54,-56,44,-56,70,-56,71,-56,83,-56,75,-56,76,-56,84,-56,77,-56,85,-56,78,-56,79,-56,80,-56,81,-56,82,-56,86,-56,87,-56,88,-56,9,-56,43,-56,7,-56,58,-56,59,-56,8,-56,6,-56,72,-56,74,-56,73,-56,60,-56,51,-56,52,-56,61,-56,3,-56,13,-56,11,-56,12,-56,17,-56,15,-56,16,-56,5,-56,4,-56,37,-56,39,-56,38,-56,14,-56,40,-56,41,-56,31,-56,28,-56,29,-56,36,-56,27,-56,33,-56,55,-56,19,-56,21,-56,47,-56,22,-56,48,-56,92,-56,20,-56,18,-56,46,-56,90,-56,91,-56,89,-56,32,-56,30,-56,34,-56,35,-56,45,-56,42,-56});
    states[70] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-15,71,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[71] = new State(new int[]{49,-57,50,-57,57,74,62,-57,63,-57,64,-57,65,-57,68,-57,69,-57,66,-57,67,-57,53,-57,56,-57,54,-57,44,-57,70,-57,71,-57,83,-57,75,-57,76,-57,84,-57,77,-57,85,-57,78,-57,79,-57,80,-57,81,-57,82,-57,86,-57,87,-57,88,-57,9,-57,43,-57,7,-57,58,-57,59,-57,8,-57,6,-57,72,-57,74,-57,73,-57,60,-57,51,-57,52,-57,61,-57,3,-57,13,-57,11,-57,12,-57,17,-57,15,-57,16,-57,5,-57,4,-57,37,-57,39,-57,38,-57,14,-57,40,-57,41,-57,31,-57,28,-57,29,-57,36,-57,27,-57,33,-57,55,-57,19,-57,21,-57,47,-57,22,-57,48,-57,92,-57,20,-57,18,-57,46,-57,90,-57,91,-57,89,-57,32,-57,30,-57,34,-57,35,-57,45,-57,42,-57});
    states[72] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-15,73,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[73] = new State(new int[]{49,-58,50,-58,57,74,62,-58,63,-58,64,-58,65,-58,68,-58,69,-58,66,-58,67,-58,53,-58,56,-58,54,-58,44,-58,70,-58,71,-58,83,-58,75,-58,76,-58,84,-58,77,-58,85,-58,78,-58,79,-58,80,-58,81,-58,82,-58,86,-58,87,-58,88,-58,9,-58,43,-58,7,-58,58,-58,59,-58,8,-58,6,-58,72,-58,74,-58,73,-58,60,-58,51,-58,52,-58,61,-58,3,-58,13,-58,11,-58,12,-58,17,-58,15,-58,16,-58,5,-58,4,-58,37,-58,39,-58,38,-58,14,-58,40,-58,41,-58,31,-58,28,-58,29,-58,36,-58,27,-58,33,-58,55,-58,19,-58,21,-58,47,-58,22,-58,48,-58,92,-58,20,-58,18,-58,46,-58,90,-58,91,-58,89,-58,32,-58,30,-58,34,-58,35,-58,45,-58,42,-58});
    states[74] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-15,75,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[75] = new State(-59);
    states[76] = new State(new int[]{51,77,52,79,61,81,49,-60,50,-60,57,-60,62,-60,63,-60,64,-60,65,-60,68,-60,69,-60,66,-60,67,-60,53,-60,56,-60,54,-60,44,-60,70,-60,71,-60,83,-60,75,-60,76,-60,84,-60,77,-60,85,-60,78,-60,79,-60,80,-60,81,-60,82,-60,86,-60,87,-60,88,-60,9,-60,43,-60,7,-60,58,-60,59,-60,8,-60,6,-60,72,-60,74,-60,73,-60,60,-60,3,-60,13,-60,11,-60,12,-60,17,-60,15,-60,16,-60,5,-60,4,-60,37,-60,39,-60,38,-60,14,-60,40,-60,41,-60,31,-60,28,-60,29,-60,36,-60,27,-60,33,-60,55,-60,19,-60,21,-60,47,-60,22,-60,48,-60,92,-60,20,-60,18,-60,46,-60,90,-60,91,-60,89,-60,32,-60,30,-60,34,-60,35,-60,45,-60,42,-60});
    states[77] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-16,78,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[78] = new State(new int[]{51,-61,52,-61,61,81,49,-61,50,-61,57,-61,62,-61,63,-61,64,-61,65,-61,68,-61,69,-61,66,-61,67,-61,53,-61,56,-61,54,-61,44,-61,70,-61,71,-61,83,-61,75,-61,76,-61,84,-61,77,-61,85,-61,78,-61,79,-61,80,-61,81,-61,82,-61,86,-61,87,-61,88,-61,9,-61,43,-61,7,-61,58,-61,59,-61,8,-61,6,-61,72,-61,74,-61,73,-61,60,-61,3,-61,13,-61,11,-61,12,-61,17,-61,15,-61,16,-61,5,-61,4,-61,37,-61,39,-61,38,-61,14,-61,40,-61,41,-61,31,-61,28,-61,29,-61,36,-61,27,-61,33,-61,55,-61,19,-61,21,-61,47,-61,22,-61,48,-61,92,-61,20,-61,18,-61,46,-61,90,-61,91,-61,89,-61,32,-61,30,-61,34,-61,35,-61,45,-61,42,-61});
    states[79] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-16,80,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[80] = new State(new int[]{51,-62,52,-62,61,81,49,-62,50,-62,57,-62,62,-62,63,-62,64,-62,65,-62,68,-62,69,-62,66,-62,67,-62,53,-62,56,-62,54,-62,44,-62,70,-62,71,-62,83,-62,75,-62,76,-62,84,-62,77,-62,85,-62,78,-62,79,-62,80,-62,81,-62,82,-62,86,-62,87,-62,88,-62,9,-62,43,-62,7,-62,58,-62,59,-62,8,-62,6,-62,72,-62,74,-62,73,-62,60,-62,3,-62,13,-62,11,-62,12,-62,17,-62,15,-62,16,-62,5,-62,4,-62,37,-62,39,-62,38,-62,14,-62,40,-62,41,-62,31,-62,28,-62,29,-62,36,-62,27,-62,33,-62,55,-62,19,-62,21,-62,47,-62,22,-62,48,-62,92,-62,20,-62,18,-62,46,-62,90,-62,91,-62,89,-62,32,-62,30,-62,34,-62,35,-62,45,-62,42,-62});
    states[81] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-16,82,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[82] = new State(-63);
    states[83] = new State(new int[]{60,84,51,-64,52,-64,61,-64,49,-64,50,-64,57,-64,62,-64,63,-64,64,-64,65,-64,68,-64,69,-64,66,-64,67,-64,53,-64,56,-64,54,-64,44,-64,70,-64,71,-64,83,-64,75,-64,76,-64,84,-64,77,-64,85,-64,78,-64,79,-64,80,-64,81,-64,82,-64,86,-64,87,-64,88,-64,9,-64,43,-64,7,-64,58,-64,59,-64,8,-64,6,-64,72,-64,74,-64,73,-64,3,-64,13,-64,11,-64,12,-64,17,-64,15,-64,16,-64,5,-64,4,-64,37,-64,39,-64,38,-64,14,-64,40,-64,41,-64,31,-64,28,-64,29,-64,36,-64,27,-64,33,-64,55,-64,19,-64,21,-64,47,-64,22,-64,48,-64,92,-64,20,-64,18,-64,46,-64,90,-64,91,-64,89,-64,32,-64,30,-64,34,-64,35,-64,45,-64,42,-64});
    states[84] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-17,85,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[85] = new State(-65);
    states[86] = new State(new int[]{72,87,74,89,73,91,60,-66,51,-66,52,-66,61,-66,49,-66,50,-66,57,-66,62,-66,63,-66,64,-66,65,-66,68,-66,69,-66,66,-66,67,-66,53,-66,56,-66,54,-66,44,-66,70,-66,71,-66,83,-66,75,-66,76,-66,84,-66,77,-66,85,-66,78,-66,79,-66,80,-66,81,-66,82,-66,86,-66,87,-66,88,-66,9,-66,43,-66,7,-66,58,-66,59,-66,8,-66,6,-66,3,-66,13,-66,11,-66,12,-66,17,-66,15,-66,16,-66,5,-66,4,-66,37,-66,39,-66,38,-66,14,-66,40,-66,41,-66,31,-66,28,-66,29,-66,36,-66,27,-66,33,-66,55,-66,19,-66,21,-66,47,-66,22,-66,48,-66,92,-66,20,-66,18,-66,46,-66,90,-66,91,-66,89,-66,32,-66,30,-66,34,-66,35,-66,45,-66,42,-66});
    states[87] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-18,88,-19,93,-20,195,-2,199,-30,200});
    states[88] = new State(-67);
    states[89] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-18,90,-19,93,-20,195,-2,199,-30,200});
    states[90] = new State(-68);
    states[91] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-18,92,-19,93,-20,195,-2,199,-30,200});
    states[92] = new State(-69);
    states[93] = new State(-70);
    states[94] = new State(new int[]{21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-20,95,-2,199,-30,200});
    states[95] = new State(new int[]{58,96,59,131,8,133,6,140,72,-71,74,-71,73,-71,60,-71,51,-71,52,-71,61,-71,49,-71,50,-71,57,-71,62,-71,63,-71,64,-71,65,-71,68,-71,69,-71,66,-71,67,-71,53,-71,56,-71,54,-71,44,-71,70,-71,71,-71,83,-71,75,-71,76,-71,84,-71,77,-71,85,-71,78,-71,79,-71,80,-71,81,-71,82,-71,86,-71,87,-71,88,-71,9,-71,43,-71,7,-71,3,-71,13,-71,11,-71,12,-71,17,-71,15,-71,16,-71,5,-71,4,-71,37,-71,39,-71,38,-71,14,-71,40,-71,41,-71,31,-71,28,-71,29,-71,36,-71,27,-71,33,-71,55,-71,19,-71,21,-71,47,-71,22,-71,48,-71,92,-71,20,-71,18,-71,46,-71,90,-71,91,-71,89,-71,32,-71,30,-71,34,-71,35,-71,45,-71,42,-71});
    states[96] = new State(new int[]{92,98,20,99},new int[]{-2,97});
    states[97] = new State(-76);
    states[98] = new State(-150);
    states[99] = new State(new int[]{59,100});
    states[100] = new State(new int[]{49,103,50,104,51,105,52,106,53,107,54,108,55,109,56,110,57,111,58,112,59,113,60,114,61,115,62,116,63,117,64,118,65,119,66,120,67,121,68,122,69,123,70,124,71,125,72,126,73,127,74,128,8,129},new int[]{-3,101});
    states[101] = new State(new int[]{59,102});
    states[102] = new State(-151);
    states[103] = new State(-152);
    states[104] = new State(-153);
    states[105] = new State(-154);
    states[106] = new State(-155);
    states[107] = new State(-156);
    states[108] = new State(-157);
    states[109] = new State(-158);
    states[110] = new State(-159);
    states[111] = new State(-160);
    states[112] = new State(-161);
    states[113] = new State(-162);
    states[114] = new State(-163);
    states[115] = new State(-164);
    states[116] = new State(-165);
    states[117] = new State(-166);
    states[118] = new State(-167);
    states[119] = new State(-168);
    states[120] = new State(-169);
    states[121] = new State(-170);
    states[122] = new State(-171);
    states[123] = new State(-172);
    states[124] = new State(-173);
    states[125] = new State(-174);
    states[126] = new State(-175);
    states[127] = new State(-176);
    states[128] = new State(-177);
    states[129] = new State(new int[]{9,130});
    states[130] = new State(-178);
    states[131] = new State(new int[]{92,98,20,99},new int[]{-2,132});
    states[132] = new State(-77);
    states[133] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-21,134,-8,194,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[134] = new State(new int[]{9,135,43,136});
    states[135] = new State(-84);
    states[136] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,137,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[137] = new State(new int[]{70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,9,-123,43,-123,7,-123});
    states[138] = new State(new int[]{21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-20,139,-2,199,-30,200});
    states[139] = new State(new int[]{58,96,59,131,8,133,6,140,72,-72,74,-72,73,-72,60,-72,51,-72,52,-72,61,-72,49,-72,50,-72,57,-72,62,-72,63,-72,64,-72,65,-72,68,-72,69,-72,66,-72,67,-72,53,-72,56,-72,54,-72,44,-72,70,-72,71,-72,83,-72,75,-72,76,-72,84,-72,77,-72,85,-72,78,-72,79,-72,80,-72,81,-72,82,-72,86,-72,87,-72,88,-72,9,-72,43,-72,7,-72,3,-72,13,-72,11,-72,12,-72,17,-72,15,-72,16,-72,5,-72,4,-72,37,-72,39,-72,38,-72,14,-72,40,-72,41,-72,31,-72,28,-72,29,-72,36,-72,27,-72,33,-72,55,-72,19,-72,21,-72,47,-72,22,-72,48,-72,92,-72,20,-72,18,-72,46,-72,90,-72,91,-72,89,-72,32,-72,30,-72,34,-72,35,-72,45,-72,42,-72});
    states[140] = new State(new int[]{7,141,49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-28,142,-29,337,-8,146,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,334,-30,200});
    states[141] = new State(-86);
    states[142] = new State(new int[]{7,143,43,144});
    states[143] = new State(-87);
    states[144] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-29,145,-8,146,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,334,-30,200});
    states[145] = new State(-118);
    states[146] = new State(new int[]{70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,7,-120,43,-120});
    states[147] = new State(new int[]{21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-20,148,-2,199,-30,200});
    states[148] = new State(new int[]{58,-73,59,-73,8,133,6,140,72,-73,74,-73,73,-73,60,-73,51,-73,52,-73,61,-73,49,-73,50,-73,57,-73,62,-73,63,-73,64,-73,65,-73,68,-73,69,-73,66,-73,67,-73,53,-73,56,-73,54,-73,44,-73,70,-73,71,-73,83,-73,75,-73,76,-73,84,-73,77,-73,85,-73,78,-73,79,-73,80,-73,81,-73,82,-73,86,-73,87,-73,88,-73,9,-73,43,-73,7,-73,3,-73,13,-73,11,-73,12,-73,17,-73,15,-73,16,-73,5,-73,4,-73,37,-73,39,-73,38,-73,14,-73,40,-73,41,-73,31,-73,28,-73,29,-73,36,-73,27,-73,33,-73,55,-73,19,-73,21,-73,47,-73,22,-73,48,-73,92,-73,20,-73,18,-73,46,-73,90,-73,91,-73,89,-73,32,-73,30,-73,34,-73,35,-73,45,-73,42,-73});
    states[149] = new State(new int[]{6,150,68,156});
    states[150] = new State(new int[]{92,98,20,99},new int[]{-37,151,-2,155});
    states[151] = new State(new int[]{7,152,43,153});
    states[152] = new State(-78);
    states[153] = new State(new int[]{92,98,20,99},new int[]{-2,154});
    states[154] = new State(-97);
    states[155] = new State(-98);
    states[156] = new State(new int[]{21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-7,157,-20,178,-2,199,-30,200});
    states[157] = new State(new int[]{69,158});
    states[158] = new State(new int[]{6,159});
    states[159] = new State(new int[]{92,98,20,99},new int[]{-38,160,-25,183,-2,164});
    states[160] = new State(new int[]{7,161,43,162});
    states[161] = new State(-79);
    states[162] = new State(new int[]{92,98,20,99},new int[]{-25,163,-2,164});
    states[163] = new State(-99);
    states[164] = new State(new int[]{45,165,70,331});
    states[165] = new State(new int[]{21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-7,166,-20,178,-2,199,-30,200});
    states[166] = new State(new int[]{70,168,44,171,7,-17,43,-17},new int[]{-41,167});
    states[167] = new State(-101);
    states[168] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,169,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[169] = new State(new int[]{70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,44,171,7,-17,43,-17},new int[]{-41,170});
    states[170] = new State(-103);
    states[171] = new State(-18);
    states[172] = new State(new int[]{21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-20,173,-2,199,-30,200});
    states[173] = new State(new int[]{58,96,59,131,8,133,6,140,72,-74,74,-74,73,-74,60,-74,51,-74,52,-74,61,-74,49,-74,50,-74,57,-74,62,-74,63,-74,64,-74,65,-74,68,-74,69,-74,66,-74,67,-74,53,-74,56,-74,54,-74,44,-74,70,-74,71,-74,83,-74,75,-74,76,-74,84,-74,77,-74,85,-74,78,-74,79,-74,80,-74,81,-74,82,-74,86,-74,87,-74,88,-74,9,-74,43,-74,7,-74,3,-74,13,-74,11,-74,12,-74,17,-74,15,-74,16,-74,5,-74,4,-74,37,-74,39,-74,38,-74,14,-74,40,-74,41,-74,31,-74,28,-74,29,-74,36,-74,27,-74,33,-74,55,-74,19,-74,21,-74,47,-74,22,-74,48,-74,92,-74,20,-74,18,-74,46,-74,90,-74,91,-74,89,-74,32,-74,30,-74,34,-74,35,-74,45,-74,42,-74});
    states[174] = new State(new int[]{68,175});
    states[175] = new State(new int[]{21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-7,176,-20,178,-2,199,-30,200});
    states[176] = new State(new int[]{69,177});
    states[177] = new State(-80);
    states[178] = new State(new int[]{58,96,59,131,8,133,6,140,69,-16,70,-16,44,-16,7,-16,43,-16,71,-16,83,-16,75,-16,76,-16,84,-16,77,-16,85,-16,78,-16,79,-16,80,-16,81,-16,82,-16,86,-16,87,-16,88,-16,9,-16,72,-16,74,-16,73,-16,60,-16,51,-16,52,-16,61,-16,49,-16,50,-16,57,-16,62,-16,63,-16,64,-16,65,-16,68,-16,66,-16,67,-16,53,-16,56,-16,54,-16,3,-16,13,-16,11,-16,12,-16,17,-16,15,-16,16,-16,5,-16,4,-16,37,-16,39,-16,38,-16,14,-16,40,-16,41,-16,31,-16,28,-16,29,-16,36,-16,27,-16,33,-16,55,-16,19,-16,21,-16,47,-16,22,-16,48,-16,92,-16,20,-16,18,-16,46,-16,90,-16,91,-16,89,-16,32,-16,30,-16,34,-16,35,-16,45,-16,42,-16});
    states[179] = new State(new int[]{6,180});
    states[180] = new State(new int[]{92,98,20,99},new int[]{-38,181,-25,183,-2,164});
    states[181] = new State(new int[]{7,182,43,162});
    states[182] = new State(-81);
    states[183] = new State(-100);
    states[184] = new State(new int[]{68,185});
    states[185] = new State(new int[]{21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-7,186,-20,178,-2,199,-30,200});
    states[186] = new State(new int[]{69,187,43,188});
    states[187] = new State(-82);
    states[188] = new State(new int[]{89,189});
    states[189] = new State(new int[]{69,190});
    states[190] = new State(-83);
    states[191] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-21,192,-8,194,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[192] = new State(new int[]{9,193,43,136});
    states[193] = new State(-85);
    states[194] = new State(new int[]{70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,9,-122,43,-122,7,-122});
    states[195] = new State(new int[]{58,96,59,131,8,133,6,140,72,-75,74,-75,73,-75,60,-75,51,-75,52,-75,61,-75,49,-75,50,-75,57,-75,62,-75,63,-75,64,-75,65,-75,68,-75,69,-75,66,-75,67,-75,53,-75,56,-75,54,-75,44,-75,70,-75,71,-75,83,-75,75,-75,76,-75,84,-75,77,-75,85,-75,78,-75,79,-75,80,-75,81,-75,82,-75,86,-75,87,-75,88,-75,9,-75,43,-75,7,-75,3,-75,13,-75,11,-75,12,-75,17,-75,15,-75,16,-75,5,-75,4,-75,37,-75,39,-75,38,-75,14,-75,40,-75,41,-75,31,-75,28,-75,29,-75,36,-75,27,-75,33,-75,55,-75,19,-75,21,-75,47,-75,22,-75,48,-75,92,-75,20,-75,18,-75,46,-75,90,-75,91,-75,89,-75,32,-75,30,-75,34,-75,35,-75,45,-75,42,-75});
    states[196] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,197,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[197] = new State(new int[]{7,198,70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[198] = new State(-88);
    states[199] = new State(-89);
    states[200] = new State(new int[]{42,202,4,237,58,-90,59,-90,8,-90,6,-90,72,-90,74,-90,73,-90,60,-90,51,-90,52,-90,61,-90,49,-90,50,-90,57,-90,62,-90,63,-90,64,-90,65,-90,68,-90,69,-90,66,-90,67,-90,53,-90,56,-90,54,-90,44,-90,70,-90,71,-90,83,-90,75,-90,76,-90,84,-90,77,-90,85,-90,78,-90,79,-90,80,-90,81,-90,82,-90,86,-90,87,-90,88,-90,9,-90,43,-90,7,-90,3,-90,13,-90,11,-90,12,-90,17,-90,15,-90,16,-90,5,-90,37,-90,39,-90,38,-90,14,-90,40,-90,41,-90,31,-90,28,-90,29,-90,36,-90,27,-90,33,-90,55,-90,19,-90,21,-90,47,-90,22,-90,48,-90,92,-90,20,-90,18,-90,46,-90,90,-90,91,-90,89,-90,32,-90,30,-90,34,-90,35,-90,45,-90},new int[]{-35,201});
    states[201] = new State(-91);
    states[202] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,203,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[203] = new State(new int[]{70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,58,-92,59,-92,8,-92,6,-92,72,-92,74,-92,73,-92,60,-92,51,-92,52,-92,61,-92,49,-92,50,-92,57,-92,62,-92,63,-92,64,-92,65,-92,68,-92,69,-92,66,-92,67,-92,53,-92,56,-92,54,-92,44,-92,9,-92,43,-92,7,-92,3,-92,13,-92,11,-92,12,-92,17,-92,15,-92,16,-92,5,-92,4,-92,37,-92,39,-92,38,-92,14,-92,40,-92,41,-92,31,-92,28,-92,29,-92,36,-92,27,-92,33,-92,55,-92,19,-92,21,-92,47,-92,22,-92,48,-92,92,-92,20,-92,18,-92,46,-92,90,-92,91,-92,89,-92,32,-92,30,-92,34,-92,35,-92,45,-92,42,-92});
    states[204] = new State(new int[]{6,205});
    states[205] = new State(new int[]{7,233,24,-113,25,-113,23,-113,26,-113,92,-113,20,-113},new int[]{-31,206,-32,236,-33,221});
    states[206] = new State(new int[]{7,207,43,219});
    states[207] = new State(new int[]{62,208,42,-106,4,-106,58,-106,59,-106,8,-106,6,-106,72,-106,74,-106,73,-106,60,-106,51,-106,52,-106,61,-106,49,-106,50,-106,57,-106,63,-106,64,-106,65,-106,68,-106,69,-106,66,-106,67,-106,53,-106,56,-106,54,-106,44,-106,70,-106,71,-106,83,-106,75,-106,76,-106,84,-106,77,-106,85,-106,78,-106,79,-106,80,-106,81,-106,82,-106,86,-106,87,-106,88,-106,9,-106,43,-106,7,-106,3,-106,13,-106,11,-106,12,-106,17,-106,15,-106,16,-106,5,-106,37,-106,39,-106,38,-106,14,-106,40,-106,41,-106,31,-106,28,-106,29,-106,36,-106,27,-106,33,-106,55,-106,19,-106,21,-106,47,-106,22,-106,48,-106,92,-106,20,-106,18,-106,46,-106,90,-106,91,-106,89,-106,32,-106,30,-106,34,-106,35,-106,45,-106});
    states[208] = new State(new int[]{21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-7,209,-20,178,-2,199,-30,200});
    states[209] = new State(-104);
    states[210] = new State(new int[]{6,211});
    states[211] = new State(new int[]{92,98,20,99},new int[]{-37,212,-2,155});
    states[212] = new State(new int[]{7,213,43,153});
    states[213] = new State(new int[]{42,214});
    states[214] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,215,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[215] = new State(new int[]{70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,58,-93,59,-93,8,-93,6,-93,72,-93,74,-93,73,-93,60,-93,51,-93,52,-93,61,-93,49,-93,50,-93,57,-93,62,-93,63,-93,64,-93,65,-93,68,-93,69,-93,66,-93,67,-93,53,-93,56,-93,54,-93,44,-93,9,-93,43,-93,7,-93,3,-93,13,-93,11,-93,12,-93,17,-93,15,-93,16,-93,5,-93,4,-93,37,-93,39,-93,38,-93,14,-93,40,-93,41,-93,31,-93,28,-93,29,-93,36,-93,27,-93,33,-93,55,-93,19,-93,21,-93,47,-93,22,-93,48,-93,92,-93,20,-93,18,-93,46,-93,90,-93,91,-93,89,-93,32,-93,30,-93,34,-93,35,-93,45,-93,42,-93});
    states[216] = new State(-94);
    states[217] = new State(-95);
    states[218] = new State(-96);
    states[219] = new State(-113,new int[]{-32,220,-33,221});
    states[220] = new State(-108);
    states[221] = new State(new int[]{24,229,25,230,23,231,26,232,92,98,20,99},new int[]{-2,222});
    states[222] = new State(new int[]{45,223,70,227});
    states[223] = new State(new int[]{21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-7,224,-20,178,-2,199,-30,200});
    states[224] = new State(new int[]{70,225,7,-112,43,-112});
    states[225] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,226,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[226] = new State(new int[]{70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,7,-110,43,-110});
    states[227] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,228,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[228] = new State(new int[]{70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,7,-111,43,-111});
    states[229] = new State(-114);
    states[230] = new State(-115);
    states[231] = new State(-116);
    states[232] = new State(-117);
    states[233] = new State(new int[]{62,234,42,-107,4,-107,58,-107,59,-107,8,-107,6,-107,72,-107,74,-107,73,-107,60,-107,51,-107,52,-107,61,-107,49,-107,50,-107,57,-107,63,-107,64,-107,65,-107,68,-107,69,-107,66,-107,67,-107,53,-107,56,-107,54,-107,44,-107,70,-107,71,-107,83,-107,75,-107,76,-107,84,-107,77,-107,85,-107,78,-107,79,-107,80,-107,81,-107,82,-107,86,-107,87,-107,88,-107,9,-107,43,-107,7,-107,3,-107,13,-107,11,-107,12,-107,17,-107,15,-107,16,-107,5,-107,37,-107,39,-107,38,-107,14,-107,40,-107,41,-107,31,-107,28,-107,29,-107,36,-107,27,-107,33,-107,55,-107,19,-107,21,-107,47,-107,22,-107,48,-107,92,-107,20,-107,18,-107,46,-107,90,-107,91,-107,89,-107,32,-107,30,-107,34,-107,35,-107,45,-107});
    states[234] = new State(new int[]{21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-7,235,-20,178,-2,199,-30,200});
    states[235] = new State(-105);
    states[236] = new State(-109);
    states[237] = new State(new int[]{5,330,11,-126,13,-126,4,-126,37,-126,39,-126,38,-126,14,-126,40,-126,41,-126,31,-126,28,-126,29,-126,36,-126,27,-126,33,-126,49,-126,50,-126,55,-126,19,-126,21,-126,47,-126,22,-126,48,-126,8,-126,6,-126,92,-126,20,-126,18,-126,46,-126,90,-126,91,-126,89,-126,44,-126,17,-126,15,-126,16,-126},new int[]{-36,238});
    states[238] = new State(new int[]{5,239,11,263,13,6,4,237,37,266,39,268,38,270,14,272,40,275,41,279,31,282,28,289,29,294,36,301,27,306,33,313,49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218,44,326,17,-21,15,-21,16,-21},new int[]{-34,240,-22,241,-26,242,-6,264,-35,265,-8,324,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[239] = new State(-124);
    states[240] = new State(-127);
    states[241] = new State(-128);
    states[242] = new State(new int[]{17,245,15,261,16,262},new int[]{-23,243,-24,244,-27,250});
    states[243] = new State(-10);
    states[244] = new State(-11);
    states[245] = new State(new int[]{92,98,20,99},new int[]{-2,246});
    states[246] = new State(new int[]{70,247});
    states[247] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,248,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[248] = new State(new int[]{44,249,70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[249] = new State(-12);
    states[250] = new State(new int[]{92,98,20,99},new int[]{-2,251});
    states[251] = new State(new int[]{45,252,70,258});
    states[252] = new State(new int[]{21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-7,253,-20,178,-2,199,-30,200});
    states[253] = new State(new int[]{70,255,44,171,3,-17,13,-17,11,-17,12,-17,17,-17,15,-17,16,-17,5,-17,4,-17,37,-17,39,-17,38,-17,14,-17,40,-17,41,-17,31,-17,28,-17,29,-17,36,-17,27,-17,33,-17,49,-17,50,-17,55,-17,19,-17,21,-17,47,-17,22,-17,48,-17,8,-17,6,-17,92,-17,20,-17,18,-17,46,-17,90,-17,91,-17,89,-17,32,-17,30,-17,34,-17,35,-17},new int[]{-41,254});
    states[254] = new State(-13);
    states[255] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,256,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[256] = new State(new int[]{70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,44,171,3,-17,13,-17,11,-17,12,-17,17,-17,15,-17,16,-17,5,-17,4,-17,37,-17,39,-17,38,-17,14,-17,40,-17,41,-17,31,-17,28,-17,29,-17,36,-17,27,-17,33,-17,49,-17,50,-17,55,-17,19,-17,21,-17,47,-17,22,-17,48,-17,8,-17,6,-17,92,-17,20,-17,18,-17,46,-17,90,-17,91,-17,89,-17,32,-17,30,-17,34,-17,35,-17},new int[]{-41,257});
    states[257] = new State(-15);
    states[258] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,259,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[259] = new State(new int[]{70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,44,171,3,-17,13,-17,11,-17,12,-17,17,-17,15,-17,16,-17,5,-17,4,-17,37,-17,39,-17,38,-17,14,-17,40,-17,41,-17,31,-17,28,-17,29,-17,36,-17,27,-17,33,-17,49,-17,50,-17,55,-17,19,-17,21,-17,47,-17,22,-17,48,-17,8,-17,6,-17,92,-17,20,-17,18,-17,46,-17,90,-17,91,-17,89,-17,32,-17,30,-17,34,-17,35,-17},new int[]{-41,260});
    states[260] = new State(-14);
    states[261] = new State(-19);
    states[262] = new State(-20);
    states[263] = new State(-22);
    states[264] = new State(-129);
    states[265] = new State(-130);
    states[266] = new State(new int[]{44,267});
    states[267] = new State(-131);
    states[268] = new State(new int[]{44,269});
    states[269] = new State(-132);
    states[270] = new State(new int[]{44,271});
    states[271] = new State(-133);
    states[272] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,273,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[273] = new State(new int[]{44,274,70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[274] = new State(-134);
    states[275] = new State(new int[]{44,278,49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,276,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[276] = new State(new int[]{44,277,70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[277] = new State(-135);
    states[278] = new State(-136);
    states[279] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,280,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[280] = new State(new int[]{44,281,70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[281] = new State(-137);
    states[282] = new State(new int[]{6,283});
    states[283] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,284,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[284] = new State(new int[]{7,285,70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[285] = new State(new int[]{11,263,13,6,4,237,37,266,39,268,38,270,14,272,40,275,41,279,31,282,28,289,29,294,36,301,27,306,33,313,49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218,44,326,17,-21,15,-21,16,-21},new int[]{-34,286,-22,241,-26,242,-6,264,-35,265,-8,324,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[286] = new State(new int[]{32,287,5,-139,11,-139,13,-139,4,-139,37,-139,39,-139,38,-139,14,-139,40,-139,41,-139,31,-139,28,-139,29,-139,36,-139,27,-139,33,-139,49,-139,50,-139,55,-139,19,-139,21,-139,47,-139,22,-139,48,-139,8,-139,6,-139,92,-139,20,-139,18,-139,46,-139,90,-139,91,-139,89,-139,44,-139,17,-139,15,-139,16,-139,30,-139,34,-139,35,-139});
    states[287] = new State(new int[]{11,263,13,6,4,237,37,266,39,268,38,270,14,272,40,275,41,279,31,282,28,289,29,294,36,301,27,306,33,313,49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218,44,326,17,-21,15,-21,16,-21},new int[]{-34,288,-22,241,-26,242,-6,264,-35,265,-8,324,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[288] = new State(-138);
    states[289] = new State(new int[]{6,290});
    states[290] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,291,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[291] = new State(new int[]{7,292,70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[292] = new State(new int[]{11,263,13,6,4,237,37,266,39,268,38,270,14,272,40,275,41,279,31,282,28,289,29,294,36,301,27,306,33,313,49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218,44,326,17,-21,15,-21,16,-21},new int[]{-34,293,-22,241,-26,242,-6,264,-35,265,-8,324,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[293] = new State(-140);
    states[294] = new State(new int[]{11,263,13,6,4,237,37,266,39,268,38,270,14,272,40,275,41,279,31,282,28,289,29,294,36,301,27,306,33,313,49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218,44,326,17,-21,15,-21,16,-21},new int[]{-34,295,-22,241,-26,242,-6,264,-35,265,-8,324,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[295] = new State(new int[]{30,296});
    states[296] = new State(new int[]{6,297});
    states[297] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,298,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[298] = new State(new int[]{7,299,70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[299] = new State(new int[]{44,300});
    states[300] = new State(-141);
    states[301] = new State(new int[]{6,302});
    states[302] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-21,303,-8,194,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[303] = new State(new int[]{7,304,43,136});
    states[304] = new State(new int[]{11,263,13,6,4,237,37,266,39,268,38,270,14,272,40,275,41,279,31,282,28,289,29,294,36,301,27,306,33,313,49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218,44,326,17,-21,15,-21,16,-21},new int[]{-34,305,-22,241,-26,242,-6,264,-35,265,-8,324,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[305] = new State(-142);
    states[306] = new State(new int[]{6,307});
    states[307] = new State(new int[]{92,98,20,99},new int[]{-2,308});
    states[308] = new State(new int[]{24,309});
    states[309] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,310,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[310] = new State(new int[]{7,311,70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[311] = new State(new int[]{11,263,13,6,4,237,37,266,39,268,38,270,14,272,40,275,41,279,31,282,28,289,29,294,36,301,27,306,33,313,49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218,44,326,17,-21,15,-21,16,-21},new int[]{-34,312,-22,241,-26,242,-6,264,-35,265,-8,324,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[312] = new State(-143);
    states[313] = new State(new int[]{6,314});
    states[314] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,315,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[315] = new State(new int[]{7,316,70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[316] = new State(new int[]{4,317});
    states[317] = new State(-147,new int[]{-39,318});
    states[318] = new State(new int[]{5,319,34,320,35,327});
    states[319] = new State(-144);
    states[320] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,321,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[321] = new State(new int[]{45,322,70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[322] = new State(-126,new int[]{-36,323});
    states[323] = new State(new int[]{11,263,13,6,4,237,37,266,39,268,38,270,14,272,40,275,41,279,31,282,28,289,29,294,36,301,27,306,33,313,49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218,44,326,5,-148,34,-148,35,-148,17,-21,15,-21,16,-21},new int[]{-34,240,-22,241,-26,242,-6,264,-35,265,-8,324,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[324] = new State(new int[]{44,325,70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39});
    states[325] = new State(-145);
    states[326] = new State(-146);
    states[327] = new State(new int[]{45,328});
    states[328] = new State(-126,new int[]{-36,329});
    states[329] = new State(new int[]{11,263,13,6,4,237,37,266,39,268,38,270,14,272,40,275,41,279,31,282,28,289,29,294,36,301,27,306,33,313,49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218,44,326,5,-149,34,-149,35,-149,17,-21,15,-21,16,-21},new int[]{-34,240,-22,241,-26,242,-6,264,-35,265,-8,324,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[330] = new State(-125);
    states[331] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,332,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[332] = new State(new int[]{70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,44,171,7,-17,43,-17},new int[]{-41,333});
    states[333] = new State(-102);
    states[334] = new State(new int[]{45,335,58,-89,59,-89,8,-89,6,-89,72,-89,74,-89,73,-89,60,-89,51,-89,52,-89,61,-89,49,-89,50,-89,57,-89,62,-89,63,-89,64,-89,65,-89,68,-89,69,-89,66,-89,67,-89,53,-89,56,-89,54,-89,70,-89,71,-89,83,-89,75,-89,76,-89,84,-89,77,-89,85,-89,78,-89,79,-89,80,-89,81,-89,82,-89,86,-89,87,-89,88,-89,7,-89,43,-89});
    states[335] = new State(new int[]{49,94,50,138,55,147,19,172,21,149,47,174,22,179,48,184,8,191,6,196,92,98,20,99,18,204,46,210,90,216,91,217,89,218},new int[]{-8,336,-9,41,-10,44,-11,47,-12,50,-13,55,-14,64,-15,69,-16,76,-17,83,-18,86,-19,93,-20,195,-2,199,-30,200});
    states[336] = new State(new int[]{70,9,71,11,83,13,75,15,76,17,84,19,77,21,85,23,78,25,79,27,80,29,81,31,82,33,86,35,87,37,88,39,7,-121,43,-121});
    states[337] = new State(-119);
    states[338] = new State(new int[]{92,98,20,99},new int[]{-5,339,-2,345});
    states[339] = new State(new int[]{4,340,58,343});
    states[340] = new State(-2,new int[]{-1,341});
    states[341] = new State(new int[]{5,342,13,6,11,263,12,338,17,-21,15,-21,16,-21},new int[]{-6,3,-22,4,-4,5,-26,242});
    states[342] = new State(-7);
    states[343] = new State(new int[]{92,98,20,99},new int[]{-2,344});
    states[344] = new State(-9);
    states[345] = new State(-8);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-40, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-1,-6});
    rules[4] = new Rule(-1, new int[]{-1,-22});
    rules[5] = new Rule(-1, new int[]{-1,-4});
    rules[6] = new Rule(-6, new int[]{13,-8,44});
    rules[7] = new Rule(-4, new int[]{12,-5,4,-1,5});
    rules[8] = new Rule(-5, new int[]{-2});
    rules[9] = new Rule(-5, new int[]{-5,58,-2});
    rules[10] = new Rule(-22, new int[]{-26,-23});
    rules[11] = new Rule(-22, new int[]{-26,-24});
    rules[12] = new Rule(-23, new int[]{17,-2,70,-8,44});
    rules[13] = new Rule(-24, new int[]{-27,-2,45,-7,-41});
    rules[14] = new Rule(-24, new int[]{-27,-2,70,-8,-41});
    rules[15] = new Rule(-24, new int[]{-27,-2,45,-7,70,-8,-41});
    rules[16] = new Rule(-7, new int[]{-20});
    rules[17] = new Rule(-41, new int[]{});
    rules[18] = new Rule(-41, new int[]{44});
    rules[19] = new Rule(-27, new int[]{15});
    rules[20] = new Rule(-27, new int[]{16});
    rules[21] = new Rule(-26, new int[]{});
    rules[22] = new Rule(-26, new int[]{11});
    rules[23] = new Rule(-8, new int[]{-8,70,-8});
    rules[24] = new Rule(-8, new int[]{-8,71,-8});
    rules[25] = new Rule(-8, new int[]{-8,83,-8});
    rules[26] = new Rule(-8, new int[]{-8,75,-8});
    rules[27] = new Rule(-8, new int[]{-8,76,-8});
    rules[28] = new Rule(-8, new int[]{-8,84,-8});
    rules[29] = new Rule(-8, new int[]{-8,77,-8});
    rules[30] = new Rule(-8, new int[]{-8,85,-8});
    rules[31] = new Rule(-8, new int[]{-8,78,-8});
    rules[32] = new Rule(-8, new int[]{-8,79,-8});
    rules[33] = new Rule(-8, new int[]{-8,80,-8});
    rules[34] = new Rule(-8, new int[]{-8,81,-8});
    rules[35] = new Rule(-8, new int[]{-8,82,-8});
    rules[36] = new Rule(-8, new int[]{-8,86,-8});
    rules[37] = new Rule(-8, new int[]{-8,87,-8});
    rules[38] = new Rule(-8, new int[]{-8,88,-8});
    rules[39] = new Rule(-8, new int[]{-9});
    rules[40] = new Rule(-9, new int[]{-9,54,-9});
    rules[41] = new Rule(-9, new int[]{-10});
    rules[42] = new Rule(-10, new int[]{-10,56,-10});
    rules[43] = new Rule(-10, new int[]{-11});
    rules[44] = new Rule(-11, new int[]{-11,53,-11});
    rules[45] = new Rule(-11, new int[]{-12});
    rules[46] = new Rule(-12, new int[]{-12,66,-12});
    rules[47] = new Rule(-12, new int[]{-12,67,-12});
    rules[48] = new Rule(-12, new int[]{-13});
    rules[49] = new Rule(-13, new int[]{-13,64,-13});
    rules[50] = new Rule(-13, new int[]{-13,65,-13});
    rules[51] = new Rule(-13, new int[]{-13,68,-13});
    rules[52] = new Rule(-13, new int[]{-13,69,-13});
    rules[53] = new Rule(-13, new int[]{-14});
    rules[54] = new Rule(-14, new int[]{-14,62,-14});
    rules[55] = new Rule(-14, new int[]{-14,63,-14});
    rules[56] = new Rule(-14, new int[]{-15});
    rules[57] = new Rule(-15, new int[]{-15,49,-15});
    rules[58] = new Rule(-15, new int[]{-15,50,-15});
    rules[59] = new Rule(-15, new int[]{-15,57,-15});
    rules[60] = new Rule(-15, new int[]{-16});
    rules[61] = new Rule(-16, new int[]{-16,51,-16});
    rules[62] = new Rule(-16, new int[]{-16,52,-16});
    rules[63] = new Rule(-16, new int[]{-16,61,-16});
    rules[64] = new Rule(-16, new int[]{-17});
    rules[65] = new Rule(-17, new int[]{-17,60,-17});
    rules[66] = new Rule(-17, new int[]{-18});
    rules[67] = new Rule(-18, new int[]{-18,72,-18});
    rules[68] = new Rule(-18, new int[]{-18,74,-18});
    rules[69] = new Rule(-18, new int[]{-18,73,-18});
    rules[70] = new Rule(-18, new int[]{-19});
    rules[71] = new Rule(-19, new int[]{49,-20});
    rules[72] = new Rule(-19, new int[]{50,-20});
    rules[73] = new Rule(-19, new int[]{55,-20});
    rules[74] = new Rule(-19, new int[]{19,-20});
    rules[75] = new Rule(-19, new int[]{-20});
    rules[76] = new Rule(-20, new int[]{-20,58,-2});
    rules[77] = new Rule(-20, new int[]{-20,59,-2});
    rules[78] = new Rule(-20, new int[]{21,6,-37,7});
    rules[79] = new Rule(-20, new int[]{21,68,-7,69,6,-38,7});
    rules[80] = new Rule(-20, new int[]{47,68,-7,69});
    rules[81] = new Rule(-20, new int[]{22,6,-38,7});
    rules[82] = new Rule(-20, new int[]{48,68,-7,69});
    rules[83] = new Rule(-20, new int[]{48,68,-7,43,89,69});
    rules[84] = new Rule(-20, new int[]{-20,8,-21,9});
    rules[85] = new Rule(-20, new int[]{8,-21,9});
    rules[86] = new Rule(-20, new int[]{-20,6,7});
    rules[87] = new Rule(-20, new int[]{-20,6,-28,7});
    rules[88] = new Rule(-20, new int[]{6,-8,7});
    rules[89] = new Rule(-20, new int[]{-2});
    rules[90] = new Rule(-20, new int[]{-30});
    rules[91] = new Rule(-20, new int[]{-30,-35});
    rules[92] = new Rule(-20, new int[]{-30,42,-8});
    rules[93] = new Rule(-20, new int[]{46,6,-37,7,42,-8});
    rules[94] = new Rule(-20, new int[]{90});
    rules[95] = new Rule(-20, new int[]{91});
    rules[96] = new Rule(-20, new int[]{89});
    rules[97] = new Rule(-37, new int[]{-37,43,-2});
    rules[98] = new Rule(-37, new int[]{-2});
    rules[99] = new Rule(-38, new int[]{-38,43,-25});
    rules[100] = new Rule(-38, new int[]{-25});
    rules[101] = new Rule(-25, new int[]{-2,45,-7,-41});
    rules[102] = new Rule(-25, new int[]{-2,70,-8,-41});
    rules[103] = new Rule(-25, new int[]{-2,45,-7,70,-8,-41});
    rules[104] = new Rule(-30, new int[]{18,6,-31,7,62,-7});
    rules[105] = new Rule(-30, new int[]{18,6,7,62,-7});
    rules[106] = new Rule(-30, new int[]{18,6,-31,7});
    rules[107] = new Rule(-30, new int[]{18,6,7});
    rules[108] = new Rule(-31, new int[]{-31,43,-32});
    rules[109] = new Rule(-31, new int[]{-32});
    rules[110] = new Rule(-32, new int[]{-33,-2,45,-7,70,-8});
    rules[111] = new Rule(-32, new int[]{-33,-2,70,-8});
    rules[112] = new Rule(-32, new int[]{-33,-2,45,-7});
    rules[113] = new Rule(-33, new int[]{});
    rules[114] = new Rule(-33, new int[]{-33,24});
    rules[115] = new Rule(-33, new int[]{-33,25});
    rules[116] = new Rule(-33, new int[]{-33,23});
    rules[117] = new Rule(-33, new int[]{-33,26});
    rules[118] = new Rule(-28, new int[]{-28,43,-29});
    rules[119] = new Rule(-28, new int[]{-29});
    rules[120] = new Rule(-29, new int[]{-8});
    rules[121] = new Rule(-29, new int[]{-2,45,-8});
    rules[122] = new Rule(-21, new int[]{-8});
    rules[123] = new Rule(-21, new int[]{-21,43,-8});
    rules[124] = new Rule(-35, new int[]{4,-36,5});
    rules[125] = new Rule(-35, new int[]{4,5});
    rules[126] = new Rule(-36, new int[]{});
    rules[127] = new Rule(-36, new int[]{-36,-34});
    rules[128] = new Rule(-34, new int[]{-22});
    rules[129] = new Rule(-34, new int[]{-6});
    rules[130] = new Rule(-34, new int[]{-35});
    rules[131] = new Rule(-34, new int[]{37,44});
    rules[132] = new Rule(-34, new int[]{39,44});
    rules[133] = new Rule(-34, new int[]{38,44});
    rules[134] = new Rule(-34, new int[]{14,-8,44});
    rules[135] = new Rule(-34, new int[]{40,-8,44});
    rules[136] = new Rule(-34, new int[]{40,44});
    rules[137] = new Rule(-34, new int[]{41,-8,44});
    rules[138] = new Rule(-34, new int[]{31,6,-8,7,-34,32,-34});
    rules[139] = new Rule(-34, new int[]{31,6,-8,7,-34});
    rules[140] = new Rule(-34, new int[]{28,6,-8,7,-34});
    rules[141] = new Rule(-34, new int[]{29,-34,30,6,-8,7,44});
    rules[142] = new Rule(-34, new int[]{36,6,-21,7,-34});
    rules[143] = new Rule(-34, new int[]{27,6,-2,24,-8,7,-34});
    rules[144] = new Rule(-34, new int[]{33,6,-8,7,4,-39,5});
    rules[145] = new Rule(-34, new int[]{-8,44});
    rules[146] = new Rule(-34, new int[]{44});
    rules[147] = new Rule(-39, new int[]{});
    rules[148] = new Rule(-39, new int[]{-39,34,-8,45,-36});
    rules[149] = new Rule(-39, new int[]{-39,35,45,-36});
    rules[150] = new Rule(-2, new int[]{92});
    rules[151] = new Rule(-2, new int[]{20,59,-3,59});
    rules[152] = new Rule(-3, new int[]{49});
    rules[153] = new Rule(-3, new int[]{50});
    rules[154] = new Rule(-3, new int[]{51});
    rules[155] = new Rule(-3, new int[]{52});
    rules[156] = new Rule(-3, new int[]{53});
    rules[157] = new Rule(-3, new int[]{54});
    rules[158] = new Rule(-3, new int[]{55});
    rules[159] = new Rule(-3, new int[]{56});
    rules[160] = new Rule(-3, new int[]{57});
    rules[161] = new Rule(-3, new int[]{58});
    rules[162] = new Rule(-3, new int[]{59});
    rules[163] = new Rule(-3, new int[]{60});
    rules[164] = new Rule(-3, new int[]{61});
    rules[165] = new Rule(-3, new int[]{62});
    rules[166] = new Rule(-3, new int[]{63});
    rules[167] = new Rule(-3, new int[]{64});
    rules[168] = new Rule(-3, new int[]{65});
    rules[169] = new Rule(-3, new int[]{66});
    rules[170] = new Rule(-3, new int[]{67});
    rules[171] = new Rule(-3, new int[]{68});
    rules[172] = new Rule(-3, new int[]{69});
    rules[173] = new Rule(-3, new int[]{70});
    rules[174] = new Rule(-3, new int[]{71});
    rules[175] = new Rule(-3, new int[]{72});
    rules[176] = new Rule(-3, new int[]{73});
    rules[177] = new Rule(-3, new int[]{74});
    rules[178] = new Rule(-3, new int[]{8,9});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)PsiTokenType.error, (int)PsiTokenType.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> /* empty */
#line 69 "Psi.y"
                                  { CurrentSemanticValue.Module = new Module(); }
#line default
        break;
      case 3: // program -> program, assertion
#line 70 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Assertion); }
#line default
        break;
      case 4: // program -> program, declaration
#line 71 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Declaration); }
#line default
        break;
      case 5: // program -> program, module
#line 72 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Module); }
#line default
        break;
      case 6: // assertion -> ASSERT, expression, TERMINATOR
#line 75 "Psi.y"
                                           {
            	CurrentSemanticValue.Assertion = new Assertion(ValueStack[ValueStack.Depth-2].Expression); 
            }
#line default
        break;
      case 7: // module -> MODULE, modname, CURLY_O, program, CURLY_C
#line 80 "Psi.y"
                                                     {
				CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module;
				CurrentSemanticValue.Module.Name = ValueStack[ValueStack.Depth-4].Name;
			}
#line default
        break;
      case 8: // modname -> identifier
#line 86 "Psi.y"
                         {
            	CurrentSemanticValue.Name = new CompoundName(ValueStack[ValueStack.Depth-1].String); 
            }
#line default
        break;
      case 9: // modname -> modname, DOT, identifier
#line 89 "Psi.y"
                                     {
            	CurrentSemanticValue.Name = ValueStack[ValueStack.Depth-3].Name;
            	CurrentSemanticValue.Name.Add(ValueStack[ValueStack.Depth-1].String);
        	}
#line default
        break;
      case 10: // declaration -> export, typedecl
#line 95 "Psi.y"
                              {
            	CurrentSemanticValue.Declaration = ValueStack[ValueStack.Depth-1].Declaration;
            	CurrentSemanticValue.Declaration.IsExported = (bool)ValueStack[ValueStack.Depth-2].Boolean;
            }
#line default
        break;
      case 11: // declaration -> export, vardecl
#line 99 "Psi.y"
                             {
            	CurrentSemanticValue.Declaration = ValueStack[ValueStack.Depth-1].Declaration;
            	CurrentSemanticValue.Declaration.IsExported = (bool)ValueStack[ValueStack.Depth-2].Boolean;
            }
#line default
        break;
      case 12: // typedecl -> TYPE, identifier, IS, expression, TERMINATOR
#line 105 "Psi.y"
                                                       {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, TypeDeclaration, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = true;
            }
#line default
        break;
      case 13: // vardecl -> storage, identifier, COLON, type, terminator
#line 111 "Psi.y"
                                                       {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].Expression, null);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 14: // vardecl -> storage, identifier, IS, expression, terminator
#line 115 "Psi.y"
                                                             {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, Undefined, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 15: // vardecl -> storage, identifier, COLON, type, IS, expression, terminator
#line 119 "Psi.y"
                                                                     {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-6].String, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-7].Boolean;
            }
#line default
        break;
      case 16: // type -> value
#line 126 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 19: // storage -> CONST
#line 134 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 20: // storage -> VAR
#line 135 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 21: // export -> /* empty */
#line 138 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 22: // export -> EXPORT
#line 139 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 23: // expression -> expression, IS, expression
#line 143 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.CopyAssign);
			}
#line default
        break;
      case 24: // expression -> expression, ASSIGN, expression
#line 147 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.SemanticAssign);
			}
#line default
        break;
      case 25: // expression -> expression, WB_CONCAT, expression
#line 151 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackConcat);
			}
#line default
        break;
      case 26: // expression -> expression, WB_PLUS, expression
#line 155 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackPlus);
			}
#line default
        break;
      case 27: // expression -> expression, WB_MINUS, expression
#line 159 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMinus);
			}
#line default
        break;
      case 28: // expression -> expression, WB_EXP, expression
#line 163 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackExponentiate);
			}
#line default
        break;
      case 29: // expression -> expression, WB_MULT, expression
#line 167 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMultiply);
			}
#line default
        break;
      case 30: // expression -> expression, WB_MOD, expression
#line 171 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackModulo);
			}
#line default
        break;
      case 31: // expression -> expression, WB_DIV, expression
#line 175 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackDivide);
			}
#line default
        break;
      case 32: // expression -> expression, WB_AND, expression
#line 179 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackAnd);
			}
#line default
        break;
      case 33: // expression -> expression, WB_OR, expression
#line 183 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackOr);
			}
#line default
        break;
      case 34: // expression -> expression, WB_INVERT, expression
#line 187 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackInvert);
			}
#line default
        break;
      case 35: // expression -> expression, WB_XOR, expression
#line 191 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackXor);
			}
#line default
        break;
      case 36: // expression -> expression, WB_ASR, expression
#line 195 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackArithmeticShiftRight);
			}
#line default
        break;
      case 37: // expression -> expression, WB_SHL, expression
#line 199 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftLeft);
			}
#line default
        break;
      case 38: // expression -> expression, WB_SHR, expression
#line 203 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftRight);
			}
#line default
        break;
      case 39: // expression -> expr_or
#line 207 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 40: // expr_or -> expr_or, OR, expr_or
#line 213 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Or);
			}
#line default
        break;
      case 41: // expr_or -> expr_xor
#line 217 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 42: // expr_xor -> expr_xor, XOR, expr_xor
#line 223 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Xor);
			}
#line default
        break;
      case 43: // expr_xor -> expr_and
#line 227 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 44: // expr_and -> expr_and, AND, expr_and
#line 233 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.And);
			}
#line default
        break;
      case 45: // expr_and -> equality
#line 237 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 46: // equality -> equality, EQUAL, equality
#line 243 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Equals);
			}
#line default
        break;
      case 47: // equality -> equality, NEQUAL, equality
#line 247 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.NotEquals);
			}
#line default
        break;
      case 48: // equality -> comparison
#line 251 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 49: // comparison -> comparison, LEQUAL, comparison
#line 257 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.LessOrEqual);
			}
#line default
        break;
      case 50: // comparison -> comparison, GEQUAL, comparison
#line 261 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.MoreOrEqual);
			}
#line default
        break;
      case 51: // comparison -> comparison, LESS, comparison
#line 265 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Less);
			}
#line default
        break;
      case 52: // comparison -> comparison, MORE, comparison
#line 269 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.More);
			}
#line default
        break;
      case 53: // comparison -> expr_arrows
#line 273 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 54: // expr_arrows -> expr_arrows, FORWARD, expr_arrows
#line 279 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Forward);
			}
#line default
        break;
      case 55: // expr_arrows -> expr_arrows, BACKWARD, expr_arrows
#line 283 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Backward);
			}
#line default
        break;
      case 56: // expr_arrows -> sum
#line 287 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 57: // sum -> sum, PLUS, sum
#line 293 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 58: // sum -> sum, MINUS, sum
#line 297 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 59: // sum -> sum, CONCAT, sum
#line 301 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Concat);
			}
#line default
        break;
      case 60: // sum -> term
#line 305 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 61: // term -> term, MULT, term
#line 311 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Multiply);
			}
#line default
        break;
      case 62: // term -> term, DIV, term
#line 315 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Divide);
			}
#line default
        break;
      case 63: // term -> term, MOD, term
#line 319 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Modulo);
			}
#line default
        break;
      case 64: // term -> expo
#line 323 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 65: // expo -> expo, EXP, expo
#line 329 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Exponentiate);
			}
#line default
        break;
      case 66: // expo -> shifting
#line 333 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 67: // shifting -> shifting, ASR, shifting
#line 339 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ArithmeticShiftRight);
			}
#line default
        break;
      case 68: // shifting -> shifting, SHR, shifting
#line 343 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftRight);
			}
#line default
        break;
      case 69: // shifting -> shifting, SHL, shifting
#line 347 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftLeft);
			}
#line default
        break;
      case 70: // shifting -> unary
#line 351 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 71: // unary -> PLUS, value
#line 357 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 72: // unary -> MINUS, value
#line 361 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 73: // unary -> INVERT, value
#line 365 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Invert);
			}
#line default
        break;
      case 74: // unary -> NEW, value
#line 369 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.New);
			}
#line default
        break;
      case 75: // unary -> value
#line 373 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 76: // value -> value, DOT, identifier
#line 379 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyDot(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 77: // value -> value, META, identifier
#line 383 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyMeta(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 78: // value -> ENUM, ROUND_O, idlist, ROUND_C
#line 387 "Psi.y"
   {
				CurrentSemanticValue.Expression = new EnumTypeLiteral(ValueStack[ValueStack.Depth-2].StringList);
			}
#line default
        break;
      case 79: // value -> ENUM, LESS, type, MORE, ROUND_O, fieldlist, ROUND_C
#line 391 "Psi.y"
   {
				CurrentSemanticValue.Expression = new TypedEnumTypeLiteral(ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-2].FieldList);
			}
#line default
        break;
      case 80: // value -> REF, LESS, type, MORE
#line 395 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ReferenceTypeLiteral(ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 81: // value -> RECORD, ROUND_O, fieldlist, ROUND_C
#line 399 "Psi.y"
   {
				CurrentSemanticValue.Expression = new RecordTypeLiteral(ValueStack[ValueStack.Depth-2].FieldList);
			}
#line default
        break;
      case 82: // value -> ARRAY, LESS, type, MORE
#line 403 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayTypeLiteral(ValueStack[ValueStack.Depth-2].Expression, 1);
			}
#line default
        break;
      case 83: // value -> ARRAY, LESS, type, COMMA, NUMBER, MORE
#line 407 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayTypeLiteral(ValueStack[ValueStack.Depth-4].Expression, int.Parse(ValueStack[ValueStack.Depth-2].String));
			}
#line default
        break;
      case 84: // value -> value, SQUARE_O, exprlist, SQUARE_C
#line 411 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayIndexingExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ExpressionList);
			}
#line default
        break;
      case 85: // value -> SQUARE_O, exprlist, SQUARE_C
#line 415 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayLiteral(ValueStack[ValueStack.Depth-2].ExpressionList);
			}
#line default
        break;
      case 86: // value -> value, ROUND_O, ROUND_C
#line 419 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-3].Expression, new List<Argument>());
			}
#line default
        break;
      case 87: // value -> value, ROUND_O, arglist, ROUND_C
#line 423 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ArgumentList);
			}
#line default
        break;
      case 88: // value -> ROUND_O, expression, ROUND_C
#line 427 "Psi.y"
            {
                CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-2].Expression;
            }
#line default
        break;
      case 89: // value -> identifier
#line 431 "Psi.y"
   {
            	CurrentSemanticValue.Expression = new VariableReference(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 90: // value -> functiontype
#line 435 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].FunctionType;
			}
#line default
        break;
      case 91: // value -> functiontype, block
#line 439 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionLiteral(ValueStack[ValueStack.Depth-2].FunctionType, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 92: // value -> functiontype, MAPSTO, expression
#line 443 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionLiteral(ValueStack[ValueStack.Depth-3].FunctionType, new ExpressionStatement(ValueStack[ValueStack.Depth-1].Expression));
			}
#line default
        break;
      case 93: // value -> LAMBDA, ROUND_O, idlist, ROUND_C, MAPSTO, expression
#line 447 "Psi.y"
   {
				CurrentSemanticValue.Expression = new LambdaLiteral(ValueStack[ValueStack.Depth-4].StringList, new ExpressionStatement(ValueStack[ValueStack.Depth-1].Expression));
			}
#line default
        break;
      case 94: // value -> STRING
#line 451 "Psi.y"
   {
				CurrentSemanticValue.Expression = new StringLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 95: // value -> ENUMVAL
#line 455 "Psi.y"
   {
				CurrentSemanticValue.Expression = new EnumLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 96: // value -> NUMBER
#line 459 "Psi.y"
   {
				CurrentSemanticValue.Expression = new NumberLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 97: // idlist -> idlist, COMMA, identifier
#line 465 "Psi.y"
   {
				CurrentSemanticValue.StringList = ValueStack[ValueStack.Depth-3].StringList;
				CurrentSemanticValue.StringList.Add(ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 98: // idlist -> identifier
#line 470 "Psi.y"
   {
				CurrentSemanticValue.StringList = new List<string>();
				CurrentSemanticValue.StringList.Add(ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 99: // fieldlist -> fieldlist, COMMA, field
#line 477 "Psi.y"
   {
				CurrentSemanticValue.FieldList = ValueStack[ValueStack.Depth-3].FieldList;
				CurrentSemanticValue.FieldList.Add(ValueStack[ValueStack.Depth-1].Declaration);	
			}
#line default
        break;
      case 100: // fieldlist -> field
#line 482 "Psi.y"
   {
				CurrentSemanticValue.FieldList = new List<Declaration>();
				CurrentSemanticValue.FieldList.Add(ValueStack[ValueStack.Depth-1].Declaration);
			}
#line default
        break;
      case 101: // field -> identifier, COLON, type, terminator
#line 488 "Psi.y"
                                               {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].Expression, null);
            	CurrentSemanticValue.Declaration.IsField = true;
            }
#line default
        break;
      case 102: // field -> identifier, IS, expression, terminator
#line 492 "Psi.y"
                                                     {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, Undefined, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsField = true;
            }
#line default
        break;
      case 103: // field -> identifier, COLON, type, IS, expression, terminator
#line 496 "Psi.y"
                                                             {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-6].String, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsField = true;
            }
#line default
        break;
      case 104: // functiontype -> FN, ROUND_O, paramlist, ROUND_C, FORWARD, type
#line 503 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(ValueStack[ValueStack.Depth-4].ParameterList, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 105: // functiontype -> FN, ROUND_O, ROUND_C, FORWARD, type
#line 507 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(new List<Parameter>(), ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 106: // functiontype -> FN, ROUND_O, paramlist, ROUND_C
#line 511 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(ValueStack[ValueStack.Depth-2].ParameterList, Void);
			}
#line default
        break;
      case 107: // functiontype -> FN, ROUND_O, ROUND_C
#line 515 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(new List<Parameter>(), Void);
			}
#line default
        break;
      case 108: // paramlist -> paramlist, COMMA, parameter
#line 521 "Psi.y"
   {
				CurrentSemanticValue.ParameterList = ValueStack[ValueStack.Depth-3].ParameterList;
				CurrentSemanticValue.ParameterList.Add(ValueStack[ValueStack.Depth-1].Parameter);
			}
#line default
        break;
      case 109: // paramlist -> parameter
#line 526 "Psi.y"
   {
				CurrentSemanticValue.ParameterList = new List<Parameter>();
				CurrentSemanticValue.ParameterList.Add(ValueStack[ValueStack.Depth-1].Parameter);
			}
#line default
        break;
      case 110: // parameter -> prefix, identifier, COLON, type, IS, expression
#line 533 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-6].ParameterPrefix, ValueStack[ValueStack.Depth-5].String, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 111: // parameter -> prefix, identifier, IS, expression
#line 537 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-4].ParameterPrefix, ValueStack[ValueStack.Depth-3].String, Undefined, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 112: // parameter -> prefix, identifier, COLON, type
#line 541 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-4].ParameterPrefix, ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].Expression, null);
			}
#line default
        break;
      case 113: // prefix -> /* empty */
#line 547 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ParameterPrefix.None;
			}
#line default
        break;
      case 114: // prefix -> prefix, IN
#line 551 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.In;
			}
#line default
        break;
      case 115: // prefix -> prefix, OUT
#line 555 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.Out;
			}
#line default
        break;
      case 116: // prefix -> prefix, INOUT
#line 559 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.InOut;
			}
#line default
        break;
      case 117: // prefix -> prefix, THIS
#line 563 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.This;
			}
#line default
        break;
      case 118: // arglist -> arglist, COMMA, argument
#line 569 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = ValueStack[ValueStack.Depth-3].ArgumentList;
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 119: // arglist -> argument
#line 574 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = new List<Argument>();
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 120: // argument -> expression
#line 581 "Psi.y"
   {
				CurrentSemanticValue.Argument = new PositionalArgument(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 121: // argument -> identifier, COLON, expression
#line 585 "Psi.y"
   {
				CurrentSemanticValue.Argument = new NamedArgument(ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 122: // exprlist -> expression
#line 591 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = new List<Expression>();
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 123: // exprlist -> exprlist, COMMA, expression
#line 596 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = ValueStack[ValueStack.Depth-3].ExpressionList;
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 124: // block -> CURLY_O, stmtlist, CURLY_C
#line 603 "Psi.y"
   {
				CurrentSemanticValue.Statement = new Block(ValueStack[ValueStack.Depth-2].StatementList);
			}
#line default
        break;
      case 125: // block -> CURLY_O, CURLY_C
#line 607 "Psi.y"
   {
				CurrentSemanticValue.Statement = new Block(new List<Statement>());
			}
#line default
        break;
      case 126: // stmtlist -> /* empty */
#line 613 "Psi.y"
   {
				CurrentSemanticValue.StatementList = new List<Statement>();
			}
#line default
        break;
      case 127: // stmtlist -> stmtlist, statement
#line 617 "Psi.y"
   {
				CurrentSemanticValue.StatementList = ValueStack[ValueStack.Depth-2].StatementList;
				CurrentSemanticValue.StatementList.Add(ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 128: // statement -> declaration
#line 624 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Declaration;
			}
#line default
        break;
      case 129: // statement -> assertion
#line 628 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Assertion;
			}
#line default
        break;
      case 130: // statement -> block
#line 632 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Statement;
			}
#line default
        break;
      case 131: // statement -> BREAK, TERMINATOR
#line 636 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Break);
			}
#line default
        break;
      case 132: // statement -> NEXT, TERMINATOR
#line 640 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Next);
			}
#line default
        break;
      case 133: // statement -> CONTINUE, TERMINATOR
#line 644 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Continue);
			}
#line default
        break;
      case 134: // statement -> ERROR, expression, TERMINATOR
#line 648 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Error, ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 135: // statement -> RETURN, expression, TERMINATOR
#line 652 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Return, ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 136: // statement -> RETURN, TERMINATOR
#line 656 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Return);
			}
#line default
        break;
      case 137: // statement -> GOTO, expression, TERMINATOR
#line 660 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Goto, ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 138: // statement -> IF, ROUND_O, expression, ROUND_C, statement, ELSE, statement
#line 664 "Psi.y"
   {
				CurrentSemanticValue.Statement = new IfElseStatement(ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-3].Statement, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 139: // statement -> IF, ROUND_O, expression, ROUND_C, statement
#line 668 "Psi.y"
   {
				CurrentSemanticValue.Statement = new IfElseStatement(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement, null);
			}
#line default
        break;
      case 140: // statement -> WHILE, ROUND_O, expression, ROUND_C, statement
#line 672 "Psi.y"
   {
				CurrentSemanticValue.Statement = new WhileLoopStatement(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 141: // statement -> LOOP, statement, UNTIL, ROUND_O, expression, ROUND_C, TERMINATOR
#line 676 "Psi.y"
   {
				CurrentSemanticValue.Statement = new LoopUntilStatement(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-6].Statement);
			}
#line default
        break;
      case 142: // statement -> RESTRICT, ROUND_O, exprlist, ROUND_C, statement
#line 680 "Psi.y"
   {
				CurrentSemanticValue.Statement = new RestrictStatement(ValueStack[ValueStack.Depth-3].ExpressionList, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 143: // statement -> FOR, ROUND_O, identifier, IN, expression, ROUND_C, statement
#line 684 "Psi.y"
   {
				CurrentSemanticValue.Statement = new ForLoopStatement(ValueStack[ValueStack.Depth-5].String, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 144: // statement -> SELECT, ROUND_O, expression, ROUND_C, CURLY_O, options, CURLY_C
#line 688 "Psi.y"
   {
				CurrentSemanticValue.Statement = new SelectStatement(ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-2].SelectOptions);
			}
#line default
        break;
      case 145: // statement -> expression, TERMINATOR
#line 692 "Psi.y"
   {
				CurrentSemanticValue.Statement = new ExpressionStatement(ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 146: // statement -> TERMINATOR
#line 696 "Psi.y"
   {
				CurrentSemanticValue.Statement = Statement.Null;
			}
#line default
        break;
      case 147: // options -> /* empty */
#line 702 "Psi.y"
   {
				CurrentSemanticValue.SelectOptions = new List<SelectOption>();
			}
#line default
        break;
      case 148: // options -> options, WHEN, expression, COLON, stmtlist
#line 706 "Psi.y"
   {
				CurrentSemanticValue.SelectOptions = ValueStack[ValueStack.Depth-5].SelectOptions;
				CurrentSemanticValue.SelectOptions.Add(new SelectOption(ValueStack[ValueStack.Depth-3].Expression, new Block(ValueStack[ValueStack.Depth-1].StatementList)));
			}
#line default
        break;
      case 149: // options -> options, OTHERWISE, COLON, stmtlist
#line 711 "Psi.y"
   {
				CurrentSemanticValue.SelectOptions = ValueStack[ValueStack.Depth-4].SelectOptions;
				CurrentSemanticValue.SelectOptions.Add(new SelectOption(new Block(ValueStack[ValueStack.Depth-1].StatementList)));
			}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((PsiTokenType)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((PsiTokenType)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 761 "Psi.y"
public PsiParser(PsiLexer lexer) : base(lexer) 
{ 
	
}

public Module Result => this.CurrentSemanticValue.Module;

public static Expression TypeDeclaration { get; } = new VariableReference("<type>");

public static Expression Undefined { get; } = new VariableReference("<?>");

public static Expression Void { get; } = new VariableReference("<void>");

private static Expression Apply(Expression lhs, Expression rhs, PsiOperator op)
{
	return new BinaryOperation(op, lhs, rhs);
}

private static Expression Apply(Expression expr, PsiOperator op)
{
	return new UnaryOperation(op, expr);
}

private static Expression ApplyDot(Expression exp, string field)
{
	return new DotExpression(exp, field);
}

private static Expression ApplyMeta(Expression exp, string field)
{
	return new MetaExpression(exp, field);
}
#line default
}
}
