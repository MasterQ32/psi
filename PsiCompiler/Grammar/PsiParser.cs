// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-2U3VU0H
// DateTime: 17.10.2017 09:29:35
// UserName: Felix
// Input file <Psi.y - 17.10.2017 09:28:51>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace PsiCompiler.Grammar
{
public enum PsiTokenType {error=2,EOF=3,CURLY_O=4,CURLY_C=5,ROUND_O=6,
    ROUND_C=7,POINTY_O=8,POINTY_C=9,SQUARE_O=10,SQUARE_C=11,IMPORT=12,
    EXPORT=13,MODULE=14,ASSERT=15,ERROR=16,CONST=17,VAR=18,
    TYPE=19,FN=20,NEW=21,OPERATOR=22,ENUM=23,RECORD=24,
    OPTION=25,INOUT=26,IN=27,OUT=28,THIS=29,FOR=30,
    WHILE=31,LOOP=32,UNTIL=33,IF=34,ELSE=35,SELECT=36,
    WHEN=37,OTHERWISE=38,RESTRICT=39,BREAK=40,CONTINUE=41,NEXT=42,
    RETURN=43,GOTO=44,MAPSTO=45,COMMA=46,TERMINATOR=47,COLON=48,
    LAMBDA=49,PLUS=50,MINUS=51,MULT=52,DIV=53,AND=54,
    OR=55,INVERT=56,XOR=57,CONCAT=58,DOT=59,META=60,
    EXP=61,MOD=62,FORWARD=63,BACKWARD=64,LEQUAL=65,GEQUAL=66,
    EQUAL=67,NEQUAL=68,LESS=69,MORE=70,IS=71,ASSIGN=72,
    ASR=73,SHL=74,SHR=75,WB_PLUS=76,WB_MINUS=77,WB_MULT=78,
    WB_DIV=79,WB_AND=80,WB_OR=81,WB_INVERT=82,WB_XOR=83,WB_CONCAT=84,
    WB_EXP=85,WB_MOD=86,WB_ASR=87,WB_SHL=88,WB_SHR=89,NUMBER=90,
    STRING=91,ENUMVAL=92,IDENT=93,Comment=94,LongComment=95,Whitespace=96,
    UMINUS=97,UPLUS=98,UINVERT=99};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class PsiParser: ShiftReduceParser<ParserNode, LexLocation>
{
  // Verbatim content from Psi.y - 17.10.2017 09:28:51
#line 2 "Psi.y"
    Dictionary<string,int> regs = new Dictionary<string,int>();
#line default
  // End verbatim content from Psi.y - 17.10.2017 09:28:51

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[124];
  private static State[] states = new State[194];
  private static string[] nonTerms = new string[] {
      "program", "identifier", "module", "modname", "assertion", "type", "expression", 
      "expr_or", "expr_xor", "expr_and", "equality", "comparison", "expr_arrows", 
      "sum", "term", "expo", "shifting", "unary", "value", "exprlist", "declaration", 
      "typedecl", "vardecl", "export", "storage", "arglist", "argument", "$accept", 
      "terminator", };

  static PsiParser() {
    states[0] = new State(-2,new int[]{-1,1});
    states[1] = new State(new int[]{3,2,15,6,13,185,14,186,19,-21,17,-21,18,-21},new int[]{-5,3,-21,4,-3,5,-24,162});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(-5);
    states[6] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-7,7,-8,152,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[7] = new State(new int[]{47,8,71,9,72,76,84,103,76,119,77,128,85,130,78,132,86,134,79,136,80,138,81,140,82,142,83,144,87,146,88,148,89,150});
    states[8] = new State(-6);
    states[9] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,10,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[10] = new State(new int[]{55,11,47,-23,71,-23,72,-23,84,-23,76,-23,77,-23,85,-23,78,-23,86,-23,79,-23,80,-23,81,-23,82,-23,83,-23,87,-23,88,-23,89,-23,11,-23,46,-23,7,-23,3,-23,15,-23,13,-23,14,-23,19,-23,17,-23,18,-23,5,-23});
    states[11] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-9,12,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[12] = new State(new int[]{57,13,55,-40,47,-40,71,-40,72,-40,84,-40,76,-40,77,-40,85,-40,78,-40,86,-40,79,-40,80,-40,81,-40,82,-40,83,-40,87,-40,88,-40,89,-40,11,-40,46,-40,7,-40,3,-40,15,-40,13,-40,14,-40,19,-40,17,-40,18,-40,5,-40});
    states[13] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-10,14,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[14] = new State(new int[]{54,15,57,-42,55,-42,47,-42,71,-42,72,-42,84,-42,76,-42,77,-42,85,-42,78,-42,86,-42,79,-42,80,-42,81,-42,82,-42,83,-42,87,-42,88,-42,89,-42,11,-42,46,-42,7,-42,3,-42,15,-42,13,-42,14,-42,19,-42,17,-42,18,-42,5,-42});
    states[15] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-11,16,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[16] = new State(new int[]{67,17,68,81,54,-44,57,-44,55,-44,47,-44,71,-44,72,-44,84,-44,76,-44,77,-44,85,-44,78,-44,86,-44,79,-44,80,-44,81,-44,82,-44,83,-44,87,-44,88,-44,89,-44,11,-44,46,-44,7,-44,3,-44,15,-44,13,-44,14,-44,19,-44,17,-44,18,-44,5,-44});
    states[17] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-12,18,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[18] = new State(new int[]{65,19,66,83,69,106,70,153,67,-46,68,-46,54,-46,57,-46,55,-46,47,-46,71,-46,72,-46,84,-46,76,-46,77,-46,85,-46,78,-46,86,-46,79,-46,80,-46,81,-46,82,-46,83,-46,87,-46,88,-46,89,-46,11,-46,46,-46,7,-46,3,-46,15,-46,13,-46,14,-46,19,-46,17,-46,18,-46,5,-46});
    states[19] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-13,20,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[20] = new State(new int[]{63,21,64,85,65,-49,66,-49,69,-49,70,-49,67,-49,68,-49,54,-49,57,-49,55,-49,47,-49,71,-49,72,-49,84,-49,76,-49,77,-49,85,-49,78,-49,86,-49,79,-49,80,-49,81,-49,82,-49,83,-49,87,-49,88,-49,89,-49,11,-49,46,-49,7,-49,3,-49,15,-49,13,-49,14,-49,19,-49,17,-49,18,-49,5,-49});
    states[21] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-14,22,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[22] = new State(new int[]{50,23,51,87,58,109,63,-54,64,-54,65,-54,66,-54,69,-54,70,-54,67,-54,68,-54,54,-54,57,-54,55,-54,47,-54,71,-54,72,-54,84,-54,76,-54,77,-54,85,-54,78,-54,86,-54,79,-54,80,-54,81,-54,82,-54,83,-54,87,-54,88,-54,89,-54,11,-54,46,-54,7,-54,3,-54,15,-54,13,-54,14,-54,19,-54,17,-54,18,-54,5,-54});
    states[23] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-15,24,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[24] = new State(new int[]{52,25,53,89,62,111,50,-57,51,-57,58,-57,63,-57,64,-57,65,-57,66,-57,69,-57,70,-57,67,-57,68,-57,54,-57,57,-57,55,-57,47,-57,71,-57,72,-57,84,-57,76,-57,77,-57,85,-57,78,-57,86,-57,79,-57,80,-57,81,-57,82,-57,83,-57,87,-57,88,-57,89,-57,11,-57,46,-57,7,-57,3,-57,15,-57,13,-57,14,-57,19,-57,17,-57,18,-57,5,-57});
    states[25] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-16,26,-17,91,-18,113,-19,124,-2,125});
    states[26] = new State(new int[]{61,27,52,-61,53,-61,62,-61,50,-61,51,-61,58,-61,63,-61,64,-61,65,-61,66,-61,69,-61,70,-61,67,-61,68,-61,54,-61,57,-61,55,-61,47,-61,71,-61,72,-61,84,-61,76,-61,77,-61,85,-61,78,-61,86,-61,79,-61,80,-61,81,-61,82,-61,83,-61,87,-61,88,-61,89,-61,11,-61,46,-61,7,-61,3,-61,15,-61,13,-61,14,-61,19,-61,17,-61,18,-61,5,-61});
    states[27] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-17,28,-18,113,-19,124,-2,125});
    states[28] = new State(new int[]{73,29,75,92,74,159,61,-65,52,-65,53,-65,62,-65,50,-65,51,-65,58,-65,63,-65,64,-65,65,-65,66,-65,69,-65,70,-65,67,-65,68,-65,54,-65,57,-65,55,-65,47,-65,71,-65,72,-65,84,-65,76,-65,77,-65,85,-65,78,-65,86,-65,79,-65,80,-65,81,-65,82,-65,83,-65,87,-65,88,-65,89,-65,11,-65,46,-65,7,-65,3,-65,15,-65,13,-65,14,-65,19,-65,17,-65,18,-65,5,-65});
    states[29] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-18,30,-19,124,-2,125});
    states[30] = new State(-67);
    states[31] = new State(new int[]{6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-19,32,-2,125});
    states[32] = new State(new int[]{59,33,60,69,10,71,6,96,73,-71,75,-71,74,-71,61,-71,52,-71,53,-71,62,-71,50,-71,51,-71,58,-71,63,-71,64,-71,65,-71,66,-71,69,-71,70,-71,67,-71,68,-71,54,-71,57,-71,55,-71,47,-71,71,-71,72,-71,84,-71,76,-71,77,-71,85,-71,78,-71,86,-71,79,-71,80,-71,81,-71,82,-71,83,-71,87,-71,88,-71,89,-71,11,-71,46,-71,7,-71,3,-71,15,-71,13,-71,14,-71,19,-71,17,-71,18,-71,5,-71});
    states[33] = new State(new int[]{93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68},new int[]{-2,34});
    states[34] = new State(-75);
    states[35] = new State(-90);
    states[36] = new State(-91);
    states[37] = new State(-92);
    states[38] = new State(-93);
    states[39] = new State(-94);
    states[40] = new State(-95);
    states[41] = new State(-96);
    states[42] = new State(-97);
    states[43] = new State(-98);
    states[44] = new State(-99);
    states[45] = new State(-100);
    states[46] = new State(-101);
    states[47] = new State(-102);
    states[48] = new State(-103);
    states[49] = new State(-104);
    states[50] = new State(-105);
    states[51] = new State(-106);
    states[52] = new State(-107);
    states[53] = new State(-108);
    states[54] = new State(-109);
    states[55] = new State(-110);
    states[56] = new State(-111);
    states[57] = new State(-112);
    states[58] = new State(-113);
    states[59] = new State(-114);
    states[60] = new State(-115);
    states[61] = new State(-116);
    states[62] = new State(-117);
    states[63] = new State(-118);
    states[64] = new State(-119);
    states[65] = new State(-120);
    states[66] = new State(-121);
    states[67] = new State(-122);
    states[68] = new State(-123);
    states[69] = new State(new int[]{93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68},new int[]{-2,70});
    states[70] = new State(-76);
    states[71] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-20,72,-7,161,-8,152,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[72] = new State(new int[]{11,73,46,74});
    states[73] = new State(-77);
    states[74] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-7,75,-8,152,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[75] = new State(new int[]{71,9,72,76,84,103,76,119,77,128,85,130,78,132,86,134,79,136,80,138,81,140,82,142,83,144,87,146,88,148,89,150,11,-89,46,-89});
    states[76] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,77,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[77] = new State(new int[]{55,11,47,-24,71,-24,72,-24,84,-24,76,-24,77,-24,85,-24,78,-24,86,-24,79,-24,80,-24,81,-24,82,-24,83,-24,87,-24,88,-24,89,-24,11,-24,46,-24,7,-24,3,-24,15,-24,13,-24,14,-24,19,-24,17,-24,18,-24,5,-24});
    states[78] = new State(new int[]{57,13,55,-41,47,-41,71,-41,72,-41,84,-41,76,-41,77,-41,85,-41,78,-41,86,-41,79,-41,80,-41,81,-41,82,-41,83,-41,87,-41,88,-41,89,-41,11,-41,46,-41,7,-41,3,-41,15,-41,13,-41,14,-41,19,-41,17,-41,18,-41,5,-41});
    states[79] = new State(new int[]{54,15,57,-43,55,-43,47,-43,71,-43,72,-43,84,-43,76,-43,77,-43,85,-43,78,-43,86,-43,79,-43,80,-43,81,-43,82,-43,83,-43,87,-43,88,-43,89,-43,11,-43,46,-43,7,-43,3,-43,15,-43,13,-43,14,-43,19,-43,17,-43,18,-43,5,-43});
    states[80] = new State(new int[]{67,17,68,81,54,-45,57,-45,55,-45,47,-45,71,-45,72,-45,84,-45,76,-45,77,-45,85,-45,78,-45,86,-45,79,-45,80,-45,81,-45,82,-45,83,-45,87,-45,88,-45,89,-45,11,-45,46,-45,7,-45,3,-45,15,-45,13,-45,14,-45,19,-45,17,-45,18,-45,5,-45});
    states[81] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-12,82,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[82] = new State(new int[]{65,19,66,83,69,106,70,153,67,-47,68,-47,54,-47,57,-47,55,-47,47,-47,71,-47,72,-47,84,-47,76,-47,77,-47,85,-47,78,-47,86,-47,79,-47,80,-47,81,-47,82,-47,83,-47,87,-47,88,-47,89,-47,11,-47,46,-47,7,-47,3,-47,15,-47,13,-47,14,-47,19,-47,17,-47,18,-47,5,-47});
    states[83] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-13,84,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[84] = new State(new int[]{63,21,64,85,65,-50,66,-50,69,-50,70,-50,67,-50,68,-50,54,-50,57,-50,55,-50,47,-50,71,-50,72,-50,84,-50,76,-50,77,-50,85,-50,78,-50,86,-50,79,-50,80,-50,81,-50,82,-50,83,-50,87,-50,88,-50,89,-50,11,-50,46,-50,7,-50,3,-50,15,-50,13,-50,14,-50,19,-50,17,-50,18,-50,5,-50});
    states[85] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-14,86,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[86] = new State(new int[]{50,23,51,87,58,109,63,-55,64,-55,65,-55,66,-55,69,-55,70,-55,67,-55,68,-55,54,-55,57,-55,55,-55,47,-55,71,-55,72,-55,84,-55,76,-55,77,-55,85,-55,78,-55,86,-55,79,-55,80,-55,81,-55,82,-55,83,-55,87,-55,88,-55,89,-55,11,-55,46,-55,7,-55,3,-55,15,-55,13,-55,14,-55,19,-55,17,-55,18,-55,5,-55});
    states[87] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-15,88,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[88] = new State(new int[]{52,25,53,89,62,111,50,-58,51,-58,58,-58,63,-58,64,-58,65,-58,66,-58,69,-58,70,-58,67,-58,68,-58,54,-58,57,-58,55,-58,47,-58,71,-58,72,-58,84,-58,76,-58,77,-58,85,-58,78,-58,86,-58,79,-58,80,-58,81,-58,82,-58,83,-58,87,-58,88,-58,89,-58,11,-58,46,-58,7,-58,3,-58,15,-58,13,-58,14,-58,19,-58,17,-58,18,-58,5,-58});
    states[89] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-16,90,-17,91,-18,113,-19,124,-2,125});
    states[90] = new State(new int[]{61,27,52,-62,53,-62,62,-62,50,-62,51,-62,58,-62,63,-62,64,-62,65,-62,66,-62,69,-62,70,-62,67,-62,68,-62,54,-62,57,-62,55,-62,47,-62,71,-62,72,-62,84,-62,76,-62,77,-62,85,-62,78,-62,86,-62,79,-62,80,-62,81,-62,82,-62,83,-62,87,-62,88,-62,89,-62,11,-62,46,-62,7,-62,3,-62,15,-62,13,-62,14,-62,19,-62,17,-62,18,-62,5,-62});
    states[91] = new State(new int[]{73,29,75,92,74,159,61,-66,52,-66,53,-66,62,-66,50,-66,51,-66,58,-66,63,-66,64,-66,65,-66,66,-66,69,-66,70,-66,67,-66,68,-66,54,-66,57,-66,55,-66,47,-66,71,-66,72,-66,84,-66,76,-66,77,-66,85,-66,78,-66,86,-66,79,-66,80,-66,81,-66,82,-66,83,-66,87,-66,88,-66,89,-66,11,-66,46,-66,7,-66,3,-66,15,-66,13,-66,14,-66,19,-66,17,-66,18,-66,5,-66});
    states[92] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-18,93,-19,124,-2,125});
    states[93] = new State(-68);
    states[94] = new State(new int[]{6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-19,95,-2,125});
    states[95] = new State(new int[]{59,33,60,69,10,71,6,96,73,-72,75,-72,74,-72,61,-72,52,-72,53,-72,62,-72,50,-72,51,-72,58,-72,63,-72,64,-72,65,-72,66,-72,69,-72,70,-72,67,-72,68,-72,54,-72,57,-72,55,-72,47,-72,71,-72,72,-72,84,-72,76,-72,77,-72,85,-72,78,-72,86,-72,79,-72,80,-72,81,-72,82,-72,83,-72,87,-72,88,-72,89,-72,11,-72,46,-72,7,-72,3,-72,15,-72,13,-72,14,-72,19,-72,17,-72,18,-72,5,-72});
    states[96] = new State(new int[]{7,97,50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-26,98,-27,158,-7,102,-8,152,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,155});
    states[97] = new State(-78);
    states[98] = new State(new int[]{7,99,46,100});
    states[99] = new State(-79);
    states[100] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-27,101,-7,102,-8,152,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,155});
    states[101] = new State(-84);
    states[102] = new State(new int[]{71,9,72,76,84,103,76,119,77,128,85,130,78,132,86,134,79,136,80,138,81,140,82,142,83,144,87,146,88,148,89,150,7,-86,46,-86});
    states[103] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,104,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[104] = new State(new int[]{55,11,47,-25,71,-25,72,-25,84,-25,76,-25,77,-25,85,-25,78,-25,86,-25,79,-25,80,-25,81,-25,82,-25,83,-25,87,-25,88,-25,89,-25,11,-25,46,-25,7,-25,3,-25,15,-25,13,-25,14,-25,19,-25,17,-25,18,-25,5,-25});
    states[105] = new State(new int[]{65,19,66,83,69,106,70,153,67,-48,68,-48,54,-48,57,-48,55,-48,47,-48,71,-48,72,-48,84,-48,76,-48,77,-48,85,-48,78,-48,86,-48,79,-48,80,-48,81,-48,82,-48,83,-48,87,-48,88,-48,89,-48,11,-48,46,-48,7,-48,3,-48,15,-48,13,-48,14,-48,19,-48,17,-48,18,-48,5,-48});
    states[106] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-13,107,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[107] = new State(new int[]{63,21,64,85,65,-51,66,-51,69,-51,70,-51,67,-51,68,-51,54,-51,57,-51,55,-51,47,-51,71,-51,72,-51,84,-51,76,-51,77,-51,85,-51,78,-51,86,-51,79,-51,80,-51,81,-51,82,-51,83,-51,87,-51,88,-51,89,-51,11,-51,46,-51,7,-51,3,-51,15,-51,13,-51,14,-51,19,-51,17,-51,18,-51,5,-51});
    states[108] = new State(new int[]{50,23,51,87,58,109,63,-56,64,-56,65,-56,66,-56,69,-56,70,-56,67,-56,68,-56,54,-56,57,-56,55,-56,47,-56,71,-56,72,-56,84,-56,76,-56,77,-56,85,-56,78,-56,86,-56,79,-56,80,-56,81,-56,82,-56,83,-56,87,-56,88,-56,89,-56,11,-56,46,-56,7,-56,3,-56,15,-56,13,-56,14,-56,19,-56,17,-56,18,-56,5,-56});
    states[109] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-15,110,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[110] = new State(new int[]{52,25,53,89,62,111,50,-59,51,-59,58,-59,63,-59,64,-59,65,-59,66,-59,69,-59,70,-59,67,-59,68,-59,54,-59,57,-59,55,-59,47,-59,71,-59,72,-59,84,-59,76,-59,77,-59,85,-59,78,-59,86,-59,79,-59,80,-59,81,-59,82,-59,83,-59,87,-59,88,-59,89,-59,11,-59,46,-59,7,-59,3,-59,15,-59,13,-59,14,-59,19,-59,17,-59,18,-59,5,-59});
    states[111] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-16,112,-17,91,-18,113,-19,124,-2,125});
    states[112] = new State(new int[]{61,27,52,-63,53,-63,62,-63,50,-63,51,-63,58,-63,63,-63,64,-63,65,-63,66,-63,69,-63,70,-63,67,-63,68,-63,54,-63,57,-63,55,-63,47,-63,71,-63,72,-63,84,-63,76,-63,77,-63,85,-63,78,-63,86,-63,79,-63,80,-63,81,-63,82,-63,83,-63,87,-63,88,-63,89,-63,11,-63,46,-63,7,-63,3,-63,15,-63,13,-63,14,-63,19,-63,17,-63,18,-63,5,-63});
    states[113] = new State(-70);
    states[114] = new State(new int[]{6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-19,115,-2,125});
    states[115] = new State(new int[]{59,33,60,69,10,71,6,96,73,-73,75,-73,74,-73,61,-73,52,-73,53,-73,62,-73,50,-73,51,-73,58,-73,63,-73,64,-73,65,-73,66,-73,69,-73,70,-73,67,-73,68,-73,54,-73,57,-73,55,-73,47,-73,71,-73,72,-73,84,-73,76,-73,77,-73,85,-73,78,-73,86,-73,79,-73,80,-73,81,-73,82,-73,83,-73,87,-73,88,-73,89,-73,11,-73,46,-73,7,-73,3,-73,15,-73,13,-73,14,-73,19,-73,17,-73,18,-73,5,-73});
    states[116] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-7,117,-8,152,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[117] = new State(new int[]{7,118,71,9,72,76,84,103,76,119,77,128,85,130,78,132,86,134,79,136,80,138,81,140,82,142,83,144,87,146,88,148,89,150});
    states[118] = new State(-80);
    states[119] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,120,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[120] = new State(new int[]{55,11,47,-26,71,-26,72,-26,84,-26,76,-26,77,-26,85,-26,78,-26,86,-26,79,-26,80,-26,81,-26,82,-26,83,-26,87,-26,88,-26,89,-26,11,-26,46,-26,7,-26,3,-26,15,-26,13,-26,14,-26,19,-26,17,-26,18,-26,5,-26});
    states[121] = new State(new int[]{63,21,64,85,65,-53,66,-53,69,-53,70,-53,67,-53,68,-53,54,-53,57,-53,55,-53,47,-53,71,-53,72,-53,84,-53,76,-53,77,-53,85,-53,78,-53,86,-53,79,-53,80,-53,81,-53,82,-53,83,-53,87,-53,88,-53,89,-53,11,-53,46,-53,7,-53,3,-53,15,-53,13,-53,14,-53,19,-53,17,-53,18,-53,5,-53});
    states[122] = new State(new int[]{52,25,53,89,62,111,50,-60,51,-60,58,-60,63,-60,64,-60,65,-60,66,-60,69,-60,70,-60,67,-60,68,-60,54,-60,57,-60,55,-60,47,-60,71,-60,72,-60,84,-60,76,-60,77,-60,85,-60,78,-60,86,-60,79,-60,80,-60,81,-60,82,-60,83,-60,87,-60,88,-60,89,-60,11,-60,46,-60,7,-60,3,-60,15,-60,13,-60,14,-60,19,-60,17,-60,18,-60,5,-60});
    states[123] = new State(new int[]{61,27,52,-64,53,-64,62,-64,50,-64,51,-64,58,-64,63,-64,64,-64,65,-64,66,-64,69,-64,70,-64,67,-64,68,-64,54,-64,57,-64,55,-64,47,-64,71,-64,72,-64,84,-64,76,-64,77,-64,85,-64,78,-64,86,-64,79,-64,80,-64,81,-64,82,-64,83,-64,87,-64,88,-64,89,-64,11,-64,46,-64,7,-64,3,-64,15,-64,13,-64,14,-64,19,-64,17,-64,18,-64,5,-64});
    states[124] = new State(new int[]{59,33,60,69,10,71,6,96,73,-74,75,-74,74,-74,61,-74,52,-74,53,-74,62,-74,50,-74,51,-74,58,-74,63,-74,64,-74,65,-74,66,-74,69,-74,70,-74,67,-74,68,-74,54,-74,57,-74,55,-74,47,-74,71,-74,72,-74,84,-74,76,-74,77,-74,85,-74,78,-74,86,-74,79,-74,80,-74,81,-74,82,-74,83,-74,87,-74,88,-74,89,-74,11,-74,46,-74,7,-74,3,-74,15,-74,13,-74,14,-74,19,-74,17,-74,18,-74,5,-74});
    states[125] = new State(-81);
    states[126] = new State(-82);
    states[127] = new State(-83);
    states[128] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,129,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[129] = new State(new int[]{55,11,47,-27,71,-27,72,-27,84,-27,76,-27,77,-27,85,-27,78,-27,86,-27,79,-27,80,-27,81,-27,82,-27,83,-27,87,-27,88,-27,89,-27,11,-27,46,-27,7,-27,3,-27,15,-27,13,-27,14,-27,19,-27,17,-27,18,-27,5,-27});
    states[130] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,131,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[131] = new State(new int[]{55,11,47,-28,71,-28,72,-28,84,-28,76,-28,77,-28,85,-28,78,-28,86,-28,79,-28,80,-28,81,-28,82,-28,83,-28,87,-28,88,-28,89,-28,11,-28,46,-28,7,-28,3,-28,15,-28,13,-28,14,-28,19,-28,17,-28,18,-28,5,-28});
    states[132] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,133,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[133] = new State(new int[]{55,11,47,-29,71,-29,72,-29,84,-29,76,-29,77,-29,85,-29,78,-29,86,-29,79,-29,80,-29,81,-29,82,-29,83,-29,87,-29,88,-29,89,-29,11,-29,46,-29,7,-29,3,-29,15,-29,13,-29,14,-29,19,-29,17,-29,18,-29,5,-29});
    states[134] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,135,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[135] = new State(new int[]{55,11,47,-30,71,-30,72,-30,84,-30,76,-30,77,-30,85,-30,78,-30,86,-30,79,-30,80,-30,81,-30,82,-30,83,-30,87,-30,88,-30,89,-30,11,-30,46,-30,7,-30,3,-30,15,-30,13,-30,14,-30,19,-30,17,-30,18,-30,5,-30});
    states[136] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,137,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[137] = new State(new int[]{55,11,47,-31,71,-31,72,-31,84,-31,76,-31,77,-31,85,-31,78,-31,86,-31,79,-31,80,-31,81,-31,82,-31,83,-31,87,-31,88,-31,89,-31,11,-31,46,-31,7,-31,3,-31,15,-31,13,-31,14,-31,19,-31,17,-31,18,-31,5,-31});
    states[138] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,139,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[139] = new State(new int[]{55,11,47,-32,71,-32,72,-32,84,-32,76,-32,77,-32,85,-32,78,-32,86,-32,79,-32,80,-32,81,-32,82,-32,83,-32,87,-32,88,-32,89,-32,11,-32,46,-32,7,-32,3,-32,15,-32,13,-32,14,-32,19,-32,17,-32,18,-32,5,-32});
    states[140] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,141,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[141] = new State(new int[]{55,11,47,-33,71,-33,72,-33,84,-33,76,-33,77,-33,85,-33,78,-33,86,-33,79,-33,80,-33,81,-33,82,-33,83,-33,87,-33,88,-33,89,-33,11,-33,46,-33,7,-33,3,-33,15,-33,13,-33,14,-33,19,-33,17,-33,18,-33,5,-33});
    states[142] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,143,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[143] = new State(new int[]{55,11,47,-34,71,-34,72,-34,84,-34,76,-34,77,-34,85,-34,78,-34,86,-34,79,-34,80,-34,81,-34,82,-34,83,-34,87,-34,88,-34,89,-34,11,-34,46,-34,7,-34,3,-34,15,-34,13,-34,14,-34,19,-34,17,-34,18,-34,5,-34});
    states[144] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,145,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[145] = new State(new int[]{55,11,47,-35,71,-35,72,-35,84,-35,76,-35,77,-35,85,-35,78,-35,86,-35,79,-35,80,-35,81,-35,82,-35,83,-35,87,-35,88,-35,89,-35,11,-35,46,-35,7,-35,3,-35,15,-35,13,-35,14,-35,19,-35,17,-35,18,-35,5,-35});
    states[146] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,147,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[147] = new State(new int[]{55,11,47,-36,71,-36,72,-36,84,-36,76,-36,77,-36,85,-36,78,-36,86,-36,79,-36,80,-36,81,-36,82,-36,83,-36,87,-36,88,-36,89,-36,11,-36,46,-36,7,-36,3,-36,15,-36,13,-36,14,-36,19,-36,17,-36,18,-36,5,-36});
    states[148] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,149,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[149] = new State(new int[]{55,11,47,-37,71,-37,72,-37,84,-37,76,-37,77,-37,85,-37,78,-37,86,-37,79,-37,80,-37,81,-37,82,-37,83,-37,87,-37,88,-37,89,-37,11,-37,46,-37,7,-37,3,-37,15,-37,13,-37,14,-37,19,-37,17,-37,18,-37,5,-37});
    states[150] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-8,151,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[151] = new State(new int[]{55,11,47,-38,71,-38,72,-38,84,-38,76,-38,77,-38,85,-38,78,-38,86,-38,79,-38,80,-38,81,-38,82,-38,83,-38,87,-38,88,-38,89,-38,11,-38,46,-38,7,-38,3,-38,15,-38,13,-38,14,-38,19,-38,17,-38,18,-38,5,-38});
    states[152] = new State(new int[]{55,11,47,-39,71,-39,72,-39,84,-39,76,-39,77,-39,85,-39,78,-39,86,-39,79,-39,80,-39,81,-39,82,-39,83,-39,87,-39,88,-39,89,-39,11,-39,46,-39,7,-39,3,-39,15,-39,13,-39,14,-39,19,-39,17,-39,18,-39,5,-39});
    states[153] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-13,154,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[154] = new State(new int[]{63,21,64,85,65,-52,66,-52,69,-52,70,-52,67,-52,68,-52,54,-52,57,-52,55,-52,47,-52,71,-52,72,-52,84,-52,76,-52,77,-52,85,-52,78,-52,86,-52,79,-52,80,-52,81,-52,82,-52,83,-52,87,-52,88,-52,89,-52,11,-52,46,-52,7,-52,3,-52,15,-52,13,-52,14,-52,19,-52,17,-52,18,-52,5,-52});
    states[155] = new State(new int[]{48,156,59,-81,60,-81,10,-81,6,-81,73,-81,75,-81,74,-81,61,-81,52,-81,53,-81,62,-81,50,-81,51,-81,58,-81,63,-81,64,-81,65,-81,66,-81,69,-81,70,-81,67,-81,68,-81,54,-81,57,-81,55,-81,71,-81,72,-81,84,-81,76,-81,77,-81,85,-81,78,-81,86,-81,79,-81,80,-81,81,-81,82,-81,83,-81,87,-81,88,-81,89,-81,7,-81,46,-81});
    states[156] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-7,157,-8,152,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[157] = new State(new int[]{71,9,72,76,84,103,76,119,77,128,85,130,78,132,86,134,79,136,80,138,81,140,82,142,83,144,87,146,88,148,89,150,7,-87,46,-87});
    states[158] = new State(-85);
    states[159] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-18,160,-19,124,-2,125});
    states[160] = new State(-69);
    states[161] = new State(new int[]{71,9,72,76,84,103,76,119,77,128,85,130,78,132,86,134,79,136,80,138,81,140,82,142,83,144,87,146,88,148,89,150,11,-88,46,-88});
    states[162] = new State(new int[]{19,165,17,183,18,184},new int[]{-22,163,-23,164,-25,170});
    states[163] = new State(-10);
    states[164] = new State(-11);
    states[165] = new State(new int[]{93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68},new int[]{-2,166});
    states[166] = new State(new int[]{71,167});
    states[167] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-7,168,-8,152,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[168] = new State(new int[]{47,169,71,9,72,76,84,103,76,119,77,128,85,130,78,132,86,134,79,136,80,138,81,140,82,142,83,144,87,146,88,148,89,150});
    states[169] = new State(-12);
    states[170] = new State(new int[]{93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68},new int[]{-2,171});
    states[171] = new State(new int[]{48,172,71,180});
    states[172] = new State(new int[]{6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-6,173,-19,179,-2,125});
    states[173] = new State(new int[]{71,175,47,178,3,-17,15,-17,13,-17,14,-17,19,-17,17,-17,18,-17,5,-17},new int[]{-29,174});
    states[174] = new State(-13);
    states[175] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-7,176,-8,152,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[176] = new State(new int[]{71,9,72,76,84,103,76,119,77,128,85,130,78,132,86,134,79,136,80,138,81,140,82,142,83,144,87,146,88,148,89,150,47,178,3,-17,15,-17,13,-17,14,-17,19,-17,17,-17,18,-17,5,-17},new int[]{-29,177});
    states[177] = new State(-15);
    states[178] = new State(-18);
    states[179] = new State(new int[]{59,33,60,69,10,71,6,96,71,-16,47,-16,3,-16,15,-16,13,-16,14,-16,19,-16,17,-16,18,-16,5,-16});
    states[180] = new State(new int[]{50,31,51,94,56,114,6,116,93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68,91,126,90,127},new int[]{-7,181,-8,152,-9,78,-10,79,-11,80,-12,105,-13,121,-14,108,-15,122,-16,123,-17,91,-18,113,-19,124,-2,125});
    states[181] = new State(new int[]{71,9,72,76,84,103,76,119,77,128,85,130,78,132,86,134,79,136,80,138,81,140,82,142,83,144,87,146,88,148,89,150,47,178,3,-17,15,-17,13,-17,14,-17,19,-17,17,-17,18,-17,5,-17},new int[]{-29,182});
    states[182] = new State(-14);
    states[183] = new State(-19);
    states[184] = new State(-20);
    states[185] = new State(-22);
    states[186] = new State(new int[]{93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68},new int[]{-4,187,-2,193});
    states[187] = new State(new int[]{4,188,59,191});
    states[188] = new State(-2,new int[]{-1,189});
    states[189] = new State(new int[]{5,190,15,6,13,185,14,186,19,-21,17,-21,18,-21},new int[]{-5,3,-21,4,-3,5,-24,162});
    states[190] = new State(-7);
    states[191] = new State(new int[]{93,35,12,36,13,37,14,38,15,39,16,40,17,41,18,42,19,43,20,44,21,45,22,46,23,47,24,48,25,49,26,50,27,51,28,52,29,53,30,54,31,55,32,56,33,57,34,58,35,59,36,60,37,61,38,62,39,63,40,64,41,65,42,66,43,67,44,68},new int[]{-2,192});
    states[192] = new State(-9);
    states[193] = new State(-8);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-28, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-1,-5});
    rules[4] = new Rule(-1, new int[]{-1,-21});
    rules[5] = new Rule(-1, new int[]{-1,-3});
    rules[6] = new Rule(-5, new int[]{15,-7,47});
    rules[7] = new Rule(-3, new int[]{14,-4,4,-1,5});
    rules[8] = new Rule(-4, new int[]{-2});
    rules[9] = new Rule(-4, new int[]{-4,59,-2});
    rules[10] = new Rule(-21, new int[]{-24,-22});
    rules[11] = new Rule(-21, new int[]{-24,-23});
    rules[12] = new Rule(-22, new int[]{19,-2,71,-7,47});
    rules[13] = new Rule(-23, new int[]{-25,-2,48,-6,-29});
    rules[14] = new Rule(-23, new int[]{-25,-2,71,-7,-29});
    rules[15] = new Rule(-23, new int[]{-25,-2,48,-6,71,-7,-29});
    rules[16] = new Rule(-6, new int[]{-19});
    rules[17] = new Rule(-29, new int[]{});
    rules[18] = new Rule(-29, new int[]{47});
    rules[19] = new Rule(-25, new int[]{17});
    rules[20] = new Rule(-25, new int[]{18});
    rules[21] = new Rule(-24, new int[]{});
    rules[22] = new Rule(-24, new int[]{13});
    rules[23] = new Rule(-7, new int[]{-7,71,-8});
    rules[24] = new Rule(-7, new int[]{-7,72,-8});
    rules[25] = new Rule(-7, new int[]{-7,84,-8});
    rules[26] = new Rule(-7, new int[]{-7,76,-8});
    rules[27] = new Rule(-7, new int[]{-7,77,-8});
    rules[28] = new Rule(-7, new int[]{-7,85,-8});
    rules[29] = new Rule(-7, new int[]{-7,78,-8});
    rules[30] = new Rule(-7, new int[]{-7,86,-8});
    rules[31] = new Rule(-7, new int[]{-7,79,-8});
    rules[32] = new Rule(-7, new int[]{-7,80,-8});
    rules[33] = new Rule(-7, new int[]{-7,81,-8});
    rules[34] = new Rule(-7, new int[]{-7,82,-8});
    rules[35] = new Rule(-7, new int[]{-7,83,-8});
    rules[36] = new Rule(-7, new int[]{-7,87,-8});
    rules[37] = new Rule(-7, new int[]{-7,88,-8});
    rules[38] = new Rule(-7, new int[]{-7,89,-8});
    rules[39] = new Rule(-7, new int[]{-8});
    rules[40] = new Rule(-8, new int[]{-8,55,-9});
    rules[41] = new Rule(-8, new int[]{-9});
    rules[42] = new Rule(-9, new int[]{-9,57,-10});
    rules[43] = new Rule(-9, new int[]{-10});
    rules[44] = new Rule(-10, new int[]{-10,54,-11});
    rules[45] = new Rule(-10, new int[]{-11});
    rules[46] = new Rule(-11, new int[]{-11,67,-12});
    rules[47] = new Rule(-11, new int[]{-11,68,-12});
    rules[48] = new Rule(-11, new int[]{-12});
    rules[49] = new Rule(-12, new int[]{-12,65,-13});
    rules[50] = new Rule(-12, new int[]{-12,66,-13});
    rules[51] = new Rule(-12, new int[]{-12,69,-13});
    rules[52] = new Rule(-12, new int[]{-12,70,-13});
    rules[53] = new Rule(-12, new int[]{-13});
    rules[54] = new Rule(-13, new int[]{-13,63,-14});
    rules[55] = new Rule(-13, new int[]{-13,64,-14});
    rules[56] = new Rule(-13, new int[]{-14});
    rules[57] = new Rule(-14, new int[]{-14,50,-15});
    rules[58] = new Rule(-14, new int[]{-14,51,-15});
    rules[59] = new Rule(-14, new int[]{-14,58,-15});
    rules[60] = new Rule(-14, new int[]{-15});
    rules[61] = new Rule(-15, new int[]{-15,52,-16});
    rules[62] = new Rule(-15, new int[]{-15,53,-16});
    rules[63] = new Rule(-15, new int[]{-15,62,-16});
    rules[64] = new Rule(-15, new int[]{-16});
    rules[65] = new Rule(-16, new int[]{-16,61,-17});
    rules[66] = new Rule(-16, new int[]{-17});
    rules[67] = new Rule(-17, new int[]{-17,73,-18});
    rules[68] = new Rule(-17, new int[]{-17,75,-18});
    rules[69] = new Rule(-17, new int[]{-17,74,-18});
    rules[70] = new Rule(-17, new int[]{-18});
    rules[71] = new Rule(-18, new int[]{50,-19});
    rules[72] = new Rule(-18, new int[]{51,-19});
    rules[73] = new Rule(-18, new int[]{56,-19});
    rules[74] = new Rule(-18, new int[]{-19});
    rules[75] = new Rule(-19, new int[]{-19,59,-2});
    rules[76] = new Rule(-19, new int[]{-19,60,-2});
    rules[77] = new Rule(-19, new int[]{-19,10,-20,11});
    rules[78] = new Rule(-19, new int[]{-19,6,7});
    rules[79] = new Rule(-19, new int[]{-19,6,-26,7});
    rules[80] = new Rule(-19, new int[]{6,-7,7});
    rules[81] = new Rule(-19, new int[]{-2});
    rules[82] = new Rule(-19, new int[]{91});
    rules[83] = new Rule(-19, new int[]{90});
    rules[84] = new Rule(-26, new int[]{-26,46,-27});
    rules[85] = new Rule(-26, new int[]{-27});
    rules[86] = new Rule(-27, new int[]{-7});
    rules[87] = new Rule(-27, new int[]{-2,48,-7});
    rules[88] = new Rule(-20, new int[]{-7});
    rules[89] = new Rule(-20, new int[]{-20,46,-7});
    rules[90] = new Rule(-2, new int[]{93});
    rules[91] = new Rule(-2, new int[]{12});
    rules[92] = new Rule(-2, new int[]{13});
    rules[93] = new Rule(-2, new int[]{14});
    rules[94] = new Rule(-2, new int[]{15});
    rules[95] = new Rule(-2, new int[]{16});
    rules[96] = new Rule(-2, new int[]{17});
    rules[97] = new Rule(-2, new int[]{18});
    rules[98] = new Rule(-2, new int[]{19});
    rules[99] = new Rule(-2, new int[]{20});
    rules[100] = new Rule(-2, new int[]{21});
    rules[101] = new Rule(-2, new int[]{22});
    rules[102] = new Rule(-2, new int[]{23});
    rules[103] = new Rule(-2, new int[]{24});
    rules[104] = new Rule(-2, new int[]{25});
    rules[105] = new Rule(-2, new int[]{26});
    rules[106] = new Rule(-2, new int[]{27});
    rules[107] = new Rule(-2, new int[]{28});
    rules[108] = new Rule(-2, new int[]{29});
    rules[109] = new Rule(-2, new int[]{30});
    rules[110] = new Rule(-2, new int[]{31});
    rules[111] = new Rule(-2, new int[]{32});
    rules[112] = new Rule(-2, new int[]{33});
    rules[113] = new Rule(-2, new int[]{34});
    rules[114] = new Rule(-2, new int[]{35});
    rules[115] = new Rule(-2, new int[]{36});
    rules[116] = new Rule(-2, new int[]{37});
    rules[117] = new Rule(-2, new int[]{38});
    rules[118] = new Rule(-2, new int[]{39});
    rules[119] = new Rule(-2, new int[]{40});
    rules[120] = new Rule(-2, new int[]{41});
    rules[121] = new Rule(-2, new int[]{42});
    rules[122] = new Rule(-2, new int[]{43});
    rules[123] = new Rule(-2, new int[]{44});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)PsiTokenType.error, (int)PsiTokenType.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> /* empty */
#line 57 "Psi.y"
                                  { CurrentSemanticValue.Module = new Module(); }
#line default
        break;
      case 3: // program -> program, assertion
#line 58 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Assertion); }
#line default
        break;
      case 4: // program -> program, declaration
#line 59 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Declaration); }
#line default
        break;
      case 5: // program -> program, module
#line 60 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Module); }
#line default
        break;
      case 6: // assertion -> ASSERT, expression, TERMINATOR
#line 63 "Psi.y"
                                           {
            	CurrentSemanticValue.Assertion = new Assertion(ValueStack[ValueStack.Depth-2].Expression); 
            }
#line default
        break;
      case 7: // module -> MODULE, modname, CURLY_O, program, CURLY_C
#line 68 "Psi.y"
                                                     {
				CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module;
				CurrentSemanticValue.Module.Name = ValueStack[ValueStack.Depth-4].Name;
			}
#line default
        break;
      case 8: // modname -> identifier
#line 74 "Psi.y"
                         {
            	CurrentSemanticValue.Name = new CompoundName(ValueStack[ValueStack.Depth-1].String); 
            }
#line default
        break;
      case 9: // modname -> modname, DOT, identifier
#line 77 "Psi.y"
                                     {
            	CurrentSemanticValue.Name = ValueStack[ValueStack.Depth-3].Name;
            	CurrentSemanticValue.Name.Add(ValueStack[ValueStack.Depth-1].String);
        	}
#line default
        break;
      case 10: // declaration -> export, typedecl
#line 83 "Psi.y"
                              {
            	CurrentSemanticValue.Declaration = ValueStack[ValueStack.Depth-1].Declaration;
            	CurrentSemanticValue.Declaration.IsExported = (bool)ValueStack[ValueStack.Depth-2].Boolean;
            }
#line default
        break;
      case 11: // declaration -> export, vardecl
#line 87 "Psi.y"
                             {
            	CurrentSemanticValue.Declaration = ValueStack[ValueStack.Depth-1].Declaration;
            	CurrentSemanticValue.Declaration.IsExported = (bool)ValueStack[ValueStack.Depth-2].Boolean;
            }
#line default
        break;
      case 12: // typedecl -> TYPE, identifier, IS, expression, TERMINATOR
#line 93 "Psi.y"
                                                       {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, TypeDeclaration, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = true;
            }
#line default
        break;
      case 13: // vardecl -> storage, identifier, COLON, type, terminator
#line 99 "Psi.y"
                                                       {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].Expression, null);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 14: // vardecl -> storage, identifier, IS, expression, terminator
#line 103 "Psi.y"
                                                             {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, null, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 15: // vardecl -> storage, identifier, COLON, type, IS, expression, terminator
#line 107 "Psi.y"
                                                                     {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-6].String, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-7].Boolean;
            }
#line default
        break;
      case 16: // type -> value
#line 114 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 19: // storage -> CONST
#line 122 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 20: // storage -> VAR
#line 123 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 21: // export -> /* empty */
#line 126 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 22: // export -> EXPORT
#line 127 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 23: // expression -> expression, IS, expr_or
#line 131 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.CopyAssign);
			}
#line default
        break;
      case 24: // expression -> expression, ASSIGN, expr_or
#line 135 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.SemanticAssign);
			}
#line default
        break;
      case 25: // expression -> expression, WB_CONCAT, expr_or
#line 139 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackConcat);
			}
#line default
        break;
      case 26: // expression -> expression, WB_PLUS, expr_or
#line 143 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackPlus);
			}
#line default
        break;
      case 27: // expression -> expression, WB_MINUS, expr_or
#line 147 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMinus);
			}
#line default
        break;
      case 28: // expression -> expression, WB_EXP, expr_or
#line 151 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackExponentiate);
			}
#line default
        break;
      case 29: // expression -> expression, WB_MULT, expr_or
#line 155 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMultiply);
			}
#line default
        break;
      case 30: // expression -> expression, WB_MOD, expr_or
#line 159 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackModulo);
			}
#line default
        break;
      case 31: // expression -> expression, WB_DIV, expr_or
#line 163 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackDivide);
			}
#line default
        break;
      case 32: // expression -> expression, WB_AND, expr_or
#line 167 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackAnd);
			}
#line default
        break;
      case 33: // expression -> expression, WB_OR, expr_or
#line 171 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackOr);
			}
#line default
        break;
      case 34: // expression -> expression, WB_INVERT, expr_or
#line 175 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackInvert);
			}
#line default
        break;
      case 35: // expression -> expression, WB_XOR, expr_or
#line 179 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackXor);
			}
#line default
        break;
      case 36: // expression -> expression, WB_ASR, expr_or
#line 183 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackArithmeticShiftRight);
			}
#line default
        break;
      case 37: // expression -> expression, WB_SHL, expr_or
#line 187 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftLeft);
			}
#line default
        break;
      case 38: // expression -> expression, WB_SHR, expr_or
#line 191 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftRight);
			}
#line default
        break;
      case 39: // expression -> expr_or
#line 195 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 40: // expr_or -> expr_or, OR, expr_xor
#line 201 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Or);
			}
#line default
        break;
      case 41: // expr_or -> expr_xor
#line 205 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 42: // expr_xor -> expr_xor, XOR, expr_and
#line 211 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Xor);
			}
#line default
        break;
      case 43: // expr_xor -> expr_and
#line 215 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 44: // expr_and -> expr_and, AND, equality
#line 221 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.And);
			}
#line default
        break;
      case 45: // expr_and -> equality
#line 225 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 46: // equality -> equality, EQUAL, comparison
#line 231 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Equals);
			}
#line default
        break;
      case 47: // equality -> equality, NEQUAL, comparison
#line 235 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.NotEquals);
			}
#line default
        break;
      case 48: // equality -> comparison
#line 239 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 49: // comparison -> comparison, LEQUAL, expr_arrows
#line 245 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.LessOrEqual);
			}
#line default
        break;
      case 50: // comparison -> comparison, GEQUAL, expr_arrows
#line 249 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.MoreOrEqual);
			}
#line default
        break;
      case 51: // comparison -> comparison, LESS, expr_arrows
#line 253 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Less);
			}
#line default
        break;
      case 52: // comparison -> comparison, MORE, expr_arrows
#line 257 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.More);
			}
#line default
        break;
      case 53: // comparison -> expr_arrows
#line 261 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 54: // expr_arrows -> expr_arrows, FORWARD, sum
#line 267 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Forward);
			}
#line default
        break;
      case 55: // expr_arrows -> expr_arrows, BACKWARD, sum
#line 271 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Backward);
			}
#line default
        break;
      case 56: // expr_arrows -> sum
#line 275 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 57: // sum -> sum, PLUS, term
#line 281 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 58: // sum -> sum, MINUS, term
#line 285 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 59: // sum -> sum, CONCAT, term
#line 289 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Concat);
			}
#line default
        break;
      case 60: // sum -> term
#line 293 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 61: // term -> term, MULT, expo
#line 299 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Multiply);
			}
#line default
        break;
      case 62: // term -> term, DIV, expo
#line 303 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Divide);
			}
#line default
        break;
      case 63: // term -> term, MOD, expo
#line 307 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Modulo);
			}
#line default
        break;
      case 64: // term -> expo
#line 311 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 65: // expo -> expo, EXP, shifting
#line 317 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Exponentiate);
			}
#line default
        break;
      case 66: // expo -> shifting
#line 321 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 67: // shifting -> shifting, ASR, unary
#line 327 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ArithmeticShiftRight);
			}
#line default
        break;
      case 68: // shifting -> shifting, SHR, unary
#line 331 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftRight);
			}
#line default
        break;
      case 69: // shifting -> shifting, SHL, unary
#line 335 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftLeft);
			}
#line default
        break;
      case 70: // shifting -> unary
#line 339 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 71: // unary -> PLUS, value
#line 345 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 72: // unary -> MINUS, value
#line 349 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 73: // unary -> INVERT, value
#line 353 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Invert);
			}
#line default
        break;
      case 74: // unary -> value
#line 357 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 75: // value -> value, DOT, identifier
#line 363 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyDot(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 76: // value -> value, META, identifier
#line 367 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyMeta(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 77: // value -> value, SQUARE_O, exprlist, SQUARE_C
#line 371 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayIndexingExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ExpressionList);
			}
#line default
        break;
      case 78: // value -> value, ROUND_O, ROUND_C
#line 375 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-3].Expression, new List<Argument>());
			}
#line default
        break;
      case 79: // value -> value, ROUND_O, arglist, ROUND_C
#line 379 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ArgumentList);
			}
#line default
        break;
      case 80: // value -> ROUND_O, expression, ROUND_C
#line 383 "Psi.y"
            {
                CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-2].Expression;
            }
#line default
        break;
      case 81: // value -> identifier
#line 387 "Psi.y"
   {
            	CurrentSemanticValue.Expression = new VariableReference(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 82: // value -> STRING
#line 391 "Psi.y"
   {
				CurrentSemanticValue.Expression = new StringLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 83: // value -> NUMBER
#line 395 "Psi.y"
   {
				CurrentSemanticValue.Expression = new NumberLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 84: // arglist -> arglist, COMMA, argument
#line 401 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = ValueStack[ValueStack.Depth-3].ArgumentList;
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 85: // arglist -> argument
#line 406 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = new List<Argument>();
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 86: // argument -> expression
#line 413 "Psi.y"
   {
				CurrentSemanticValue.Argument = new PositionalArgument(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 87: // argument -> identifier, COLON, expression
#line 417 "Psi.y"
   {
				CurrentSemanticValue.Argument = new NamedArgument(ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 88: // exprlist -> expression
#line 423 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = new List<Expression>();
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 89: // exprlist -> exprlist, COMMA, expression
#line 428 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = ValueStack[ValueStack.Depth-3].ExpressionList;
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((PsiTokenType)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((PsiTokenType)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 474 "Psi.y"
public PsiParser(PsiLexer lexer) : base(lexer) 
{ 
	
}

public Module Result => this.CurrentSemanticValue.Module;

public Expression TypeDeclaration { get; } = new VariableReference("<type>");

private static Expression Apply(Expression lhs, Expression rhs, PsiOperator op)
{
	return new BinaryOperation(op, lhs, rhs);
}

private static Expression Apply(Expression expr, PsiOperator op)
{
	return new UnaryOperation(op, expr);
}

private static Expression ApplyDot(Expression exp, string field)
{
	return new DotExpression(exp, field);
}

private static Expression ApplyMeta(Expression exp, string field)
{
	return new MetaExpression(exp, field);
}
#line default
}
}
