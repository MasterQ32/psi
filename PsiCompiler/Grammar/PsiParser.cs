// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  rechenknecht
// DateTime: 21.10.2017 20:42:41
// UserName: felix
// Input file <Psi.y - 21.10.2017 20:40:35>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace PsiCompiler.Grammar
{
public enum PsiTokenType {error=2,EOF=3,CURLY_O=4,CURLY_C=5,ROUND_O=6,
    ROUND_C=7,SQUARE_O=8,SQUARE_C=9,IMPORT=10,EXPORT=11,MODULE=12,
    ASSERT=13,ERROR=14,CONST=15,VAR=16,TYPE=17,FN=18,
    NEW=19,OPERATOR=20,ENUM=21,RECORD=22,INOUT=23,IN=24,
    OUT=25,THIS=26,FOR=27,WHILE=28,LOOP=29,UNTIL=30,
    IF=31,ELSE=32,SELECT=33,WHEN=34,OTHERWISE=35,RESTRICT=36,
    BREAK=37,CONTINUE=38,FALLTROUGH=39,RETURN=40,GOTO=41,MAPSTO=42,
    COMMA=43,TERMINATOR=44,COLON=45,LAMBDA=46,REF=47,ARRAY=48,
    PLUS=49,MINUS=50,MULT=51,DIV=52,AND=53,OR=54,
    INVERT=55,XOR=56,CONCAT=57,DOT=58,META=59,EXP=60,
    MOD=61,FORWARD=62,BACKWARD=63,LEQUAL=64,GEQUAL=65,EQUAL=66,
    NEQUAL=67,LESS=68,MORE=69,IS=70,ASSIGN=71,ASR=72,
    SHL=73,SHR=74,WB_PLUS=75,WB_MINUS=76,WB_MULT=77,WB_DIV=78,
    WB_AND=79,WB_OR=80,WB_XOR=81,WB_CONCAT=82,WB_EXP=83,WB_MOD=84,
    WB_ASR=85,WB_SHL=86,WB_SHR=87,NUMBER=88,STRING=89,ENUMVAL=90,
    IDENT=91,Comment=92,LongComment=93,Whitespace=94,UMINUS=95,UPLUS=96,
    UINVERT=97};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class PsiParser: ShiftReduceParser<ParserNode, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[180];
  private static State[] states = new State[348];
  private static string[] nonTerms = new string[] {
      "program", "identifier", "opsym", "module", "modname", "import", "assertion", 
      "type", "expression", "expr_or", "expr_xor", "expr_and", "equality", "comparison", 
      "expr_arrows", "sum", "term", "expo", "shifting", "unary", "value", "exprlist", 
      "declaration", "typedecl", "vardecl", "field", "export", "storage", "arglist", 
      "argument", "functiontype", "paramlist", "parameter", "prefix", "statement", 
      "block", "stmtlist", "idlist", "fieldlist", "options", "$accept", "terminator", 
      };

  static PsiParser() {
    states[0] = new State(-2,new int[]{-1,1});
    states[1] = new State(new int[]{3,2,13,7,11,262,12,337,10,342,17,-23,15,-23,16,-23},new int[]{-7,3,-23,4,-4,5,-6,6,-27,241});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(-5);
    states[6] = new State(-6);
    states[7] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,8,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[8] = new State(new int[]{44,9,70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38});
    states[9] = new State(-7);
    states[10] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,11,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[11] = new State(new int[]{70,-25,71,-25,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,44,-25,9,-25,43,-25,7,-25,58,-25,59,-25,8,-25,6,-25,72,-25,74,-25,73,-25,60,-25,51,-25,52,-25,61,-25,49,-25,50,-25,57,-25,62,-25,63,-25,64,-25,65,-25,68,-25,69,-25,66,-25,67,-25,53,-25,56,-25,54,-25,3,-25,13,-25,11,-25,12,-25,10,-25,17,-25,15,-25,16,-25,5,-25,4,-25,37,-25,39,-25,38,-25,14,-25,40,-25,41,-25,31,-25,28,-25,29,-25,36,-25,27,-25,33,-25,55,-25,19,-25,21,-25,47,-25,22,-25,48,-25,91,-25,20,-25,18,-25,46,-25,89,-25,90,-25,88,-25,32,-25,30,-25,34,-25,35,-25,45,-25,42,-25});
    states[12] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,13,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[13] = new State(new int[]{70,-26,71,-26,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,44,-26,9,-26,43,-26,7,-26,58,-26,59,-26,8,-26,6,-26,72,-26,74,-26,73,-26,60,-26,51,-26,52,-26,61,-26,49,-26,50,-26,57,-26,62,-26,63,-26,64,-26,65,-26,68,-26,69,-26,66,-26,67,-26,53,-26,56,-26,54,-26,3,-26,13,-26,11,-26,12,-26,10,-26,17,-26,15,-26,16,-26,5,-26,4,-26,37,-26,39,-26,38,-26,14,-26,40,-26,41,-26,31,-26,28,-26,29,-26,36,-26,27,-26,33,-26,55,-26,19,-26,21,-26,47,-26,22,-26,48,-26,91,-26,20,-26,18,-26,46,-26,89,-26,90,-26,88,-26,32,-26,30,-26,34,-26,35,-26,45,-26,42,-26});
    states[14] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,15,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[15] = new State(new int[]{70,-27,71,-27,82,-27,75,-27,76,-27,83,-27,77,-27,84,-27,78,-27,79,-27,80,-27,81,-27,85,34,86,36,87,38,44,-27,9,-27,43,-27,7,-27,58,-27,59,-27,8,-27,6,-27,72,-27,74,-27,73,-27,60,-27,51,-27,52,-27,61,-27,49,-27,50,-27,57,-27,62,-27,63,-27,64,-27,65,-27,68,-27,69,-27,66,-27,67,-27,53,-27,56,-27,54,-27,3,-27,13,-27,11,-27,12,-27,10,-27,17,-27,15,-27,16,-27,5,-27,4,-27,37,-27,39,-27,38,-27,14,-27,40,-27,41,-27,31,-27,28,-27,29,-27,36,-27,27,-27,33,-27,55,-27,19,-27,21,-27,47,-27,22,-27,48,-27,91,-27,20,-27,18,-27,46,-27,89,-27,90,-27,88,-27,32,-27,30,-27,34,-27,35,-27,45,-27,42,-27});
    states[16] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,17,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[17] = new State(new int[]{70,-28,71,-28,82,14,75,-28,76,-28,83,20,77,-28,84,24,78,-28,79,28,80,30,81,32,85,34,86,36,87,38,44,-28,9,-28,43,-28,7,-28,58,-28,59,-28,8,-28,6,-28,72,-28,74,-28,73,-28,60,-28,51,-28,52,-28,61,-28,49,-28,50,-28,57,-28,62,-28,63,-28,64,-28,65,-28,68,-28,69,-28,66,-28,67,-28,53,-28,56,-28,54,-28,3,-28,13,-28,11,-28,12,-28,10,-28,17,-28,15,-28,16,-28,5,-28,4,-28,37,-28,39,-28,38,-28,14,-28,40,-28,41,-28,31,-28,28,-28,29,-28,36,-28,27,-28,33,-28,55,-28,19,-28,21,-28,47,-28,22,-28,48,-28,91,-28,20,-28,18,-28,46,-28,89,-28,90,-28,88,-28,32,-28,30,-28,34,-28,35,-28,45,-28,42,-28});
    states[18] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,19,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[19] = new State(new int[]{70,-29,71,-29,82,14,75,-29,76,-29,83,20,77,-29,84,24,78,-29,79,28,80,30,81,32,85,34,86,36,87,38,44,-29,9,-29,43,-29,7,-29,58,-29,59,-29,8,-29,6,-29,72,-29,74,-29,73,-29,60,-29,51,-29,52,-29,61,-29,49,-29,50,-29,57,-29,62,-29,63,-29,64,-29,65,-29,68,-29,69,-29,66,-29,67,-29,53,-29,56,-29,54,-29,3,-29,13,-29,11,-29,12,-29,10,-29,17,-29,15,-29,16,-29,5,-29,4,-29,37,-29,39,-29,38,-29,14,-29,40,-29,41,-29,31,-29,28,-29,29,-29,36,-29,27,-29,33,-29,55,-29,19,-29,21,-29,47,-29,22,-29,48,-29,91,-29,20,-29,18,-29,46,-29,89,-29,90,-29,88,-29,32,-29,30,-29,34,-29,35,-29,45,-29,42,-29});
    states[20] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,21,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[21] = new State(new int[]{70,-30,71,-30,82,-30,75,-30,76,-30,83,-30,77,-30,84,-30,78,-30,79,-30,80,-30,81,-30,85,34,86,36,87,38,44,-30,9,-30,43,-30,7,-30,58,-30,59,-30,8,-30,6,-30,72,-30,74,-30,73,-30,60,-30,51,-30,52,-30,61,-30,49,-30,50,-30,57,-30,62,-30,63,-30,64,-30,65,-30,68,-30,69,-30,66,-30,67,-30,53,-30,56,-30,54,-30,3,-30,13,-30,11,-30,12,-30,10,-30,17,-30,15,-30,16,-30,5,-30,4,-30,37,-30,39,-30,38,-30,14,-30,40,-30,41,-30,31,-30,28,-30,29,-30,36,-30,27,-30,33,-30,55,-30,19,-30,21,-30,47,-30,22,-30,48,-30,91,-30,20,-30,18,-30,46,-30,89,-30,90,-30,88,-30,32,-30,30,-30,34,-30,35,-30,45,-30,42,-30});
    states[22] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,23,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[23] = new State(new int[]{70,-31,71,-31,82,14,75,-31,76,-31,83,20,77,-31,84,24,78,-31,79,28,80,30,81,32,85,34,86,36,87,38,44,-31,9,-31,43,-31,7,-31,58,-31,59,-31,8,-31,6,-31,72,-31,74,-31,73,-31,60,-31,51,-31,52,-31,61,-31,49,-31,50,-31,57,-31,62,-31,63,-31,64,-31,65,-31,68,-31,69,-31,66,-31,67,-31,53,-31,56,-31,54,-31,3,-31,13,-31,11,-31,12,-31,10,-31,17,-31,15,-31,16,-31,5,-31,4,-31,37,-31,39,-31,38,-31,14,-31,40,-31,41,-31,31,-31,28,-31,29,-31,36,-31,27,-31,33,-31,55,-31,19,-31,21,-31,47,-31,22,-31,48,-31,91,-31,20,-31,18,-31,46,-31,89,-31,90,-31,88,-31,32,-31,30,-31,34,-31,35,-31,45,-31,42,-31});
    states[24] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,25,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[25] = new State(new int[]{70,-32,71,-32,82,-32,75,-32,76,-32,83,-32,77,-32,84,-32,78,-32,79,-32,80,-32,81,-32,85,34,86,36,87,38,44,-32,9,-32,43,-32,7,-32,58,-32,59,-32,8,-32,6,-32,72,-32,74,-32,73,-32,60,-32,51,-32,52,-32,61,-32,49,-32,50,-32,57,-32,62,-32,63,-32,64,-32,65,-32,68,-32,69,-32,66,-32,67,-32,53,-32,56,-32,54,-32,3,-32,13,-32,11,-32,12,-32,10,-32,17,-32,15,-32,16,-32,5,-32,4,-32,37,-32,39,-32,38,-32,14,-32,40,-32,41,-32,31,-32,28,-32,29,-32,36,-32,27,-32,33,-32,55,-32,19,-32,21,-32,47,-32,22,-32,48,-32,91,-32,20,-32,18,-32,46,-32,89,-32,90,-32,88,-32,32,-32,30,-32,34,-32,35,-32,45,-32,42,-32});
    states[26] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,27,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[27] = new State(new int[]{70,-33,71,-33,82,14,75,-33,76,-33,83,20,77,-33,84,24,78,-33,79,28,80,30,81,32,85,34,86,36,87,38,44,-33,9,-33,43,-33,7,-33,58,-33,59,-33,8,-33,6,-33,72,-33,74,-33,73,-33,60,-33,51,-33,52,-33,61,-33,49,-33,50,-33,57,-33,62,-33,63,-33,64,-33,65,-33,68,-33,69,-33,66,-33,67,-33,53,-33,56,-33,54,-33,3,-33,13,-33,11,-33,12,-33,10,-33,17,-33,15,-33,16,-33,5,-33,4,-33,37,-33,39,-33,38,-33,14,-33,40,-33,41,-33,31,-33,28,-33,29,-33,36,-33,27,-33,33,-33,55,-33,19,-33,21,-33,47,-33,22,-33,48,-33,91,-33,20,-33,18,-33,46,-33,89,-33,90,-33,88,-33,32,-33,30,-33,34,-33,35,-33,45,-33,42,-33});
    states[28] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,29,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[29] = new State(new int[]{70,-34,71,-34,82,-34,75,-34,76,-34,83,-34,77,-34,84,-34,78,-34,79,-34,80,-34,81,-34,85,34,86,36,87,38,44,-34,9,-34,43,-34,7,-34,58,-34,59,-34,8,-34,6,-34,72,-34,74,-34,73,-34,60,-34,51,-34,52,-34,61,-34,49,-34,50,-34,57,-34,62,-34,63,-34,64,-34,65,-34,68,-34,69,-34,66,-34,67,-34,53,-34,56,-34,54,-34,3,-34,13,-34,11,-34,12,-34,10,-34,17,-34,15,-34,16,-34,5,-34,4,-34,37,-34,39,-34,38,-34,14,-34,40,-34,41,-34,31,-34,28,-34,29,-34,36,-34,27,-34,33,-34,55,-34,19,-34,21,-34,47,-34,22,-34,48,-34,91,-34,20,-34,18,-34,46,-34,89,-34,90,-34,88,-34,32,-34,30,-34,34,-34,35,-34,45,-34,42,-34});
    states[30] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,31,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[31] = new State(new int[]{70,-35,71,-35,82,-35,75,-35,76,-35,83,-35,77,-35,84,-35,78,-35,79,-35,80,-35,81,-35,85,34,86,36,87,38,44,-35,9,-35,43,-35,7,-35,58,-35,59,-35,8,-35,6,-35,72,-35,74,-35,73,-35,60,-35,51,-35,52,-35,61,-35,49,-35,50,-35,57,-35,62,-35,63,-35,64,-35,65,-35,68,-35,69,-35,66,-35,67,-35,53,-35,56,-35,54,-35,3,-35,13,-35,11,-35,12,-35,10,-35,17,-35,15,-35,16,-35,5,-35,4,-35,37,-35,39,-35,38,-35,14,-35,40,-35,41,-35,31,-35,28,-35,29,-35,36,-35,27,-35,33,-35,55,-35,19,-35,21,-35,47,-35,22,-35,48,-35,91,-35,20,-35,18,-35,46,-35,89,-35,90,-35,88,-35,32,-35,30,-35,34,-35,35,-35,45,-35,42,-35});
    states[32] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,33,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[33] = new State(new int[]{70,-36,71,-36,82,-36,75,-36,76,-36,83,-36,77,-36,84,-36,78,-36,79,-36,80,-36,81,-36,85,34,86,36,87,38,44,-36,9,-36,43,-36,7,-36,58,-36,59,-36,8,-36,6,-36,72,-36,74,-36,73,-36,60,-36,51,-36,52,-36,61,-36,49,-36,50,-36,57,-36,62,-36,63,-36,64,-36,65,-36,68,-36,69,-36,66,-36,67,-36,53,-36,56,-36,54,-36,3,-36,13,-36,11,-36,12,-36,10,-36,17,-36,15,-36,16,-36,5,-36,4,-36,37,-36,39,-36,38,-36,14,-36,40,-36,41,-36,31,-36,28,-36,29,-36,36,-36,27,-36,33,-36,55,-36,19,-36,21,-36,47,-36,22,-36,48,-36,91,-36,20,-36,18,-36,46,-36,89,-36,90,-36,88,-36,32,-36,30,-36,34,-36,35,-36,45,-36,42,-36});
    states[34] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,35,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[35] = new State(-37);
    states[36] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,37,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[37] = new State(-38);
    states[38] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,39,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[39] = new State(-39);
    states[40] = new State(new int[]{54,41,44,-40,70,-40,71,-40,82,-40,75,-40,76,-40,83,-40,77,-40,84,-40,78,-40,79,-40,80,-40,81,-40,85,-40,86,-40,87,-40,9,-40,43,-40,7,-40,58,-40,59,-40,8,-40,6,-40,72,-40,74,-40,73,-40,60,-40,51,-40,52,-40,61,-40,49,-40,50,-40,57,-40,62,-40,63,-40,64,-40,65,-40,68,-40,69,-40,66,-40,67,-40,53,-40,56,-40,3,-40,13,-40,11,-40,12,-40,10,-40,17,-40,15,-40,16,-40,5,-40,4,-40,37,-40,39,-40,38,-40,14,-40,40,-40,41,-40,31,-40,28,-40,29,-40,36,-40,27,-40,33,-40,55,-40,19,-40,21,-40,47,-40,22,-40,48,-40,91,-40,20,-40,18,-40,46,-40,89,-40,90,-40,88,-40,32,-40,30,-40,34,-40,35,-40,45,-40,42,-40});
    states[41] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-10,42,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[42] = new State(-41);
    states[43] = new State(new int[]{56,44,54,-42,44,-42,70,-42,71,-42,82,-42,75,-42,76,-42,83,-42,77,-42,84,-42,78,-42,79,-42,80,-42,81,-42,85,-42,86,-42,87,-42,9,-42,43,-42,7,-42,58,-42,59,-42,8,-42,6,-42,72,-42,74,-42,73,-42,60,-42,51,-42,52,-42,61,-42,49,-42,50,-42,57,-42,62,-42,63,-42,64,-42,65,-42,68,-42,69,-42,66,-42,67,-42,53,-42,3,-42,13,-42,11,-42,12,-42,10,-42,17,-42,15,-42,16,-42,5,-42,4,-42,37,-42,39,-42,38,-42,14,-42,40,-42,41,-42,31,-42,28,-42,29,-42,36,-42,27,-42,33,-42,55,-42,19,-42,21,-42,47,-42,22,-42,48,-42,91,-42,20,-42,18,-42,46,-42,89,-42,90,-42,88,-42,32,-42,30,-42,34,-42,35,-42,45,-42,42,-42});
    states[44] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-11,45,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[45] = new State(-43);
    states[46] = new State(new int[]{53,47,56,-44,54,-44,44,-44,70,-44,71,-44,82,-44,75,-44,76,-44,83,-44,77,-44,84,-44,78,-44,79,-44,80,-44,81,-44,85,-44,86,-44,87,-44,9,-44,43,-44,7,-44,58,-44,59,-44,8,-44,6,-44,72,-44,74,-44,73,-44,60,-44,51,-44,52,-44,61,-44,49,-44,50,-44,57,-44,62,-44,63,-44,64,-44,65,-44,68,-44,69,-44,66,-44,67,-44,3,-44,13,-44,11,-44,12,-44,10,-44,17,-44,15,-44,16,-44,5,-44,4,-44,37,-44,39,-44,38,-44,14,-44,40,-44,41,-44,31,-44,28,-44,29,-44,36,-44,27,-44,33,-44,55,-44,19,-44,21,-44,47,-44,22,-44,48,-44,91,-44,20,-44,18,-44,46,-44,89,-44,90,-44,88,-44,32,-44,30,-44,34,-44,35,-44,45,-44,42,-44});
    states[47] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-12,48,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[48] = new State(-45);
    states[49] = new State(new int[]{66,50,67,52,53,-46,56,-46,54,-46,44,-46,70,-46,71,-46,82,-46,75,-46,76,-46,83,-46,77,-46,84,-46,78,-46,79,-46,80,-46,81,-46,85,-46,86,-46,87,-46,9,-46,43,-46,7,-46,58,-46,59,-46,8,-46,6,-46,72,-46,74,-46,73,-46,60,-46,51,-46,52,-46,61,-46,49,-46,50,-46,57,-46,62,-46,63,-46,64,-46,65,-46,68,-46,69,-46,3,-46,13,-46,11,-46,12,-46,10,-46,17,-46,15,-46,16,-46,5,-46,4,-46,37,-46,39,-46,38,-46,14,-46,40,-46,41,-46,31,-46,28,-46,29,-46,36,-46,27,-46,33,-46,55,-46,19,-46,21,-46,47,-46,22,-46,48,-46,91,-46,20,-46,18,-46,46,-46,89,-46,90,-46,88,-46,32,-46,30,-46,34,-46,35,-46,45,-46,42,-46});
    states[50] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-13,51,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[51] = new State(-47);
    states[52] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-13,53,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[53] = new State(-48);
    states[54] = new State(new int[]{64,55,65,57,68,59,69,61,66,-49,67,-49,53,-49,56,-49,54,-49,44,-49,70,-49,71,-49,82,-49,75,-49,76,-49,83,-49,77,-49,84,-49,78,-49,79,-49,80,-49,81,-49,85,-49,86,-49,87,-49,9,-49,43,-49,7,-49,58,-49,59,-49,8,-49,6,-49,72,-49,74,-49,73,-49,60,-49,51,-49,52,-49,61,-49,49,-49,50,-49,57,-49,62,-49,63,-49,3,-49,13,-49,11,-49,12,-49,10,-49,17,-49,15,-49,16,-49,5,-49,4,-49,37,-49,39,-49,38,-49,14,-49,40,-49,41,-49,31,-49,28,-49,29,-49,36,-49,27,-49,33,-49,55,-49,19,-49,21,-49,47,-49,22,-49,48,-49,91,-49,20,-49,18,-49,46,-49,89,-49,90,-49,88,-49,32,-49,30,-49,34,-49,35,-49,45,-49,42,-49});
    states[55] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-14,56,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[56] = new State(-50);
    states[57] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-14,58,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[58] = new State(-51);
    states[59] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-14,60,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[60] = new State(-52);
    states[61] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-14,62,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[62] = new State(-53);
    states[63] = new State(new int[]{62,64,63,66,64,-54,65,-54,68,-54,69,-54,66,-54,67,-54,53,-54,56,-54,54,-54,44,-54,70,-54,71,-54,82,-54,75,-54,76,-54,83,-54,77,-54,84,-54,78,-54,79,-54,80,-54,81,-54,85,-54,86,-54,87,-54,9,-54,43,-54,7,-54,58,-54,59,-54,8,-54,6,-54,72,-54,74,-54,73,-54,60,-54,51,-54,52,-54,61,-54,49,-54,50,-54,57,-54,3,-54,13,-54,11,-54,12,-54,10,-54,17,-54,15,-54,16,-54,5,-54,4,-54,37,-54,39,-54,38,-54,14,-54,40,-54,41,-54,31,-54,28,-54,29,-54,36,-54,27,-54,33,-54,55,-54,19,-54,21,-54,47,-54,22,-54,48,-54,91,-54,20,-54,18,-54,46,-54,89,-54,90,-54,88,-54,32,-54,30,-54,34,-54,35,-54,45,-54,42,-54});
    states[64] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-15,65,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[65] = new State(-55);
    states[66] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-15,67,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[67] = new State(-56);
    states[68] = new State(new int[]{49,69,50,71,57,73,62,-57,63,-57,64,-57,65,-57,68,-57,69,-57,66,-57,67,-57,53,-57,56,-57,54,-57,44,-57,70,-57,71,-57,82,-57,75,-57,76,-57,83,-57,77,-57,84,-57,78,-57,79,-57,80,-57,81,-57,85,-57,86,-57,87,-57,9,-57,43,-57,7,-57,58,-57,59,-57,8,-57,6,-57,72,-57,74,-57,73,-57,60,-57,51,-57,52,-57,61,-57,3,-57,13,-57,11,-57,12,-57,10,-57,17,-57,15,-57,16,-57,5,-57,4,-57,37,-57,39,-57,38,-57,14,-57,40,-57,41,-57,31,-57,28,-57,29,-57,36,-57,27,-57,33,-57,55,-57,19,-57,21,-57,47,-57,22,-57,48,-57,91,-57,20,-57,18,-57,46,-57,89,-57,90,-57,88,-57,32,-57,30,-57,34,-57,35,-57,45,-57,42,-57});
    states[69] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-16,70,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[70] = new State(new int[]{49,-58,50,-58,57,73,62,-58,63,-58,64,-58,65,-58,68,-58,69,-58,66,-58,67,-58,53,-58,56,-58,54,-58,44,-58,70,-58,71,-58,82,-58,75,-58,76,-58,83,-58,77,-58,84,-58,78,-58,79,-58,80,-58,81,-58,85,-58,86,-58,87,-58,9,-58,43,-58,7,-58,58,-58,59,-58,8,-58,6,-58,72,-58,74,-58,73,-58,60,-58,51,-58,52,-58,61,-58,3,-58,13,-58,11,-58,12,-58,10,-58,17,-58,15,-58,16,-58,5,-58,4,-58,37,-58,39,-58,38,-58,14,-58,40,-58,41,-58,31,-58,28,-58,29,-58,36,-58,27,-58,33,-58,55,-58,19,-58,21,-58,47,-58,22,-58,48,-58,91,-58,20,-58,18,-58,46,-58,89,-58,90,-58,88,-58,32,-58,30,-58,34,-58,35,-58,45,-58,42,-58});
    states[71] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-16,72,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[72] = new State(new int[]{49,-59,50,-59,57,73,62,-59,63,-59,64,-59,65,-59,68,-59,69,-59,66,-59,67,-59,53,-59,56,-59,54,-59,44,-59,70,-59,71,-59,82,-59,75,-59,76,-59,83,-59,77,-59,84,-59,78,-59,79,-59,80,-59,81,-59,85,-59,86,-59,87,-59,9,-59,43,-59,7,-59,58,-59,59,-59,8,-59,6,-59,72,-59,74,-59,73,-59,60,-59,51,-59,52,-59,61,-59,3,-59,13,-59,11,-59,12,-59,10,-59,17,-59,15,-59,16,-59,5,-59,4,-59,37,-59,39,-59,38,-59,14,-59,40,-59,41,-59,31,-59,28,-59,29,-59,36,-59,27,-59,33,-59,55,-59,19,-59,21,-59,47,-59,22,-59,48,-59,91,-59,20,-59,18,-59,46,-59,89,-59,90,-59,88,-59,32,-59,30,-59,34,-59,35,-59,45,-59,42,-59});
    states[73] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-16,74,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[74] = new State(-60);
    states[75] = new State(new int[]{51,76,52,78,61,80,49,-61,50,-61,57,-61,62,-61,63,-61,64,-61,65,-61,68,-61,69,-61,66,-61,67,-61,53,-61,56,-61,54,-61,44,-61,70,-61,71,-61,82,-61,75,-61,76,-61,83,-61,77,-61,84,-61,78,-61,79,-61,80,-61,81,-61,85,-61,86,-61,87,-61,9,-61,43,-61,7,-61,58,-61,59,-61,8,-61,6,-61,72,-61,74,-61,73,-61,60,-61,3,-61,13,-61,11,-61,12,-61,10,-61,17,-61,15,-61,16,-61,5,-61,4,-61,37,-61,39,-61,38,-61,14,-61,40,-61,41,-61,31,-61,28,-61,29,-61,36,-61,27,-61,33,-61,55,-61,19,-61,21,-61,47,-61,22,-61,48,-61,91,-61,20,-61,18,-61,46,-61,89,-61,90,-61,88,-61,32,-61,30,-61,34,-61,35,-61,45,-61,42,-61});
    states[76] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-17,77,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[77] = new State(new int[]{51,-62,52,-62,61,80,49,-62,50,-62,57,-62,62,-62,63,-62,64,-62,65,-62,68,-62,69,-62,66,-62,67,-62,53,-62,56,-62,54,-62,44,-62,70,-62,71,-62,82,-62,75,-62,76,-62,83,-62,77,-62,84,-62,78,-62,79,-62,80,-62,81,-62,85,-62,86,-62,87,-62,9,-62,43,-62,7,-62,58,-62,59,-62,8,-62,6,-62,72,-62,74,-62,73,-62,60,-62,3,-62,13,-62,11,-62,12,-62,10,-62,17,-62,15,-62,16,-62,5,-62,4,-62,37,-62,39,-62,38,-62,14,-62,40,-62,41,-62,31,-62,28,-62,29,-62,36,-62,27,-62,33,-62,55,-62,19,-62,21,-62,47,-62,22,-62,48,-62,91,-62,20,-62,18,-62,46,-62,89,-62,90,-62,88,-62,32,-62,30,-62,34,-62,35,-62,45,-62,42,-62});
    states[78] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-17,79,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[79] = new State(new int[]{51,-63,52,-63,61,80,49,-63,50,-63,57,-63,62,-63,63,-63,64,-63,65,-63,68,-63,69,-63,66,-63,67,-63,53,-63,56,-63,54,-63,44,-63,70,-63,71,-63,82,-63,75,-63,76,-63,83,-63,77,-63,84,-63,78,-63,79,-63,80,-63,81,-63,85,-63,86,-63,87,-63,9,-63,43,-63,7,-63,58,-63,59,-63,8,-63,6,-63,72,-63,74,-63,73,-63,60,-63,3,-63,13,-63,11,-63,12,-63,10,-63,17,-63,15,-63,16,-63,5,-63,4,-63,37,-63,39,-63,38,-63,14,-63,40,-63,41,-63,31,-63,28,-63,29,-63,36,-63,27,-63,33,-63,55,-63,19,-63,21,-63,47,-63,22,-63,48,-63,91,-63,20,-63,18,-63,46,-63,89,-63,90,-63,88,-63,32,-63,30,-63,34,-63,35,-63,45,-63,42,-63});
    states[80] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-17,81,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[81] = new State(-64);
    states[82] = new State(new int[]{60,83,51,-65,52,-65,61,-65,49,-65,50,-65,57,-65,62,-65,63,-65,64,-65,65,-65,68,-65,69,-65,66,-65,67,-65,53,-65,56,-65,54,-65,44,-65,70,-65,71,-65,82,-65,75,-65,76,-65,83,-65,77,-65,84,-65,78,-65,79,-65,80,-65,81,-65,85,-65,86,-65,87,-65,9,-65,43,-65,7,-65,58,-65,59,-65,8,-65,6,-65,72,-65,74,-65,73,-65,3,-65,13,-65,11,-65,12,-65,10,-65,17,-65,15,-65,16,-65,5,-65,4,-65,37,-65,39,-65,38,-65,14,-65,40,-65,41,-65,31,-65,28,-65,29,-65,36,-65,27,-65,33,-65,55,-65,19,-65,21,-65,47,-65,22,-65,48,-65,91,-65,20,-65,18,-65,46,-65,89,-65,90,-65,88,-65,32,-65,30,-65,34,-65,35,-65,45,-65,42,-65});
    states[83] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-18,84,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[84] = new State(-66);
    states[85] = new State(new int[]{72,86,74,88,73,90,60,-67,51,-67,52,-67,61,-67,49,-67,50,-67,57,-67,62,-67,63,-67,64,-67,65,-67,68,-67,69,-67,66,-67,67,-67,53,-67,56,-67,54,-67,44,-67,70,-67,71,-67,82,-67,75,-67,76,-67,83,-67,77,-67,84,-67,78,-67,79,-67,80,-67,81,-67,85,-67,86,-67,87,-67,9,-67,43,-67,7,-67,58,-67,59,-67,8,-67,6,-67,3,-67,13,-67,11,-67,12,-67,10,-67,17,-67,15,-67,16,-67,5,-67,4,-67,37,-67,39,-67,38,-67,14,-67,40,-67,41,-67,31,-67,28,-67,29,-67,36,-67,27,-67,33,-67,55,-67,19,-67,21,-67,47,-67,22,-67,48,-67,91,-67,20,-67,18,-67,46,-67,89,-67,90,-67,88,-67,32,-67,30,-67,34,-67,35,-67,45,-67,42,-67});
    states[86] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-19,87,-20,92,-21,194,-2,198,-31,199});
    states[87] = new State(-68);
    states[88] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-19,89,-20,92,-21,194,-2,198,-31,199});
    states[89] = new State(-69);
    states[90] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-19,91,-20,92,-21,194,-2,198,-31,199});
    states[91] = new State(-70);
    states[92] = new State(-71);
    states[93] = new State(new int[]{21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-21,94,-2,198,-31,199});
    states[94] = new State(new int[]{58,95,59,130,8,132,6,139,72,-72,74,-72,73,-72,60,-72,51,-72,52,-72,61,-72,49,-72,50,-72,57,-72,62,-72,63,-72,64,-72,65,-72,68,-72,69,-72,66,-72,67,-72,53,-72,56,-72,54,-72,44,-72,70,-72,71,-72,82,-72,75,-72,76,-72,83,-72,77,-72,84,-72,78,-72,79,-72,80,-72,81,-72,85,-72,86,-72,87,-72,9,-72,43,-72,7,-72,3,-72,13,-72,11,-72,12,-72,10,-72,17,-72,15,-72,16,-72,5,-72,4,-72,37,-72,39,-72,38,-72,14,-72,40,-72,41,-72,31,-72,28,-72,29,-72,36,-72,27,-72,33,-72,55,-72,19,-72,21,-72,47,-72,22,-72,48,-72,91,-72,20,-72,18,-72,46,-72,89,-72,90,-72,88,-72,32,-72,30,-72,34,-72,35,-72,45,-72,42,-72});
    states[95] = new State(new int[]{91,97,20,98},new int[]{-2,96});
    states[96] = new State(-77);
    states[97] = new State(-151);
    states[98] = new State(new int[]{59,99});
    states[99] = new State(new int[]{49,102,50,103,51,104,52,105,53,106,54,107,55,108,56,109,57,110,58,111,59,112,60,113,61,114,62,115,63,116,64,117,65,118,66,119,67,120,68,121,69,122,70,123,71,124,72,125,73,126,74,127,8,128},new int[]{-3,100});
    states[100] = new State(new int[]{59,101});
    states[101] = new State(-152);
    states[102] = new State(-153);
    states[103] = new State(-154);
    states[104] = new State(-155);
    states[105] = new State(-156);
    states[106] = new State(-157);
    states[107] = new State(-158);
    states[108] = new State(-159);
    states[109] = new State(-160);
    states[110] = new State(-161);
    states[111] = new State(-162);
    states[112] = new State(-163);
    states[113] = new State(-164);
    states[114] = new State(-165);
    states[115] = new State(-166);
    states[116] = new State(-167);
    states[117] = new State(-168);
    states[118] = new State(-169);
    states[119] = new State(-170);
    states[120] = new State(-171);
    states[121] = new State(-172);
    states[122] = new State(-173);
    states[123] = new State(-174);
    states[124] = new State(-175);
    states[125] = new State(-176);
    states[126] = new State(-177);
    states[127] = new State(-178);
    states[128] = new State(new int[]{9,129});
    states[129] = new State(-179);
    states[130] = new State(new int[]{91,97,20,98},new int[]{-2,131});
    states[131] = new State(-78);
    states[132] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-22,133,-9,193,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[133] = new State(new int[]{9,134,43,135});
    states[134] = new State(-85);
    states[135] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,136,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[136] = new State(new int[]{70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,9,-124,43,-124,7,-124});
    states[137] = new State(new int[]{21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-21,138,-2,198,-31,199});
    states[138] = new State(new int[]{58,95,59,130,8,132,6,139,72,-73,74,-73,73,-73,60,-73,51,-73,52,-73,61,-73,49,-73,50,-73,57,-73,62,-73,63,-73,64,-73,65,-73,68,-73,69,-73,66,-73,67,-73,53,-73,56,-73,54,-73,44,-73,70,-73,71,-73,82,-73,75,-73,76,-73,83,-73,77,-73,84,-73,78,-73,79,-73,80,-73,81,-73,85,-73,86,-73,87,-73,9,-73,43,-73,7,-73,3,-73,13,-73,11,-73,12,-73,10,-73,17,-73,15,-73,16,-73,5,-73,4,-73,37,-73,39,-73,38,-73,14,-73,40,-73,41,-73,31,-73,28,-73,29,-73,36,-73,27,-73,33,-73,55,-73,19,-73,21,-73,47,-73,22,-73,48,-73,91,-73,20,-73,18,-73,46,-73,89,-73,90,-73,88,-73,32,-73,30,-73,34,-73,35,-73,45,-73,42,-73});
    states[139] = new State(new int[]{7,140,49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-29,141,-30,336,-9,145,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,333,-31,199});
    states[140] = new State(-87);
    states[141] = new State(new int[]{7,142,43,143});
    states[142] = new State(-88);
    states[143] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-30,144,-9,145,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,333,-31,199});
    states[144] = new State(-119);
    states[145] = new State(new int[]{70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,7,-121,43,-121});
    states[146] = new State(new int[]{21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-21,147,-2,198,-31,199});
    states[147] = new State(new int[]{58,-74,59,-74,8,132,6,139,72,-74,74,-74,73,-74,60,-74,51,-74,52,-74,61,-74,49,-74,50,-74,57,-74,62,-74,63,-74,64,-74,65,-74,68,-74,69,-74,66,-74,67,-74,53,-74,56,-74,54,-74,44,-74,70,-74,71,-74,82,-74,75,-74,76,-74,83,-74,77,-74,84,-74,78,-74,79,-74,80,-74,81,-74,85,-74,86,-74,87,-74,9,-74,43,-74,7,-74,3,-74,13,-74,11,-74,12,-74,10,-74,17,-74,15,-74,16,-74,5,-74,4,-74,37,-74,39,-74,38,-74,14,-74,40,-74,41,-74,31,-74,28,-74,29,-74,36,-74,27,-74,33,-74,55,-74,19,-74,21,-74,47,-74,22,-74,48,-74,91,-74,20,-74,18,-74,46,-74,89,-74,90,-74,88,-74,32,-74,30,-74,34,-74,35,-74,45,-74,42,-74});
    states[148] = new State(new int[]{6,149,68,155});
    states[149] = new State(new int[]{91,97,20,98},new int[]{-38,150,-2,154});
    states[150] = new State(new int[]{7,151,43,152});
    states[151] = new State(-79);
    states[152] = new State(new int[]{91,97,20,98},new int[]{-2,153});
    states[153] = new State(-98);
    states[154] = new State(-99);
    states[155] = new State(new int[]{21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-8,156,-21,177,-2,198,-31,199});
    states[156] = new State(new int[]{69,157});
    states[157] = new State(new int[]{6,158});
    states[158] = new State(new int[]{91,97,20,98},new int[]{-39,159,-26,182,-2,163});
    states[159] = new State(new int[]{7,160,43,161});
    states[160] = new State(-80);
    states[161] = new State(new int[]{91,97,20,98},new int[]{-26,162,-2,163});
    states[162] = new State(-100);
    states[163] = new State(new int[]{45,164,70,330});
    states[164] = new State(new int[]{21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-8,165,-21,177,-2,198,-31,199});
    states[165] = new State(new int[]{70,167,44,170,7,-19,43,-19},new int[]{-42,166});
    states[166] = new State(-102);
    states[167] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,168,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[168] = new State(new int[]{70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,44,170,7,-19,43,-19},new int[]{-42,169});
    states[169] = new State(-104);
    states[170] = new State(-20);
    states[171] = new State(new int[]{21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-21,172,-2,198,-31,199});
    states[172] = new State(new int[]{58,95,59,130,8,132,6,139,72,-75,74,-75,73,-75,60,-75,51,-75,52,-75,61,-75,49,-75,50,-75,57,-75,62,-75,63,-75,64,-75,65,-75,68,-75,69,-75,66,-75,67,-75,53,-75,56,-75,54,-75,44,-75,70,-75,71,-75,82,-75,75,-75,76,-75,83,-75,77,-75,84,-75,78,-75,79,-75,80,-75,81,-75,85,-75,86,-75,87,-75,9,-75,43,-75,7,-75,3,-75,13,-75,11,-75,12,-75,10,-75,17,-75,15,-75,16,-75,5,-75,4,-75,37,-75,39,-75,38,-75,14,-75,40,-75,41,-75,31,-75,28,-75,29,-75,36,-75,27,-75,33,-75,55,-75,19,-75,21,-75,47,-75,22,-75,48,-75,91,-75,20,-75,18,-75,46,-75,89,-75,90,-75,88,-75,32,-75,30,-75,34,-75,35,-75,45,-75,42,-75});
    states[173] = new State(new int[]{68,174});
    states[174] = new State(new int[]{21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-8,175,-21,177,-2,198,-31,199});
    states[175] = new State(new int[]{69,176});
    states[176] = new State(-81);
    states[177] = new State(new int[]{58,95,59,130,8,132,6,139,69,-18,70,-18,44,-18,7,-18,43,-18,71,-18,82,-18,75,-18,76,-18,83,-18,77,-18,84,-18,78,-18,79,-18,80,-18,81,-18,85,-18,86,-18,87,-18,9,-18,72,-18,74,-18,73,-18,60,-18,51,-18,52,-18,61,-18,49,-18,50,-18,57,-18,62,-18,63,-18,64,-18,65,-18,68,-18,66,-18,67,-18,53,-18,56,-18,54,-18,3,-18,13,-18,11,-18,12,-18,10,-18,17,-18,15,-18,16,-18,5,-18,4,-18,37,-18,39,-18,38,-18,14,-18,40,-18,41,-18,31,-18,28,-18,29,-18,36,-18,27,-18,33,-18,55,-18,19,-18,21,-18,47,-18,22,-18,48,-18,91,-18,20,-18,18,-18,46,-18,89,-18,90,-18,88,-18,32,-18,30,-18,34,-18,35,-18,45,-18,42,-18});
    states[178] = new State(new int[]{6,179});
    states[179] = new State(new int[]{91,97,20,98},new int[]{-39,180,-26,182,-2,163});
    states[180] = new State(new int[]{7,181,43,161});
    states[181] = new State(-82);
    states[182] = new State(-101);
    states[183] = new State(new int[]{68,184});
    states[184] = new State(new int[]{21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-8,185,-21,177,-2,198,-31,199});
    states[185] = new State(new int[]{69,186,43,187});
    states[186] = new State(-83);
    states[187] = new State(new int[]{88,188});
    states[188] = new State(new int[]{69,189});
    states[189] = new State(-84);
    states[190] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-22,191,-9,193,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[191] = new State(new int[]{9,192,43,135});
    states[192] = new State(-86);
    states[193] = new State(new int[]{70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,9,-123,43,-123,7,-123});
    states[194] = new State(new int[]{58,95,59,130,8,132,6,139,72,-76,74,-76,73,-76,60,-76,51,-76,52,-76,61,-76,49,-76,50,-76,57,-76,62,-76,63,-76,64,-76,65,-76,68,-76,69,-76,66,-76,67,-76,53,-76,56,-76,54,-76,44,-76,70,-76,71,-76,82,-76,75,-76,76,-76,83,-76,77,-76,84,-76,78,-76,79,-76,80,-76,81,-76,85,-76,86,-76,87,-76,9,-76,43,-76,7,-76,3,-76,13,-76,11,-76,12,-76,10,-76,17,-76,15,-76,16,-76,5,-76,4,-76,37,-76,39,-76,38,-76,14,-76,40,-76,41,-76,31,-76,28,-76,29,-76,36,-76,27,-76,33,-76,55,-76,19,-76,21,-76,47,-76,22,-76,48,-76,91,-76,20,-76,18,-76,46,-76,89,-76,90,-76,88,-76,32,-76,30,-76,34,-76,35,-76,45,-76,42,-76});
    states[195] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,196,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[196] = new State(new int[]{7,197,70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38});
    states[197] = new State(-89);
    states[198] = new State(-90);
    states[199] = new State(new int[]{42,201,4,236,58,-91,59,-91,8,-91,6,-91,72,-91,74,-91,73,-91,60,-91,51,-91,52,-91,61,-91,49,-91,50,-91,57,-91,62,-91,63,-91,64,-91,65,-91,68,-91,69,-91,66,-91,67,-91,53,-91,56,-91,54,-91,44,-91,70,-91,71,-91,82,-91,75,-91,76,-91,83,-91,77,-91,84,-91,78,-91,79,-91,80,-91,81,-91,85,-91,86,-91,87,-91,9,-91,43,-91,7,-91,3,-91,13,-91,11,-91,12,-91,10,-91,17,-91,15,-91,16,-91,5,-91,37,-91,39,-91,38,-91,14,-91,40,-91,41,-91,31,-91,28,-91,29,-91,36,-91,27,-91,33,-91,55,-91,19,-91,21,-91,47,-91,22,-91,48,-91,91,-91,20,-91,18,-91,46,-91,89,-91,90,-91,88,-91,32,-91,30,-91,34,-91,35,-91,45,-91},new int[]{-36,200});
    states[200] = new State(-92);
    states[201] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,202,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[202] = new State(new int[]{70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,58,-93,59,-93,8,-93,6,-93,72,-93,74,-93,73,-93,60,-93,51,-93,52,-93,61,-93,49,-93,50,-93,57,-93,62,-93,63,-93,64,-93,65,-93,68,-93,69,-93,66,-93,67,-93,53,-93,56,-93,54,-93,44,-93,9,-93,43,-93,7,-93,3,-93,13,-93,11,-93,12,-93,10,-93,17,-93,15,-93,16,-93,5,-93,4,-93,37,-93,39,-93,38,-93,14,-93,40,-93,41,-93,31,-93,28,-93,29,-93,36,-93,27,-93,33,-93,55,-93,19,-93,21,-93,47,-93,22,-93,48,-93,91,-93,20,-93,18,-93,46,-93,89,-93,90,-93,88,-93,32,-93,30,-93,34,-93,35,-93,45,-93,42,-93});
    states[203] = new State(new int[]{6,204});
    states[204] = new State(new int[]{7,232,24,-114,25,-114,23,-114,26,-114,91,-114,20,-114},new int[]{-32,205,-33,235,-34,220});
    states[205] = new State(new int[]{7,206,43,218});
    states[206] = new State(new int[]{62,207,42,-107,4,-107,58,-107,59,-107,8,-107,6,-107,72,-107,74,-107,73,-107,60,-107,51,-107,52,-107,61,-107,49,-107,50,-107,57,-107,63,-107,64,-107,65,-107,68,-107,69,-107,66,-107,67,-107,53,-107,56,-107,54,-107,44,-107,70,-107,71,-107,82,-107,75,-107,76,-107,83,-107,77,-107,84,-107,78,-107,79,-107,80,-107,81,-107,85,-107,86,-107,87,-107,9,-107,43,-107,7,-107,3,-107,13,-107,11,-107,12,-107,10,-107,17,-107,15,-107,16,-107,5,-107,37,-107,39,-107,38,-107,14,-107,40,-107,41,-107,31,-107,28,-107,29,-107,36,-107,27,-107,33,-107,55,-107,19,-107,21,-107,47,-107,22,-107,48,-107,91,-107,20,-107,18,-107,46,-107,89,-107,90,-107,88,-107,32,-107,30,-107,34,-107,35,-107,45,-107});
    states[207] = new State(new int[]{21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-8,208,-21,177,-2,198,-31,199});
    states[208] = new State(-105);
    states[209] = new State(new int[]{6,210});
    states[210] = new State(new int[]{91,97,20,98},new int[]{-38,211,-2,154});
    states[211] = new State(new int[]{7,212,43,152});
    states[212] = new State(new int[]{42,213});
    states[213] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,214,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[214] = new State(new int[]{70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,58,-94,59,-94,8,-94,6,-94,72,-94,74,-94,73,-94,60,-94,51,-94,52,-94,61,-94,49,-94,50,-94,57,-94,62,-94,63,-94,64,-94,65,-94,68,-94,69,-94,66,-94,67,-94,53,-94,56,-94,54,-94,44,-94,9,-94,43,-94,7,-94,3,-94,13,-94,11,-94,12,-94,10,-94,17,-94,15,-94,16,-94,5,-94,4,-94,37,-94,39,-94,38,-94,14,-94,40,-94,41,-94,31,-94,28,-94,29,-94,36,-94,27,-94,33,-94,55,-94,19,-94,21,-94,47,-94,22,-94,48,-94,91,-94,20,-94,18,-94,46,-94,89,-94,90,-94,88,-94,32,-94,30,-94,34,-94,35,-94,45,-94,42,-94});
    states[215] = new State(-95);
    states[216] = new State(-96);
    states[217] = new State(-97);
    states[218] = new State(-114,new int[]{-33,219,-34,220});
    states[219] = new State(-109);
    states[220] = new State(new int[]{24,228,25,229,23,230,26,231,91,97,20,98},new int[]{-2,221});
    states[221] = new State(new int[]{45,222,70,226});
    states[222] = new State(new int[]{21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-8,223,-21,177,-2,198,-31,199});
    states[223] = new State(new int[]{70,224,7,-113,43,-113});
    states[224] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,225,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[225] = new State(new int[]{70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,7,-111,43,-111});
    states[226] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,227,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[227] = new State(new int[]{70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,7,-112,43,-112});
    states[228] = new State(-115);
    states[229] = new State(-116);
    states[230] = new State(-117);
    states[231] = new State(-118);
    states[232] = new State(new int[]{62,233,42,-108,4,-108,58,-108,59,-108,8,-108,6,-108,72,-108,74,-108,73,-108,60,-108,51,-108,52,-108,61,-108,49,-108,50,-108,57,-108,63,-108,64,-108,65,-108,68,-108,69,-108,66,-108,67,-108,53,-108,56,-108,54,-108,44,-108,70,-108,71,-108,82,-108,75,-108,76,-108,83,-108,77,-108,84,-108,78,-108,79,-108,80,-108,81,-108,85,-108,86,-108,87,-108,9,-108,43,-108,7,-108,3,-108,13,-108,11,-108,12,-108,10,-108,17,-108,15,-108,16,-108,5,-108,37,-108,39,-108,38,-108,14,-108,40,-108,41,-108,31,-108,28,-108,29,-108,36,-108,27,-108,33,-108,55,-108,19,-108,21,-108,47,-108,22,-108,48,-108,91,-108,20,-108,18,-108,46,-108,89,-108,90,-108,88,-108,32,-108,30,-108,34,-108,35,-108,45,-108});
    states[233] = new State(new int[]{21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-8,234,-21,177,-2,198,-31,199});
    states[234] = new State(-106);
    states[235] = new State(-110);
    states[236] = new State(new int[]{5,329,11,-127,13,-127,4,-127,37,-127,39,-127,38,-127,14,-127,40,-127,41,-127,31,-127,28,-127,29,-127,36,-127,27,-127,33,-127,49,-127,50,-127,55,-127,19,-127,21,-127,47,-127,22,-127,48,-127,8,-127,6,-127,91,-127,20,-127,18,-127,46,-127,89,-127,90,-127,88,-127,44,-127,17,-127,15,-127,16,-127},new int[]{-37,237});
    states[237] = new State(new int[]{5,238,11,262,13,7,4,236,37,265,39,267,38,269,14,271,40,274,41,278,31,281,28,288,29,293,36,300,27,305,33,312,49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217,44,325,17,-23,15,-23,16,-23},new int[]{-35,239,-23,240,-27,241,-7,263,-36,264,-9,323,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[238] = new State(-125);
    states[239] = new State(-128);
    states[240] = new State(-129);
    states[241] = new State(new int[]{17,244,15,260,16,261},new int[]{-24,242,-25,243,-28,249});
    states[242] = new State(-12);
    states[243] = new State(-13);
    states[244] = new State(new int[]{91,97,20,98},new int[]{-2,245});
    states[245] = new State(new int[]{70,246});
    states[246] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,247,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[247] = new State(new int[]{44,248,70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38});
    states[248] = new State(-14);
    states[249] = new State(new int[]{91,97,20,98},new int[]{-2,250});
    states[250] = new State(new int[]{45,251,70,257});
    states[251] = new State(new int[]{21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-8,252,-21,177,-2,198,-31,199});
    states[252] = new State(new int[]{70,254,44,170,3,-19,13,-19,11,-19,12,-19,10,-19,17,-19,15,-19,16,-19,5,-19,4,-19,37,-19,39,-19,38,-19,14,-19,40,-19,41,-19,31,-19,28,-19,29,-19,36,-19,27,-19,33,-19,49,-19,50,-19,55,-19,19,-19,21,-19,47,-19,22,-19,48,-19,8,-19,6,-19,91,-19,20,-19,18,-19,46,-19,89,-19,90,-19,88,-19,32,-19,30,-19,34,-19,35,-19},new int[]{-42,253});
    states[253] = new State(-15);
    states[254] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,255,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[255] = new State(new int[]{70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,44,170,3,-19,13,-19,11,-19,12,-19,10,-19,17,-19,15,-19,16,-19,5,-19,4,-19,37,-19,39,-19,38,-19,14,-19,40,-19,41,-19,31,-19,28,-19,29,-19,36,-19,27,-19,33,-19,49,-19,50,-19,55,-19,19,-19,21,-19,47,-19,22,-19,48,-19,8,-19,6,-19,91,-19,20,-19,18,-19,46,-19,89,-19,90,-19,88,-19,32,-19,30,-19,34,-19,35,-19},new int[]{-42,256});
    states[256] = new State(-17);
    states[257] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,258,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[258] = new State(new int[]{70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,44,170,3,-19,13,-19,11,-19,12,-19,10,-19,17,-19,15,-19,16,-19,5,-19,4,-19,37,-19,39,-19,38,-19,14,-19,40,-19,41,-19,31,-19,28,-19,29,-19,36,-19,27,-19,33,-19,49,-19,50,-19,55,-19,19,-19,21,-19,47,-19,22,-19,48,-19,8,-19,6,-19,91,-19,20,-19,18,-19,46,-19,89,-19,90,-19,88,-19,32,-19,30,-19,34,-19,35,-19},new int[]{-42,259});
    states[259] = new State(-16);
    states[260] = new State(-21);
    states[261] = new State(-22);
    states[262] = new State(-24);
    states[263] = new State(-130);
    states[264] = new State(-131);
    states[265] = new State(new int[]{44,266});
    states[266] = new State(-132);
    states[267] = new State(new int[]{44,268});
    states[268] = new State(-133);
    states[269] = new State(new int[]{44,270});
    states[270] = new State(-134);
    states[271] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,272,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[272] = new State(new int[]{44,273,70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38});
    states[273] = new State(-135);
    states[274] = new State(new int[]{44,277,49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,275,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[275] = new State(new int[]{44,276,70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38});
    states[276] = new State(-136);
    states[277] = new State(-137);
    states[278] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,279,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[279] = new State(new int[]{44,280,70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38});
    states[280] = new State(-138);
    states[281] = new State(new int[]{6,282});
    states[282] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,283,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[283] = new State(new int[]{7,284,70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38});
    states[284] = new State(new int[]{11,262,13,7,4,236,37,265,39,267,38,269,14,271,40,274,41,278,31,281,28,288,29,293,36,300,27,305,33,312,49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217,44,325,17,-23,15,-23,16,-23},new int[]{-35,285,-23,240,-27,241,-7,263,-36,264,-9,323,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[285] = new State(new int[]{32,286,5,-140,11,-140,13,-140,4,-140,37,-140,39,-140,38,-140,14,-140,40,-140,41,-140,31,-140,28,-140,29,-140,36,-140,27,-140,33,-140,49,-140,50,-140,55,-140,19,-140,21,-140,47,-140,22,-140,48,-140,8,-140,6,-140,91,-140,20,-140,18,-140,46,-140,89,-140,90,-140,88,-140,44,-140,17,-140,15,-140,16,-140,30,-140,34,-140,35,-140});
    states[286] = new State(new int[]{11,262,13,7,4,236,37,265,39,267,38,269,14,271,40,274,41,278,31,281,28,288,29,293,36,300,27,305,33,312,49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217,44,325,17,-23,15,-23,16,-23},new int[]{-35,287,-23,240,-27,241,-7,263,-36,264,-9,323,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[287] = new State(-139);
    states[288] = new State(new int[]{6,289});
    states[289] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,290,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[290] = new State(new int[]{7,291,70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38});
    states[291] = new State(new int[]{11,262,13,7,4,236,37,265,39,267,38,269,14,271,40,274,41,278,31,281,28,288,29,293,36,300,27,305,33,312,49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217,44,325,17,-23,15,-23,16,-23},new int[]{-35,292,-23,240,-27,241,-7,263,-36,264,-9,323,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[292] = new State(-141);
    states[293] = new State(new int[]{11,262,13,7,4,236,37,265,39,267,38,269,14,271,40,274,41,278,31,281,28,288,29,293,36,300,27,305,33,312,49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217,44,325,17,-23,15,-23,16,-23},new int[]{-35,294,-23,240,-27,241,-7,263,-36,264,-9,323,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[294] = new State(new int[]{30,295});
    states[295] = new State(new int[]{6,296});
    states[296] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,297,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[297] = new State(new int[]{7,298,70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38});
    states[298] = new State(new int[]{44,299});
    states[299] = new State(-142);
    states[300] = new State(new int[]{6,301});
    states[301] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-22,302,-9,193,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[302] = new State(new int[]{7,303,43,135});
    states[303] = new State(new int[]{11,262,13,7,4,236,37,265,39,267,38,269,14,271,40,274,41,278,31,281,28,288,29,293,36,300,27,305,33,312,49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217,44,325,17,-23,15,-23,16,-23},new int[]{-35,304,-23,240,-27,241,-7,263,-36,264,-9,323,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[304] = new State(-143);
    states[305] = new State(new int[]{6,306});
    states[306] = new State(new int[]{91,97,20,98},new int[]{-2,307});
    states[307] = new State(new int[]{24,308});
    states[308] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,309,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[309] = new State(new int[]{7,310,70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38});
    states[310] = new State(new int[]{11,262,13,7,4,236,37,265,39,267,38,269,14,271,40,274,41,278,31,281,28,288,29,293,36,300,27,305,33,312,49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217,44,325,17,-23,15,-23,16,-23},new int[]{-35,311,-23,240,-27,241,-7,263,-36,264,-9,323,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[311] = new State(-144);
    states[312] = new State(new int[]{6,313});
    states[313] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,314,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[314] = new State(new int[]{7,315,70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38});
    states[315] = new State(new int[]{4,316});
    states[316] = new State(-148,new int[]{-40,317});
    states[317] = new State(new int[]{5,318,34,319,35,326});
    states[318] = new State(-145);
    states[319] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,320,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[320] = new State(new int[]{45,321,70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38});
    states[321] = new State(-127,new int[]{-37,322});
    states[322] = new State(new int[]{11,262,13,7,4,236,37,265,39,267,38,269,14,271,40,274,41,278,31,281,28,288,29,293,36,300,27,305,33,312,49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217,44,325,5,-149,34,-149,35,-149,17,-23,15,-23,16,-23},new int[]{-35,239,-23,240,-27,241,-7,263,-36,264,-9,323,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[323] = new State(new int[]{44,324,70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38});
    states[324] = new State(-146);
    states[325] = new State(-147);
    states[326] = new State(new int[]{45,327});
    states[327] = new State(-127,new int[]{-37,328});
    states[328] = new State(new int[]{11,262,13,7,4,236,37,265,39,267,38,269,14,271,40,274,41,278,31,281,28,288,29,293,36,300,27,305,33,312,49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217,44,325,5,-150,34,-150,35,-150,17,-23,15,-23,16,-23},new int[]{-35,239,-23,240,-27,241,-7,263,-36,264,-9,323,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[329] = new State(-126);
    states[330] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,331,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[331] = new State(new int[]{70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,44,170,7,-19,43,-19},new int[]{-42,332});
    states[332] = new State(-103);
    states[333] = new State(new int[]{45,334,58,-90,59,-90,8,-90,6,-90,72,-90,74,-90,73,-90,60,-90,51,-90,52,-90,61,-90,49,-90,50,-90,57,-90,62,-90,63,-90,64,-90,65,-90,68,-90,69,-90,66,-90,67,-90,53,-90,56,-90,54,-90,70,-90,71,-90,82,-90,75,-90,76,-90,83,-90,77,-90,84,-90,78,-90,79,-90,80,-90,81,-90,85,-90,86,-90,87,-90,7,-90,43,-90});
    states[334] = new State(new int[]{49,93,50,137,55,146,19,171,21,148,47,173,22,178,48,183,8,190,6,195,91,97,20,98,18,203,46,209,89,215,90,216,88,217},new int[]{-9,335,-10,40,-11,43,-12,46,-13,49,-14,54,-15,63,-16,68,-17,75,-18,82,-19,85,-20,92,-21,194,-2,198,-31,199});
    states[335] = new State(new int[]{70,10,71,12,82,14,75,16,76,18,83,20,77,22,84,24,78,26,79,28,80,30,81,32,85,34,86,36,87,38,7,-122,43,-122});
    states[336] = new State(-120);
    states[337] = new State(new int[]{91,97,20,98},new int[]{-5,338,-2,347});
    states[338] = new State(new int[]{4,339,58,345});
    states[339] = new State(-2,new int[]{-1,340});
    states[340] = new State(new int[]{5,341,13,7,11,262,12,337,10,342,17,-23,15,-23,16,-23},new int[]{-7,3,-23,4,-4,5,-6,6,-27,241});
    states[341] = new State(-9);
    states[342] = new State(new int[]{91,97,20,98},new int[]{-5,343,-2,347});
    states[343] = new State(new int[]{44,344,58,345});
    states[344] = new State(-8);
    states[345] = new State(new int[]{91,97,20,98},new int[]{-2,346});
    states[346] = new State(-11);
    states[347] = new State(-10);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-41, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-1,-7});
    rules[4] = new Rule(-1, new int[]{-1,-23});
    rules[5] = new Rule(-1, new int[]{-1,-4});
    rules[6] = new Rule(-1, new int[]{-1,-6});
    rules[7] = new Rule(-7, new int[]{13,-9,44});
    rules[8] = new Rule(-6, new int[]{10,-5,44});
    rules[9] = new Rule(-4, new int[]{12,-5,4,-1,5});
    rules[10] = new Rule(-5, new int[]{-2});
    rules[11] = new Rule(-5, new int[]{-5,58,-2});
    rules[12] = new Rule(-23, new int[]{-27,-24});
    rules[13] = new Rule(-23, new int[]{-27,-25});
    rules[14] = new Rule(-24, new int[]{17,-2,70,-9,44});
    rules[15] = new Rule(-25, new int[]{-28,-2,45,-8,-42});
    rules[16] = new Rule(-25, new int[]{-28,-2,70,-9,-42});
    rules[17] = new Rule(-25, new int[]{-28,-2,45,-8,70,-9,-42});
    rules[18] = new Rule(-8, new int[]{-21});
    rules[19] = new Rule(-42, new int[]{});
    rules[20] = new Rule(-42, new int[]{44});
    rules[21] = new Rule(-28, new int[]{15});
    rules[22] = new Rule(-28, new int[]{16});
    rules[23] = new Rule(-27, new int[]{});
    rules[24] = new Rule(-27, new int[]{11});
    rules[25] = new Rule(-9, new int[]{-9,70,-9});
    rules[26] = new Rule(-9, new int[]{-9,71,-9});
    rules[27] = new Rule(-9, new int[]{-9,82,-9});
    rules[28] = new Rule(-9, new int[]{-9,75,-9});
    rules[29] = new Rule(-9, new int[]{-9,76,-9});
    rules[30] = new Rule(-9, new int[]{-9,83,-9});
    rules[31] = new Rule(-9, new int[]{-9,77,-9});
    rules[32] = new Rule(-9, new int[]{-9,84,-9});
    rules[33] = new Rule(-9, new int[]{-9,78,-9});
    rules[34] = new Rule(-9, new int[]{-9,79,-9});
    rules[35] = new Rule(-9, new int[]{-9,80,-9});
    rules[36] = new Rule(-9, new int[]{-9,81,-9});
    rules[37] = new Rule(-9, new int[]{-9,85,-9});
    rules[38] = new Rule(-9, new int[]{-9,86,-9});
    rules[39] = new Rule(-9, new int[]{-9,87,-9});
    rules[40] = new Rule(-9, new int[]{-10});
    rules[41] = new Rule(-10, new int[]{-10,54,-10});
    rules[42] = new Rule(-10, new int[]{-11});
    rules[43] = new Rule(-11, new int[]{-11,56,-11});
    rules[44] = new Rule(-11, new int[]{-12});
    rules[45] = new Rule(-12, new int[]{-12,53,-12});
    rules[46] = new Rule(-12, new int[]{-13});
    rules[47] = new Rule(-13, new int[]{-13,66,-13});
    rules[48] = new Rule(-13, new int[]{-13,67,-13});
    rules[49] = new Rule(-13, new int[]{-14});
    rules[50] = new Rule(-14, new int[]{-14,64,-14});
    rules[51] = new Rule(-14, new int[]{-14,65,-14});
    rules[52] = new Rule(-14, new int[]{-14,68,-14});
    rules[53] = new Rule(-14, new int[]{-14,69,-14});
    rules[54] = new Rule(-14, new int[]{-15});
    rules[55] = new Rule(-15, new int[]{-15,62,-15});
    rules[56] = new Rule(-15, new int[]{-15,63,-15});
    rules[57] = new Rule(-15, new int[]{-16});
    rules[58] = new Rule(-16, new int[]{-16,49,-16});
    rules[59] = new Rule(-16, new int[]{-16,50,-16});
    rules[60] = new Rule(-16, new int[]{-16,57,-16});
    rules[61] = new Rule(-16, new int[]{-17});
    rules[62] = new Rule(-17, new int[]{-17,51,-17});
    rules[63] = new Rule(-17, new int[]{-17,52,-17});
    rules[64] = new Rule(-17, new int[]{-17,61,-17});
    rules[65] = new Rule(-17, new int[]{-18});
    rules[66] = new Rule(-18, new int[]{-18,60,-18});
    rules[67] = new Rule(-18, new int[]{-19});
    rules[68] = new Rule(-19, new int[]{-19,72,-19});
    rules[69] = new Rule(-19, new int[]{-19,74,-19});
    rules[70] = new Rule(-19, new int[]{-19,73,-19});
    rules[71] = new Rule(-19, new int[]{-20});
    rules[72] = new Rule(-20, new int[]{49,-21});
    rules[73] = new Rule(-20, new int[]{50,-21});
    rules[74] = new Rule(-20, new int[]{55,-21});
    rules[75] = new Rule(-20, new int[]{19,-21});
    rules[76] = new Rule(-20, new int[]{-21});
    rules[77] = new Rule(-21, new int[]{-21,58,-2});
    rules[78] = new Rule(-21, new int[]{-21,59,-2});
    rules[79] = new Rule(-21, new int[]{21,6,-38,7});
    rules[80] = new Rule(-21, new int[]{21,68,-8,69,6,-39,7});
    rules[81] = new Rule(-21, new int[]{47,68,-8,69});
    rules[82] = new Rule(-21, new int[]{22,6,-39,7});
    rules[83] = new Rule(-21, new int[]{48,68,-8,69});
    rules[84] = new Rule(-21, new int[]{48,68,-8,43,88,69});
    rules[85] = new Rule(-21, new int[]{-21,8,-22,9});
    rules[86] = new Rule(-21, new int[]{8,-22,9});
    rules[87] = new Rule(-21, new int[]{-21,6,7});
    rules[88] = new Rule(-21, new int[]{-21,6,-29,7});
    rules[89] = new Rule(-21, new int[]{6,-9,7});
    rules[90] = new Rule(-21, new int[]{-2});
    rules[91] = new Rule(-21, new int[]{-31});
    rules[92] = new Rule(-21, new int[]{-31,-36});
    rules[93] = new Rule(-21, new int[]{-31,42,-9});
    rules[94] = new Rule(-21, new int[]{46,6,-38,7,42,-9});
    rules[95] = new Rule(-21, new int[]{89});
    rules[96] = new Rule(-21, new int[]{90});
    rules[97] = new Rule(-21, new int[]{88});
    rules[98] = new Rule(-38, new int[]{-38,43,-2});
    rules[99] = new Rule(-38, new int[]{-2});
    rules[100] = new Rule(-39, new int[]{-39,43,-26});
    rules[101] = new Rule(-39, new int[]{-26});
    rules[102] = new Rule(-26, new int[]{-2,45,-8,-42});
    rules[103] = new Rule(-26, new int[]{-2,70,-9,-42});
    rules[104] = new Rule(-26, new int[]{-2,45,-8,70,-9,-42});
    rules[105] = new Rule(-31, new int[]{18,6,-32,7,62,-8});
    rules[106] = new Rule(-31, new int[]{18,6,7,62,-8});
    rules[107] = new Rule(-31, new int[]{18,6,-32,7});
    rules[108] = new Rule(-31, new int[]{18,6,7});
    rules[109] = new Rule(-32, new int[]{-32,43,-33});
    rules[110] = new Rule(-32, new int[]{-33});
    rules[111] = new Rule(-33, new int[]{-34,-2,45,-8,70,-9});
    rules[112] = new Rule(-33, new int[]{-34,-2,70,-9});
    rules[113] = new Rule(-33, new int[]{-34,-2,45,-8});
    rules[114] = new Rule(-34, new int[]{});
    rules[115] = new Rule(-34, new int[]{-34,24});
    rules[116] = new Rule(-34, new int[]{-34,25});
    rules[117] = new Rule(-34, new int[]{-34,23});
    rules[118] = new Rule(-34, new int[]{-34,26});
    rules[119] = new Rule(-29, new int[]{-29,43,-30});
    rules[120] = new Rule(-29, new int[]{-30});
    rules[121] = new Rule(-30, new int[]{-9});
    rules[122] = new Rule(-30, new int[]{-2,45,-9});
    rules[123] = new Rule(-22, new int[]{-9});
    rules[124] = new Rule(-22, new int[]{-22,43,-9});
    rules[125] = new Rule(-36, new int[]{4,-37,5});
    rules[126] = new Rule(-36, new int[]{4,5});
    rules[127] = new Rule(-37, new int[]{});
    rules[128] = new Rule(-37, new int[]{-37,-35});
    rules[129] = new Rule(-35, new int[]{-23});
    rules[130] = new Rule(-35, new int[]{-7});
    rules[131] = new Rule(-35, new int[]{-36});
    rules[132] = new Rule(-35, new int[]{37,44});
    rules[133] = new Rule(-35, new int[]{39,44});
    rules[134] = new Rule(-35, new int[]{38,44});
    rules[135] = new Rule(-35, new int[]{14,-9,44});
    rules[136] = new Rule(-35, new int[]{40,-9,44});
    rules[137] = new Rule(-35, new int[]{40,44});
    rules[138] = new Rule(-35, new int[]{41,-9,44});
    rules[139] = new Rule(-35, new int[]{31,6,-9,7,-35,32,-35});
    rules[140] = new Rule(-35, new int[]{31,6,-9,7,-35});
    rules[141] = new Rule(-35, new int[]{28,6,-9,7,-35});
    rules[142] = new Rule(-35, new int[]{29,-35,30,6,-9,7,44});
    rules[143] = new Rule(-35, new int[]{36,6,-22,7,-35});
    rules[144] = new Rule(-35, new int[]{27,6,-2,24,-9,7,-35});
    rules[145] = new Rule(-35, new int[]{33,6,-9,7,4,-40,5});
    rules[146] = new Rule(-35, new int[]{-9,44});
    rules[147] = new Rule(-35, new int[]{44});
    rules[148] = new Rule(-40, new int[]{});
    rules[149] = new Rule(-40, new int[]{-40,34,-9,45,-37});
    rules[150] = new Rule(-40, new int[]{-40,35,45,-37});
    rules[151] = new Rule(-2, new int[]{91});
    rules[152] = new Rule(-2, new int[]{20,59,-3,59});
    rules[153] = new Rule(-3, new int[]{49});
    rules[154] = new Rule(-3, new int[]{50});
    rules[155] = new Rule(-3, new int[]{51});
    rules[156] = new Rule(-3, new int[]{52});
    rules[157] = new Rule(-3, new int[]{53});
    rules[158] = new Rule(-3, new int[]{54});
    rules[159] = new Rule(-3, new int[]{55});
    rules[160] = new Rule(-3, new int[]{56});
    rules[161] = new Rule(-3, new int[]{57});
    rules[162] = new Rule(-3, new int[]{58});
    rules[163] = new Rule(-3, new int[]{59});
    rules[164] = new Rule(-3, new int[]{60});
    rules[165] = new Rule(-3, new int[]{61});
    rules[166] = new Rule(-3, new int[]{62});
    rules[167] = new Rule(-3, new int[]{63});
    rules[168] = new Rule(-3, new int[]{64});
    rules[169] = new Rule(-3, new int[]{65});
    rules[170] = new Rule(-3, new int[]{66});
    rules[171] = new Rule(-3, new int[]{67});
    rules[172] = new Rule(-3, new int[]{68});
    rules[173] = new Rule(-3, new int[]{69});
    rules[174] = new Rule(-3, new int[]{70});
    rules[175] = new Rule(-3, new int[]{71});
    rules[176] = new Rule(-3, new int[]{72});
    rules[177] = new Rule(-3, new int[]{73});
    rules[178] = new Rule(-3, new int[]{74});
    rules[179] = new Rule(-3, new int[]{8,9});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)PsiTokenType.error, (int)PsiTokenType.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> /* empty */
#line 62 "Psi.y"
                                  { CurrentSemanticValue.Module = new Module(); }
#line default
        break;
      case 3: // program -> program, assertion
#line 63 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Assertion); }
#line default
        break;
      case 4: // program -> program, declaration
#line 64 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Declaration); }
#line default
        break;
      case 5: // program -> program, module
#line 65 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Module); }
#line default
        break;
      case 6: // program -> program, import
#line 66 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Name); }
#line default
        break;
      case 7: // assertion -> ASSERT, expression, TERMINATOR
#line 70 "Psi.y"
   {
            	CurrentSemanticValue.Assertion = new Assertion(ValueStack[ValueStack.Depth-2].Expression); 
            }
#line default
        break;
      case 8: // import -> IMPORT, modname, TERMINATOR
#line 76 "Psi.y"
   {
				CurrentSemanticValue.Name = ValueStack[ValueStack.Depth-2].Name;
			}
#line default
        break;
      case 9: // module -> MODULE, modname, CURLY_O, program, CURLY_C
#line 82 "Psi.y"
   {
				CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module;
				CurrentSemanticValue.Module.Name = ValueStack[ValueStack.Depth-4].Name;
			}
#line default
        break;
      case 10: // modname -> identifier
#line 89 "Psi.y"
   {
            	CurrentSemanticValue.Name = new CompoundName(ValueStack[ValueStack.Depth-1].String); 
            }
#line default
        break;
      case 11: // modname -> modname, DOT, identifier
#line 93 "Psi.y"
   {
            	CurrentSemanticValue.Name = ValueStack[ValueStack.Depth-3].Name;
            	CurrentSemanticValue.Name.Add(ValueStack[ValueStack.Depth-1].String);
        	}
#line default
        break;
      case 12: // declaration -> export, typedecl
#line 100 "Psi.y"
   {
            	CurrentSemanticValue.Declaration = ValueStack[ValueStack.Depth-1].Declaration;
            	CurrentSemanticValue.Declaration.IsExported = (bool)ValueStack[ValueStack.Depth-2].Boolean;
            }
#line default
        break;
      case 13: // declaration -> export, vardecl
#line 105 "Psi.y"
   {
            	CurrentSemanticValue.Declaration = ValueStack[ValueStack.Depth-1].Declaration;
            	CurrentSemanticValue.Declaration.IsExported = (bool)ValueStack[ValueStack.Depth-2].Boolean;
            }
#line default
        break;
      case 14: // typedecl -> TYPE, identifier, IS, expression, TERMINATOR
#line 112 "Psi.y"
   {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, TypeDeclaration, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = true;
            }
#line default
        break;
      case 15: // vardecl -> storage, identifier, COLON, type, terminator
#line 119 "Psi.y"
   {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].Expression, null);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 16: // vardecl -> storage, identifier, IS, expression, terminator
#line 124 "Psi.y"
            {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, Undefined, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 17: // vardecl -> storage, identifier, COLON, type, IS, expression, terminator
#line 129 "Psi.y"
   {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-6].String, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-7].Boolean;
            }
#line default
        break;
      case 18: // type -> value
#line 136 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 21: // storage -> CONST
#line 144 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 22: // storage -> VAR
#line 145 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 23: // export -> /* empty */
#line 148 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 24: // export -> EXPORT
#line 149 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 25: // expression -> expression, IS, expression
#line 153 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.CopyAssign);
			}
#line default
        break;
      case 26: // expression -> expression, ASSIGN, expression
#line 157 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.SemanticAssign);
			}
#line default
        break;
      case 27: // expression -> expression, WB_CONCAT, expression
#line 161 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackConcat);
			}
#line default
        break;
      case 28: // expression -> expression, WB_PLUS, expression
#line 165 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackPlus);
			}
#line default
        break;
      case 29: // expression -> expression, WB_MINUS, expression
#line 169 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMinus);
			}
#line default
        break;
      case 30: // expression -> expression, WB_EXP, expression
#line 173 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackExponentiate);
			}
#line default
        break;
      case 31: // expression -> expression, WB_MULT, expression
#line 177 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMultiply);
			}
#line default
        break;
      case 32: // expression -> expression, WB_MOD, expression
#line 181 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackModulo);
			}
#line default
        break;
      case 33: // expression -> expression, WB_DIV, expression
#line 185 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackDivide);
			}
#line default
        break;
      case 34: // expression -> expression, WB_AND, expression
#line 189 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackAnd);
			}
#line default
        break;
      case 35: // expression -> expression, WB_OR, expression
#line 193 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackOr);
			}
#line default
        break;
      case 36: // expression -> expression, WB_XOR, expression
#line 197 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackXor);
			}
#line default
        break;
      case 37: // expression -> expression, WB_ASR, expression
#line 201 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackArithmeticShiftRight);
			}
#line default
        break;
      case 38: // expression -> expression, WB_SHL, expression
#line 205 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftLeft);
			}
#line default
        break;
      case 39: // expression -> expression, WB_SHR, expression
#line 209 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftRight);
			}
#line default
        break;
      case 40: // expression -> expr_or
#line 213 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 41: // expr_or -> expr_or, OR, expr_or
#line 219 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Or);
			}
#line default
        break;
      case 42: // expr_or -> expr_xor
#line 223 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 43: // expr_xor -> expr_xor, XOR, expr_xor
#line 229 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Xor);
			}
#line default
        break;
      case 44: // expr_xor -> expr_and
#line 233 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 45: // expr_and -> expr_and, AND, expr_and
#line 239 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.And);
			}
#line default
        break;
      case 46: // expr_and -> equality
#line 243 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 47: // equality -> equality, EQUAL, equality
#line 249 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Equals);
			}
#line default
        break;
      case 48: // equality -> equality, NEQUAL, equality
#line 253 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.NotEquals);
			}
#line default
        break;
      case 49: // equality -> comparison
#line 257 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 50: // comparison -> comparison, LEQUAL, comparison
#line 263 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.LessOrEqual);
			}
#line default
        break;
      case 51: // comparison -> comparison, GEQUAL, comparison
#line 267 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.MoreOrEqual);
			}
#line default
        break;
      case 52: // comparison -> comparison, LESS, comparison
#line 271 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Less);
			}
#line default
        break;
      case 53: // comparison -> comparison, MORE, comparison
#line 275 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.More);
			}
#line default
        break;
      case 54: // comparison -> expr_arrows
#line 279 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 55: // expr_arrows -> expr_arrows, FORWARD, expr_arrows
#line 285 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Forward);
			}
#line default
        break;
      case 56: // expr_arrows -> expr_arrows, BACKWARD, expr_arrows
#line 289 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Backward);
			}
#line default
        break;
      case 57: // expr_arrows -> sum
#line 293 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 58: // sum -> sum, PLUS, sum
#line 299 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 59: // sum -> sum, MINUS, sum
#line 303 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 60: // sum -> sum, CONCAT, sum
#line 307 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Concat);
			}
#line default
        break;
      case 61: // sum -> term
#line 311 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 62: // term -> term, MULT, term
#line 317 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Multiply);
			}
#line default
        break;
      case 63: // term -> term, DIV, term
#line 321 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Divide);
			}
#line default
        break;
      case 64: // term -> term, MOD, term
#line 325 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Modulo);
			}
#line default
        break;
      case 65: // term -> expo
#line 329 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 66: // expo -> expo, EXP, expo
#line 335 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Exponentiate);
			}
#line default
        break;
      case 67: // expo -> shifting
#line 339 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 68: // shifting -> shifting, ASR, shifting
#line 345 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ArithmeticShiftRight);
			}
#line default
        break;
      case 69: // shifting -> shifting, SHR, shifting
#line 349 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftRight);
			}
#line default
        break;
      case 70: // shifting -> shifting, SHL, shifting
#line 353 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftLeft);
			}
#line default
        break;
      case 71: // shifting -> unary
#line 357 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 72: // unary -> PLUS, value
#line 363 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 73: // unary -> MINUS, value
#line 367 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 74: // unary -> INVERT, value
#line 371 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Invert);
			}
#line default
        break;
      case 75: // unary -> NEW, value
#line 375 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.New);
			}
#line default
        break;
      case 76: // unary -> value
#line 379 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 77: // value -> value, DOT, identifier
#line 385 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyDot(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 78: // value -> value, META, identifier
#line 389 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyMeta(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 79: // value -> ENUM, ROUND_O, idlist, ROUND_C
#line 393 "Psi.y"
   {
				CurrentSemanticValue.Expression = new EnumTypeLiteral(ValueStack[ValueStack.Depth-2].StringList);
			}
#line default
        break;
      case 80: // value -> ENUM, LESS, type, MORE, ROUND_O, fieldlist, ROUND_C
#line 397 "Psi.y"
   {
				CurrentSemanticValue.Expression = new TypedEnumTypeLiteral(ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-2].FieldList);
			}
#line default
        break;
      case 81: // value -> REF, LESS, type, MORE
#line 401 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ReferenceTypeLiteral(ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 82: // value -> RECORD, ROUND_O, fieldlist, ROUND_C
#line 405 "Psi.y"
   {
				CurrentSemanticValue.Expression = new RecordTypeLiteral(ValueStack[ValueStack.Depth-2].FieldList);
			}
#line default
        break;
      case 83: // value -> ARRAY, LESS, type, MORE
#line 409 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayTypeLiteral(ValueStack[ValueStack.Depth-2].Expression, 1);
			}
#line default
        break;
      case 84: // value -> ARRAY, LESS, type, COMMA, NUMBER, MORE
#line 413 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayTypeLiteral(ValueStack[ValueStack.Depth-4].Expression, int.Parse(ValueStack[ValueStack.Depth-2].String));
			}
#line default
        break;
      case 85: // value -> value, SQUARE_O, exprlist, SQUARE_C
#line 417 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayIndexingExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ExpressionList);
			}
#line default
        break;
      case 86: // value -> SQUARE_O, exprlist, SQUARE_C
#line 421 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayLiteral(ValueStack[ValueStack.Depth-2].ExpressionList);
			}
#line default
        break;
      case 87: // value -> value, ROUND_O, ROUND_C
#line 425 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-3].Expression, new List<Argument>());
			}
#line default
        break;
      case 88: // value -> value, ROUND_O, arglist, ROUND_C
#line 429 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ArgumentList);
			}
#line default
        break;
      case 89: // value -> ROUND_O, expression, ROUND_C
#line 433 "Psi.y"
            {
                CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-2].Expression;
            }
#line default
        break;
      case 90: // value -> identifier
#line 437 "Psi.y"
   {
            	CurrentSemanticValue.Expression = new VariableReference(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 91: // value -> functiontype
#line 441 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].FunctionType;
			}
#line default
        break;
      case 92: // value -> functiontype, block
#line 445 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionLiteral(ValueStack[ValueStack.Depth-2].FunctionType, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 93: // value -> functiontype, MAPSTO, expression
#line 449 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionLiteral(ValueStack[ValueStack.Depth-3].FunctionType, new ExpressionStatement(ValueStack[ValueStack.Depth-1].Expression));
			}
#line default
        break;
      case 94: // value -> LAMBDA, ROUND_O, idlist, ROUND_C, MAPSTO, expression
#line 453 "Psi.y"
   {
				CurrentSemanticValue.Expression = new LambdaLiteral(ValueStack[ValueStack.Depth-4].StringList, new ExpressionStatement(ValueStack[ValueStack.Depth-1].Expression));
			}
#line default
        break;
      case 95: // value -> STRING
#line 457 "Psi.y"
   {
				CurrentSemanticValue.Expression = new StringLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 96: // value -> ENUMVAL
#line 461 "Psi.y"
   {
				CurrentSemanticValue.Expression = new EnumLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 97: // value -> NUMBER
#line 465 "Psi.y"
   {
				CurrentSemanticValue.Expression = new NumberLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 98: // idlist -> idlist, COMMA, identifier
#line 471 "Psi.y"
   {
				CurrentSemanticValue.StringList = ValueStack[ValueStack.Depth-3].StringList;
				CurrentSemanticValue.StringList.Add(ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 99: // idlist -> identifier
#line 476 "Psi.y"
   {
				CurrentSemanticValue.StringList = new List<string>();
				CurrentSemanticValue.StringList.Add(ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 100: // fieldlist -> fieldlist, COMMA, field
#line 483 "Psi.y"
   {
				CurrentSemanticValue.FieldList = ValueStack[ValueStack.Depth-3].FieldList;
				CurrentSemanticValue.FieldList.Add(ValueStack[ValueStack.Depth-1].Declaration);	
			}
#line default
        break;
      case 101: // fieldlist -> field
#line 488 "Psi.y"
   {
				CurrentSemanticValue.FieldList = new List<Declaration>();
				CurrentSemanticValue.FieldList.Add(ValueStack[ValueStack.Depth-1].Declaration);
			}
#line default
        break;
      case 102: // field -> identifier, COLON, type, terminator
#line 494 "Psi.y"
                                               {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].Expression, null);
            	CurrentSemanticValue.Declaration.IsField = true;
            }
#line default
        break;
      case 103: // field -> identifier, IS, expression, terminator
#line 498 "Psi.y"
                                                     {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, Undefined, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsField = true;
            }
#line default
        break;
      case 104: // field -> identifier, COLON, type, IS, expression, terminator
#line 502 "Psi.y"
                                                             {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-6].String, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsField = true;
            }
#line default
        break;
      case 105: // functiontype -> FN, ROUND_O, paramlist, ROUND_C, FORWARD, type
#line 509 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(ValueStack[ValueStack.Depth-4].ParameterList, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 106: // functiontype -> FN, ROUND_O, ROUND_C, FORWARD, type
#line 513 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(new List<Parameter>(), ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 107: // functiontype -> FN, ROUND_O, paramlist, ROUND_C
#line 517 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(ValueStack[ValueStack.Depth-2].ParameterList, Void);
			}
#line default
        break;
      case 108: // functiontype -> FN, ROUND_O, ROUND_C
#line 521 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(new List<Parameter>(), Void);
			}
#line default
        break;
      case 109: // paramlist -> paramlist, COMMA, parameter
#line 527 "Psi.y"
   {
				CurrentSemanticValue.ParameterList = ValueStack[ValueStack.Depth-3].ParameterList;
				CurrentSemanticValue.ParameterList.Add(ValueStack[ValueStack.Depth-1].Parameter);
			}
#line default
        break;
      case 110: // paramlist -> parameter
#line 532 "Psi.y"
   {
				CurrentSemanticValue.ParameterList = new List<Parameter>();
				CurrentSemanticValue.ParameterList.Add(ValueStack[ValueStack.Depth-1].Parameter);
			}
#line default
        break;
      case 111: // parameter -> prefix, identifier, COLON, type, IS, expression
#line 539 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-6].ParameterPrefix, ValueStack[ValueStack.Depth-5].String, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 112: // parameter -> prefix, identifier, IS, expression
#line 543 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-4].ParameterPrefix, ValueStack[ValueStack.Depth-3].String, Undefined, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 113: // parameter -> prefix, identifier, COLON, type
#line 547 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-4].ParameterPrefix, ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].Expression, null);
			}
#line default
        break;
      case 114: // prefix -> /* empty */
#line 553 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ParameterPrefix.None;
			}
#line default
        break;
      case 115: // prefix -> prefix, IN
#line 557 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.In;
			}
#line default
        break;
      case 116: // prefix -> prefix, OUT
#line 561 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.Out;
			}
#line default
        break;
      case 117: // prefix -> prefix, INOUT
#line 565 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.InOut;
			}
#line default
        break;
      case 118: // prefix -> prefix, THIS
#line 569 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.This;
			}
#line default
        break;
      case 119: // arglist -> arglist, COMMA, argument
#line 575 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = ValueStack[ValueStack.Depth-3].ArgumentList;
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 120: // arglist -> argument
#line 580 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = new List<Argument>();
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 121: // argument -> expression
#line 587 "Psi.y"
   {
				CurrentSemanticValue.Argument = new PositionalArgument(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 122: // argument -> identifier, COLON, expression
#line 591 "Psi.y"
   {
				CurrentSemanticValue.Argument = new NamedArgument(ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 123: // exprlist -> expression
#line 597 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = new List<Expression>();
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 124: // exprlist -> exprlist, COMMA, expression
#line 602 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = ValueStack[ValueStack.Depth-3].ExpressionList;
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 125: // block -> CURLY_O, stmtlist, CURLY_C
#line 609 "Psi.y"
   {
				CurrentSemanticValue.Statement = new Block(ValueStack[ValueStack.Depth-2].StatementList);
			}
#line default
        break;
      case 126: // block -> CURLY_O, CURLY_C
#line 613 "Psi.y"
   {
				CurrentSemanticValue.Statement = new Block(new List<Statement>());
			}
#line default
        break;
      case 127: // stmtlist -> /* empty */
#line 619 "Psi.y"
   {
				CurrentSemanticValue.StatementList = new List<Statement>();
			}
#line default
        break;
      case 128: // stmtlist -> stmtlist, statement
#line 623 "Psi.y"
   {
				CurrentSemanticValue.StatementList = ValueStack[ValueStack.Depth-2].StatementList;
				CurrentSemanticValue.StatementList.Add(ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 129: // statement -> declaration
#line 630 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Declaration;
			}
#line default
        break;
      case 130: // statement -> assertion
#line 634 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Assertion;
			}
#line default
        break;
      case 131: // statement -> block
#line 638 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Statement;
			}
#line default
        break;
      case 132: // statement -> BREAK, TERMINATOR
#line 642 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Break);
			}
#line default
        break;
      case 133: // statement -> FALLTROUGH, TERMINATOR
#line 646 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Fallthrough);
			}
#line default
        break;
      case 134: // statement -> CONTINUE, TERMINATOR
#line 650 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Continue);
			}
#line default
        break;
      case 135: // statement -> ERROR, expression, TERMINATOR
#line 654 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Error, ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 136: // statement -> RETURN, expression, TERMINATOR
#line 658 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Return, ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 137: // statement -> RETURN, TERMINATOR
#line 662 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Return);
			}
#line default
        break;
      case 138: // statement -> GOTO, expression, TERMINATOR
#line 666 "Psi.y"
   {
				CurrentSemanticValue.Statement = new FlowBreakStatement(FlowBreakType.Goto, ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 139: // statement -> IF, ROUND_O, expression, ROUND_C, statement, ELSE, statement
#line 670 "Psi.y"
   {
				CurrentSemanticValue.Statement = new IfElseStatement(ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-3].Statement, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 140: // statement -> IF, ROUND_O, expression, ROUND_C, statement
#line 674 "Psi.y"
   {
				CurrentSemanticValue.Statement = new IfElseStatement(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement, null);
			}
#line default
        break;
      case 141: // statement -> WHILE, ROUND_O, expression, ROUND_C, statement
#line 678 "Psi.y"
   {
				CurrentSemanticValue.Statement = new WhileLoopStatement(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 142: // statement -> LOOP, statement, UNTIL, ROUND_O, expression, ROUND_C, TERMINATOR
#line 682 "Psi.y"
   {
				CurrentSemanticValue.Statement = new LoopUntilStatement(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-6].Statement);
			}
#line default
        break;
      case 143: // statement -> RESTRICT, ROUND_O, exprlist, ROUND_C, statement
#line 686 "Psi.y"
   {
				CurrentSemanticValue.Statement = new RestrictStatement(ValueStack[ValueStack.Depth-3].ExpressionList, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 144: // statement -> FOR, ROUND_O, identifier, IN, expression, ROUND_C, statement
#line 690 "Psi.y"
   {
				CurrentSemanticValue.Statement = new ForLoopStatement(ValueStack[ValueStack.Depth-5].String, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 145: // statement -> SELECT, ROUND_O, expression, ROUND_C, CURLY_O, options, CURLY_C
#line 694 "Psi.y"
   {
				CurrentSemanticValue.Statement = new SelectStatement(ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-2].SelectOptions);
			}
#line default
        break;
      case 146: // statement -> expression, TERMINATOR
#line 698 "Psi.y"
   {
				CurrentSemanticValue.Statement = new ExpressionStatement(ValueStack[ValueStack.Depth-2].Expression);
			}
#line default
        break;
      case 147: // statement -> TERMINATOR
#line 702 "Psi.y"
   {
				CurrentSemanticValue.Statement = Statement.Null;
			}
#line default
        break;
      case 148: // options -> /* empty */
#line 708 "Psi.y"
   {
				CurrentSemanticValue.SelectOptions = new List<SelectOption>();
			}
#line default
        break;
      case 149: // options -> options, WHEN, expression, COLON, stmtlist
#line 712 "Psi.y"
   {
				CurrentSemanticValue.SelectOptions = ValueStack[ValueStack.Depth-5].SelectOptions;
				CurrentSemanticValue.SelectOptions.Add(new SelectOption(ValueStack[ValueStack.Depth-3].Expression, new Block(ValueStack[ValueStack.Depth-1].StatementList)));
			}
#line default
        break;
      case 150: // options -> options, OTHERWISE, COLON, stmtlist
#line 717 "Psi.y"
   {
				CurrentSemanticValue.SelectOptions = ValueStack[ValueStack.Depth-4].SelectOptions;
				CurrentSemanticValue.SelectOptions.Add(new SelectOption(new Block(ValueStack[ValueStack.Depth-1].StatementList)));
			}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((PsiTokenType)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((PsiTokenType)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 764 "Psi.y"
public PsiParser(PsiLexer lexer) : base(lexer) 
{ 
	
}

public Module Result => this.CurrentSemanticValue.Module;

public static Expression TypeDeclaration { get; } = new VariableReference("<type>");

public static Expression Undefined { get; } = new VariableReference("<?>");

public static Expression Void { get; } = new VariableReference("<void>");

private static Expression Apply(Expression lhs, Expression rhs, PsiOperator op)
{
	return new BinaryOperation(op, lhs, rhs);
}

private static Expression Apply(Expression expr, PsiOperator op)
{
	return new UnaryOperation(op, expr);
}

private static Expression ApplyDot(Expression exp, string field)
{
	return new DotExpression(exp, field);
}

private static Expression ApplyMeta(Expression exp, string field)
{
	return new MetaExpression(exp, field);
}
#line default
}
}
