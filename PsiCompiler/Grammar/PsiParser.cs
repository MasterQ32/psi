// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  rechenknecht
// DateTime: 15.10.2017 02:07:05
// UserName: felix
// Input file <Psi.y - 15.10.2017 02:02:51>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace PsiCompiler
{
public enum PsiTokenType {error=2,EOF=3,CURLY_O=4,CURLY_C=5,ROUND_O=6,
    ROUND_C=7,POINTY_O=8,POINTY_C=9,SQUARE_O=10,SQUARE_C=11,IMPORT=12,
    EXPORT=13,MODULE=14,ASSERT=15,ERROR=16,CONST=17,VAR=18,
    TYPE=19,FN=20,NEW=21,OPERATOR=22,ENUM=23,RECORD=24,
    OPTION=25,INOUT=26,IN=27,OUT=28,THIS=29,FOR=30,
    WHILE=31,LOOP=32,UNTIL=33,IF=34,ELSE=35,SELECT=36,
    WHEN=37,OTHERWISE=38,RESTRICT=39,BREAK=40,CONTINUE=41,NEXT=42,
    RETURN=43,GOTO=44,MAPSTO=45,FORWARD=46,BACKWAR=47,LEQUAL=48,
    GEQUAL=49,EQUAL=50,NEQUAL=51,LESS=52,MORE=53,IS=54,
    ASSIGN=55,CONCAT=56,DOT=57,META=58,COMMA=59,TERMINATOR=60,
    COLON=61,LAMBDA=62,PLUS=63,MINUS=64,EXP=65,MULT=66,
    MOD=67,DIV=68,AND=69,OR=70,INVERT=71,XOR=72,
    NUMBER=73,STRING=74,ENUMVAL=75,IDENT=76,Comment=77,LongComment=78,
    Whitespace=79,UMINUS=80,UPLUS=81,UINVERT=82};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class PsiParser: ShiftReduceParser<ParserNode, LexLocation>
{
  // Verbatim content from Psi.y - 15.10.2017 02:02:51
#line 2 "Psi.y"
    Dictionary<string,int> regs = new Dictionary<string,int>();
#line default
  // End verbatim content from Psi.y - 15.10.2017 02:02:51

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[24];
  private static State[] states = new State[42];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "assertion", "declaration", "module", "expression", 
      "modname", "export", "typedecl", "vardecl", "type", "storage", "terminator", 
      };

  static PsiParser() {
    states[0] = new State(-2,new int[]{-1,1});
    states[1] = new State(new int[]{3,2,15,6,13,33,14,34,19,-20,17,-20,18,-20},new int[]{-3,3,-4,4,-5,5,-8,10});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(-5);
    states[6] = new State(new int[]{73,9},new int[]{-6,7});
    states[7] = new State(new int[]{60,8});
    states[8] = new State(-6);
    states[9] = new State(-23);
    states[10] = new State(new int[]{19,13,17,31,18,32},new int[]{-9,11,-10,12,-12,19});
    states[11] = new State(-10);
    states[12] = new State(-11);
    states[13] = new State(new int[]{76,14});
    states[14] = new State(new int[]{54,15});
    states[15] = new State(new int[]{76,18},new int[]{-11,16});
    states[16] = new State(new int[]{60,17});
    states[17] = new State(-12);
    states[18] = new State(-22);
    states[19] = new State(new int[]{76,20});
    states[20] = new State(new int[]{61,21,54,28});
    states[21] = new State(new int[]{76,18},new int[]{-11,22});
    states[22] = new State(new int[]{54,24,60,27,3,-16,15,-16,13,-16,14,-16,19,-16,17,-16,18,-16,5,-16},new int[]{-13,23});
    states[23] = new State(-13);
    states[24] = new State(new int[]{73,9},new int[]{-6,25});
    states[25] = new State(new int[]{60,27,3,-16,15,-16,13,-16,14,-16,19,-16,17,-16,18,-16,5,-16},new int[]{-13,26});
    states[26] = new State(-15);
    states[27] = new State(-17);
    states[28] = new State(new int[]{73,9},new int[]{-6,29});
    states[29] = new State(new int[]{60,27,3,-16,15,-16,13,-16,14,-16,19,-16,17,-16,18,-16,5,-16},new int[]{-13,30});
    states[30] = new State(-14);
    states[31] = new State(-18);
    states[32] = new State(-19);
    states[33] = new State(-21);
    states[34] = new State(new int[]{76,41},new int[]{-7,35});
    states[35] = new State(new int[]{4,36,57,39});
    states[36] = new State(-2,new int[]{-1,37});
    states[37] = new State(new int[]{5,38,15,6,13,33,14,34,19,-20,17,-20,18,-20},new int[]{-3,3,-4,4,-5,5,-8,10});
    states[38] = new State(-7);
    states[39] = new State(new int[]{76,40});
    states[40] = new State(-9);
    states[41] = new State(-8);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-1,-3});
    rules[4] = new Rule(-1, new int[]{-1,-4});
    rules[5] = new Rule(-1, new int[]{-1,-5});
    rules[6] = new Rule(-3, new int[]{15,-6,60});
    rules[7] = new Rule(-5, new int[]{14,-7,4,-1,5});
    rules[8] = new Rule(-7, new int[]{76});
    rules[9] = new Rule(-7, new int[]{-7,57,76});
    rules[10] = new Rule(-4, new int[]{-8,-9});
    rules[11] = new Rule(-4, new int[]{-8,-10});
    rules[12] = new Rule(-9, new int[]{19,76,54,-11,60});
    rules[13] = new Rule(-10, new int[]{-12,76,61,-11,-13});
    rules[14] = new Rule(-10, new int[]{-12,76,54,-6,-13});
    rules[15] = new Rule(-10, new int[]{-12,76,61,-11,54,-6,-13});
    rules[16] = new Rule(-13, new int[]{});
    rules[17] = new Rule(-13, new int[]{60});
    rules[18] = new Rule(-12, new int[]{17});
    rules[19] = new Rule(-12, new int[]{18});
    rules[20] = new Rule(-8, new int[]{});
    rules[21] = new Rule(-8, new int[]{13});
    rules[22] = new Rule(-11, new int[]{76});
    rules[23] = new Rule(-6, new int[]{73});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)PsiTokenType.error, (int)PsiTokenType.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((PsiTokenType)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((PsiTokenType)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 78 "Psi.y"
public PsiParser(PsiLexer lexer) : base(lexer) 
{ 
	
}
#line default
}
}
