// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-2U3VU0H
// DateTime: 18.10.2017 19:31:43
// UserName: Felix
// Input file <Psi.y - 18.10.2017 19:31:35>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace PsiCompiler.Grammar
{
public enum PsiTokenType {error=2,EOF=3,CURLY_O=4,CURLY_C=5,ROUND_O=6,
    ROUND_C=7,SQUARE_O=8,SQUARE_C=9,IMPORT=10,EXPORT=11,MODULE=12,
    ASSERT=13,ERROR=14,CONST=15,VAR=16,TYPE=17,FN=18,
    NEW=19,OPERATOR=20,ENUM=21,RECORD=22,OPTION=23,INOUT=24,
    IN=25,OUT=26,THIS=27,FOR=28,WHILE=29,LOOP=30,
    UNTIL=31,IF=32,ELSE=33,SELECT=34,WHEN=35,OTHERWISE=36,
    RESTRICT=37,BREAK=38,CONTINUE=39,NEXT=40,RETURN=41,GOTO=42,
    MAPSTO=43,COMMA=44,TERMINATOR=45,COLON=46,LAMBDA=47,PLUS=48,
    MINUS=49,MULT=50,DIV=51,AND=52,OR=53,INVERT=54,
    XOR=55,CONCAT=56,DOT=57,META=58,EXP=59,MOD=60,
    FORWARD=61,BACKWARD=62,LEQUAL=63,GEQUAL=64,EQUAL=65,NEQUAL=66,
    LESS=67,MORE=68,IS=69,ASSIGN=70,ASR=71,SHL=72,
    SHR=73,WB_PLUS=74,WB_MINUS=75,WB_MULT=76,WB_DIV=77,WB_AND=78,
    WB_OR=79,WB_INVERT=80,WB_XOR=81,WB_CONCAT=82,WB_EXP=83,WB_MOD=84,
    WB_ASR=85,WB_SHL=86,WB_SHR=87,NUMBER=88,STRING=89,ENUMVAL=90,
    IDENT=91,Comment=92,LongComment=93,Whitespace=94,UMINUS=95,UPLUS=96,
    UINVERT=97};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class PsiParser: ShiftReduceParser<ParserNode, LexLocation>
{
  // Verbatim content from Psi.y - 18.10.2017 19:31:35
#line 2 "Psi.y"
    Dictionary<string,int> regs = new Dictionary<string,int>();
#line default
  // End verbatim content from Psi.y - 18.10.2017 19:31:35

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[177];
  private static State[] states = new State[263];
  private static string[] nonTerms = new string[] {
      "program", "identifier", "opsym", "module", "modname", "assertion", "type", 
      "expression", "expr_or", "expr_xor", "expr_and", "equality", "comparison", 
      "expr_arrows", "sum", "term", "expo", "shifting", "unary", "value", "exprlist", 
      "declaration", "typedecl", "vardecl", "export", "storage", "arglist", "argument", 
      "functiontype", "paramlist", "parameter", "prefix", "statement", "block", 
      "stmtlist", "$accept", "terminator", };

  static PsiParser() {
    states[0] = new State(-2,new int[]{-1,1});
    states[1] = new State(new int[]{3,2,13,6,11,225,12,255,17,-21,15,-21,16,-21},new int[]{-6,3,-22,4,-4,5,-25,203});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(-5);
    states[6] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-8,7,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[7] = new State(new int[]{45,8,69,9,70,105,82,132,74,149,75,158,83,172,76,177,84,179,77,181,78,183,79,185,80,187,81,189,85,191,86,193,87,195});
    states[8] = new State(-6);
    states[9] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,10,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[10] = new State(-23);
    states[11] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-10,12,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[12] = new State(-40);
    states[13] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-11,14,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[14] = new State(-42);
    states[15] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-12,16,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[16] = new State(new int[]{65,17,66,110,52,-44,55,-44,53,-44,45,-44,69,-44,70,-44,82,-44,74,-44,75,-44,83,-44,76,-44,84,-44,77,-44,78,-44,79,-44,80,-44,81,-44,85,-44,86,-44,87,-44,9,-44,44,-44,7,-44,57,-44,58,-44,8,-44,6,-44,71,-44,73,-44,72,-44,59,-44,50,-44,51,-44,60,-44,48,-44,49,-44,56,-44,61,-44,62,-44,63,-44,64,-44,67,-44,68,-44,3,-44,13,-44,11,-44,12,-44,17,-44,15,-44,16,-44,5,-44,4,-44,43,-44});
    states[17] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-13,18,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[18] = new State(-46);
    states[19] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-14,20,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[20] = new State(-49);
    states[21] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-15,22,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[22] = new State(-54);
    states[23] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-16,24,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[24] = new State(new int[]{50,-57,51,-57,60,140,48,-57,49,-57,56,-57,61,-57,62,-57,63,-57,64,-57,67,-57,68,-57,65,-57,66,-57,52,-57,55,-57,53,-57,45,-57,69,-57,70,-57,82,-57,74,-57,75,-57,83,-57,76,-57,84,-57,77,-57,78,-57,79,-57,80,-57,81,-57,85,-57,86,-57,87,-57,9,-57,44,-57,7,-57,57,-57,58,-57,8,-57,6,-57,71,-57,73,-57,72,-57,59,-57,3,-57,13,-57,11,-57,12,-57,17,-57,15,-57,16,-57,5,-57,4,-57,43,-57});
    states[25] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-17,26,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[26] = new State(new int[]{59,27,50,-61,51,-61,60,-61,48,-61,49,-61,56,-61,61,-61,62,-61,63,-61,64,-61,67,-61,68,-61,65,-61,66,-61,52,-61,55,-61,53,-61,45,-61,69,-61,70,-61,82,-61,74,-61,75,-61,83,-61,76,-61,84,-61,77,-61,78,-61,79,-61,80,-61,81,-61,85,-61,86,-61,87,-61,9,-61,44,-61,7,-61,57,-61,58,-61,8,-61,6,-61,71,-61,73,-61,72,-61,3,-61,13,-61,11,-61,12,-61,17,-61,15,-61,16,-61,5,-61,4,-61,43,-61});
    states[27] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-18,28,-19,142,-20,154,-2,160,-29,168});
    states[28] = new State(new int[]{71,29,73,121,72,253,59,-65,50,-65,51,-65,60,-65,48,-65,49,-65,56,-65,61,-65,62,-65,63,-65,64,-65,67,-65,68,-65,65,-65,66,-65,52,-65,55,-65,53,-65,45,-65,69,-65,70,-65,82,-65,74,-65,75,-65,83,-65,76,-65,84,-65,77,-65,78,-65,79,-65,80,-65,81,-65,85,-65,86,-65,87,-65,9,-65,44,-65,7,-65,57,-65,58,-65,8,-65,6,-65,3,-65,13,-65,11,-65,12,-65,17,-65,15,-65,16,-65,5,-65,4,-65,43,-65});
    states[29] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-19,30,-20,154,-2,160,-29,168});
    states[30] = new State(-67);
    states[31] = new State(new int[]{8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-20,32,-2,160,-29,168});
    states[32] = new State(new int[]{57,33,58,98,8,100,6,125,71,-71,73,-71,72,-71,59,-71,50,-71,51,-71,60,-71,48,-71,49,-71,56,-71,61,-71,62,-71,63,-71,64,-71,67,-71,68,-71,65,-71,66,-71,52,-71,55,-71,53,-71,45,-71,69,-71,70,-71,82,-71,74,-71,75,-71,83,-71,76,-71,84,-71,77,-71,78,-71,79,-71,80,-71,81,-71,85,-71,86,-71,87,-71,9,-71,44,-71,7,-71,3,-71,13,-71,11,-71,12,-71,17,-71,15,-71,16,-71,5,-71,4,-71,43,-71});
    states[33] = new State(new int[]{91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97},new int[]{-2,34});
    states[34] = new State(-75);
    states[35] = new State(-116);
    states[36] = new State(-117);
    states[37] = new State(-118);
    states[38] = new State(-119);
    states[39] = new State(-120);
    states[40] = new State(-121);
    states[41] = new State(-122);
    states[42] = new State(-123);
    states[43] = new State(-124);
    states[44] = new State(-125);
    states[45] = new State(-126);
    states[46] = new State(new int[]{58,47,57,-128,8,-128,6,-128,71,-128,73,-128,72,-128,59,-128,50,-128,51,-128,60,-128,48,-128,49,-128,56,-128,61,-128,62,-128,63,-128,64,-128,67,-128,68,-128,65,-128,66,-128,52,-128,55,-128,53,-128,45,-128,69,-128,70,-128,82,-128,74,-128,75,-128,83,-128,76,-128,84,-128,77,-128,78,-128,79,-128,80,-128,81,-128,85,-128,86,-128,87,-128,9,-128,44,-128,7,-128,3,-128,13,-128,11,-128,12,-128,17,-128,15,-128,16,-128,5,-128,4,-128,43,-128,46,-128});
    states[47] = new State(new int[]{48,50,49,51,50,52,51,53,52,54,53,55,54,56,55,57,56,58,57,59,58,60,59,61,60,62,61,63,62,64,63,65,64,66,65,67,66,68,67,69,68,70,69,71,70,72,71,73,72,74,73,75},new int[]{-3,48});
    states[48] = new State(new int[]{58,49});
    states[49] = new State(-127);
    states[50] = new State(-151);
    states[51] = new State(-152);
    states[52] = new State(-153);
    states[53] = new State(-154);
    states[54] = new State(-155);
    states[55] = new State(-156);
    states[56] = new State(-157);
    states[57] = new State(-158);
    states[58] = new State(-159);
    states[59] = new State(-160);
    states[60] = new State(-161);
    states[61] = new State(-162);
    states[62] = new State(-163);
    states[63] = new State(-164);
    states[64] = new State(-165);
    states[65] = new State(-166);
    states[66] = new State(-167);
    states[67] = new State(-168);
    states[68] = new State(-169);
    states[69] = new State(-170);
    states[70] = new State(-171);
    states[71] = new State(-172);
    states[72] = new State(-173);
    states[73] = new State(-174);
    states[74] = new State(-175);
    states[75] = new State(-176);
    states[76] = new State(-129);
    states[77] = new State(-130);
    states[78] = new State(-131);
    states[79] = new State(-132);
    states[80] = new State(-133);
    states[81] = new State(-134);
    states[82] = new State(-135);
    states[83] = new State(-136);
    states[84] = new State(-137);
    states[85] = new State(-138);
    states[86] = new State(-139);
    states[87] = new State(-140);
    states[88] = new State(-141);
    states[89] = new State(-142);
    states[90] = new State(-143);
    states[91] = new State(-144);
    states[92] = new State(-145);
    states[93] = new State(-146);
    states[94] = new State(-147);
    states[95] = new State(-148);
    states[96] = new State(-149);
    states[97] = new State(-150);
    states[98] = new State(new int[]{91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97},new int[]{-2,99});
    states[99] = new State(-76);
    states[100] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-21,101,-8,148,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[101] = new State(new int[]{9,102,44,103});
    states[102] = new State(-77);
    states[103] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-8,104,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[104] = new State(new int[]{69,9,70,105,82,132,74,149,75,158,83,172,76,177,84,179,77,181,78,183,79,185,80,187,81,189,85,191,86,193,87,195,9,-108,44,-108});
    states[105] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,106,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[106] = new State(-24);
    states[107] = new State(new int[]{55,13,53,-41,45,-41,69,-41,70,-41,82,-41,74,-41,75,-41,83,-41,76,-41,84,-41,77,-41,78,-41,79,-41,80,-41,81,-41,85,-41,86,-41,87,-41,9,-41,44,-41,7,-41,57,-41,58,-41,8,-41,6,-41,71,-41,73,-41,72,-41,59,-41,50,-41,51,-41,60,-41,48,-41,49,-41,56,-41,61,-41,62,-41,63,-41,64,-41,67,-41,68,-41,65,-41,66,-41,52,-41,3,-41,13,-41,11,-41,12,-41,17,-41,15,-41,16,-41,5,-41,4,-41,43,-41});
    states[108] = new State(new int[]{52,15,55,-43,53,-43,45,-43,69,-43,70,-43,82,-43,74,-43,75,-43,83,-43,76,-43,84,-43,77,-43,78,-43,79,-43,80,-43,81,-43,85,-43,86,-43,87,-43,9,-43,44,-43,7,-43,57,-43,58,-43,8,-43,6,-43,71,-43,73,-43,72,-43,59,-43,50,-43,51,-43,60,-43,48,-43,49,-43,56,-43,61,-43,62,-43,63,-43,64,-43,67,-43,68,-43,65,-43,66,-43,3,-43,13,-43,11,-43,12,-43,17,-43,15,-43,16,-43,5,-43,4,-43,43,-43});
    states[109] = new State(new int[]{65,17,66,110,52,-45,55,-45,53,-45,45,-45,69,-45,70,-45,82,-45,74,-45,75,-45,83,-45,76,-45,84,-45,77,-45,78,-45,79,-45,80,-45,81,-45,85,-45,86,-45,87,-45,9,-45,44,-45,7,-45,57,-45,58,-45,8,-45,6,-45,71,-45,73,-45,72,-45,59,-45,50,-45,51,-45,60,-45,48,-45,49,-45,56,-45,61,-45,62,-45,63,-45,64,-45,67,-45,68,-45,3,-45,13,-45,11,-45,12,-45,17,-45,15,-45,16,-45,5,-45,4,-45,43,-45});
    states[110] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-13,111,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[111] = new State(-47);
    states[112] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-14,113,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[113] = new State(-50);
    states[114] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-15,115,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[115] = new State(-55);
    states[116] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-16,117,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[117] = new State(new int[]{50,-58,51,-58,60,140,48,-58,49,-58,56,-58,61,-58,62,-58,63,-58,64,-58,67,-58,68,-58,65,-58,66,-58,52,-58,55,-58,53,-58,45,-58,69,-58,70,-58,82,-58,74,-58,75,-58,83,-58,76,-58,84,-58,77,-58,78,-58,79,-58,80,-58,81,-58,85,-58,86,-58,87,-58,9,-58,44,-58,7,-58,57,-58,58,-58,8,-58,6,-58,71,-58,73,-58,72,-58,59,-58,3,-58,13,-58,11,-58,12,-58,17,-58,15,-58,16,-58,5,-58,4,-58,43,-58});
    states[118] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-17,119,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[119] = new State(new int[]{59,27,50,-62,51,-62,60,-62,48,-62,49,-62,56,-62,61,-62,62,-62,63,-62,64,-62,67,-62,68,-62,65,-62,66,-62,52,-62,55,-62,53,-62,45,-62,69,-62,70,-62,82,-62,74,-62,75,-62,83,-62,76,-62,84,-62,77,-62,78,-62,79,-62,80,-62,81,-62,85,-62,86,-62,87,-62,9,-62,44,-62,7,-62,57,-62,58,-62,8,-62,6,-62,71,-62,73,-62,72,-62,3,-62,13,-62,11,-62,12,-62,17,-62,15,-62,16,-62,5,-62,4,-62,43,-62});
    states[120] = new State(new int[]{71,29,73,121,72,253,59,-66,50,-66,51,-66,60,-66,48,-66,49,-66,56,-66,61,-66,62,-66,63,-66,64,-66,67,-66,68,-66,65,-66,66,-66,52,-66,55,-66,53,-66,45,-66,69,-66,70,-66,82,-66,74,-66,75,-66,83,-66,76,-66,84,-66,77,-66,78,-66,79,-66,80,-66,81,-66,85,-66,86,-66,87,-66,9,-66,44,-66,7,-66,57,-66,58,-66,8,-66,6,-66,3,-66,13,-66,11,-66,12,-66,17,-66,15,-66,16,-66,5,-66,4,-66,43,-66});
    states[121] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-19,122,-20,154,-2,160,-29,168});
    states[122] = new State(-68);
    states[123] = new State(new int[]{8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-20,124,-2,160,-29,168});
    states[124] = new State(new int[]{57,33,58,98,8,100,6,125,71,-72,73,-72,72,-72,59,-72,50,-72,51,-72,60,-72,48,-72,49,-72,56,-72,61,-72,62,-72,63,-72,64,-72,67,-72,68,-72,65,-72,66,-72,52,-72,55,-72,53,-72,45,-72,69,-72,70,-72,82,-72,74,-72,75,-72,83,-72,76,-72,84,-72,77,-72,78,-72,79,-72,80,-72,81,-72,85,-72,86,-72,87,-72,9,-72,44,-72,7,-72,3,-72,13,-72,11,-72,12,-72,17,-72,15,-72,16,-72,5,-72,4,-72,43,-72});
    states[125] = new State(new int[]{7,126,48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-27,127,-28,252,-8,131,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,249,-29,168});
    states[126] = new State(-79);
    states[127] = new State(new int[]{7,128,44,129});
    states[128] = new State(-80);
    states[129] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-28,130,-8,131,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,249,-29,168});
    states[130] = new State(-103);
    states[131] = new State(new int[]{69,9,70,105,82,132,74,149,75,158,83,172,76,177,84,179,77,181,78,183,79,185,80,187,81,189,85,191,86,193,87,195,7,-105,44,-105});
    states[132] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,133,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[133] = new State(-25);
    states[134] = new State(new int[]{63,19,64,112,67,135,68,247,65,-48,66,-48,52,-48,55,-48,53,-48,45,-48,69,-48,70,-48,82,-48,74,-48,75,-48,83,-48,76,-48,84,-48,77,-48,78,-48,79,-48,80,-48,81,-48,85,-48,86,-48,87,-48,9,-48,44,-48,7,-48,57,-48,58,-48,8,-48,6,-48,71,-48,73,-48,72,-48,59,-48,50,-48,51,-48,60,-48,48,-48,49,-48,56,-48,61,-48,62,-48,3,-48,13,-48,11,-48,12,-48,17,-48,15,-48,16,-48,5,-48,4,-48,43,-48});
    states[135] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-14,136,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[136] = new State(-51);
    states[137] = new State(new int[]{48,23,49,116,56,138,61,-56,62,-56,63,-56,64,-56,67,-56,68,-56,65,-56,66,-56,52,-56,55,-56,53,-56,45,-56,69,-56,70,-56,82,-56,74,-56,75,-56,83,-56,76,-56,84,-56,77,-56,78,-56,79,-56,80,-56,81,-56,85,-56,86,-56,87,-56,9,-56,44,-56,7,-56,57,-56,58,-56,8,-56,6,-56,71,-56,73,-56,72,-56,59,-56,50,-56,51,-56,60,-56,3,-56,13,-56,11,-56,12,-56,17,-56,15,-56,16,-56,5,-56,4,-56,43,-56});
    states[138] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-16,139,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[139] = new State(-59);
    states[140] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-17,141,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[141] = new State(-63);
    states[142] = new State(-70);
    states[143] = new State(new int[]{8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-20,144,-2,160,-29,168});
    states[144] = new State(new int[]{57,-73,58,-73,8,100,6,125,71,-73,73,-73,72,-73,59,-73,50,-73,51,-73,60,-73,48,-73,49,-73,56,-73,61,-73,62,-73,63,-73,64,-73,67,-73,68,-73,65,-73,66,-73,52,-73,55,-73,53,-73,45,-73,69,-73,70,-73,82,-73,74,-73,75,-73,83,-73,76,-73,84,-73,77,-73,78,-73,79,-73,80,-73,81,-73,85,-73,86,-73,87,-73,9,-73,44,-73,7,-73,3,-73,13,-73,11,-73,12,-73,17,-73,15,-73,16,-73,5,-73,4,-73,43,-73});
    states[145] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-21,146,-8,148,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[146] = new State(new int[]{9,147,44,103});
    states[147] = new State(-78);
    states[148] = new State(new int[]{69,9,70,105,82,132,74,149,75,158,83,172,76,177,84,179,77,181,78,183,79,185,80,187,81,189,85,191,86,193,87,195,9,-107,44,-107});
    states[149] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,150,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[150] = new State(-26);
    states[151] = new State(new int[]{61,21,62,114,63,-53,64,-53,67,-53,68,-53,65,-53,66,-53,52,-53,55,-53,53,-53,45,-53,69,-53,70,-53,82,-53,74,-53,75,-53,83,-53,76,-53,84,-53,77,-53,78,-53,79,-53,80,-53,81,-53,85,-53,86,-53,87,-53,9,-53,44,-53,7,-53,57,-53,58,-53,8,-53,6,-53,71,-53,73,-53,72,-53,59,-53,50,-53,51,-53,60,-53,48,-53,49,-53,56,-53,3,-53,13,-53,11,-53,12,-53,17,-53,15,-53,16,-53,5,-53,4,-53,43,-53});
    states[152] = new State(new int[]{50,25,51,118,60,140,48,-60,49,-60,56,-60,61,-60,62,-60,63,-60,64,-60,67,-60,68,-60,65,-60,66,-60,52,-60,55,-60,53,-60,45,-60,69,-60,70,-60,82,-60,74,-60,75,-60,83,-60,76,-60,84,-60,77,-60,78,-60,79,-60,80,-60,81,-60,85,-60,86,-60,87,-60,9,-60,44,-60,7,-60,57,-60,58,-60,8,-60,6,-60,71,-60,73,-60,72,-60,59,-60,3,-60,13,-60,11,-60,12,-60,17,-60,15,-60,16,-60,5,-60,4,-60,43,-60});
    states[153] = new State(new int[]{59,27,50,-64,51,-64,60,-64,48,-64,49,-64,56,-64,61,-64,62,-64,63,-64,64,-64,67,-64,68,-64,65,-64,66,-64,52,-64,55,-64,53,-64,45,-64,69,-64,70,-64,82,-64,74,-64,75,-64,83,-64,76,-64,84,-64,77,-64,78,-64,79,-64,80,-64,81,-64,85,-64,86,-64,87,-64,9,-64,44,-64,7,-64,57,-64,58,-64,8,-64,6,-64,71,-64,73,-64,72,-64,3,-64,13,-64,11,-64,12,-64,17,-64,15,-64,16,-64,5,-64,4,-64,43,-64});
    states[154] = new State(new int[]{57,33,58,98,8,100,6,125,71,-74,73,-74,72,-74,59,-74,50,-74,51,-74,60,-74,48,-74,49,-74,56,-74,61,-74,62,-74,63,-74,64,-74,67,-74,68,-74,65,-74,66,-74,52,-74,55,-74,53,-74,45,-74,69,-74,70,-74,82,-74,74,-74,75,-74,83,-74,76,-74,84,-74,77,-74,78,-74,79,-74,80,-74,81,-74,85,-74,86,-74,87,-74,9,-74,44,-74,7,-74,3,-74,13,-74,11,-74,12,-74,17,-74,15,-74,16,-74,5,-74,4,-74,43,-74});
    states[155] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-8,156,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[156] = new State(new int[]{7,157,69,9,70,105,82,132,74,149,75,158,83,172,76,177,84,179,77,181,78,183,79,185,80,187,81,189,85,191,86,193,87,195});
    states[157] = new State(-81);
    states[158] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,159,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[159] = new State(-27);
    states[160] = new State(-82);
    states[161] = new State(new int[]{6,162,57,-125,58,-125,8,-125,71,-125,73,-125,72,-125,59,-125,50,-125,51,-125,60,-125,48,-125,49,-125,56,-125,61,-125,62,-125,63,-125,64,-125,67,-125,68,-125,65,-125,66,-125,52,-125,55,-125,53,-125,45,-125,69,-125,70,-125,82,-125,74,-125,75,-125,83,-125,76,-125,84,-125,77,-125,78,-125,79,-125,80,-125,81,-125,85,-125,86,-125,87,-125,9,-125,44,-125,7,-125,3,-125,13,-125,11,-125,12,-125,17,-125,15,-125,16,-125,5,-125,4,-125,43,-125,46,-125});
    states[162] = new State(new int[]{7,243,25,-98,26,-98,24,-98,27,-98,91,-98,10,-98,11,-98,12,-98,13,-98,14,-98,15,-98,16,-98,17,-98,18,-98,19,-98,20,-98,21,-98,22,-98,23,-98,28,-98,29,-98,30,-98,31,-98,32,-98,33,-98,34,-98,35,-98,36,-98,37,-98,38,-98,39,-98,40,-98,41,-98,42,-98},new int[]{-30,163,-31,246,-32,231});
    states[163] = new State(new int[]{7,164,44,229});
    states[164] = new State(new int[]{61,165,43,-91,4,-91,57,-91,58,-91,8,-91,6,-91,71,-91,73,-91,72,-91,59,-91,50,-91,51,-91,60,-91,48,-91,49,-91,56,-91,62,-91,63,-91,64,-91,67,-91,68,-91,65,-91,66,-91,52,-91,55,-91,53,-91,45,-91,69,-91,70,-91,82,-91,74,-91,75,-91,83,-91,76,-91,84,-91,77,-91,78,-91,79,-91,80,-91,81,-91,85,-91,86,-91,87,-91,9,-91,44,-91,7,-91,3,-91,13,-91,11,-91,12,-91,17,-91,15,-91,16,-91,5,-91});
    states[165] = new State(new int[]{8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-7,166,-20,167,-2,160,-29,168});
    states[166] = new State(-89);
    states[167] = new State(new int[]{57,33,58,98,8,100,6,125,53,-16,45,-16,69,-16,70,-16,82,-16,74,-16,75,-16,83,-16,76,-16,84,-16,77,-16,78,-16,79,-16,80,-16,81,-16,85,-16,86,-16,87,-16,9,-16,44,-16,7,-16,71,-16,73,-16,72,-16,59,-16,50,-16,51,-16,60,-16,48,-16,49,-16,56,-16,61,-16,62,-16,63,-16,64,-16,67,-16,68,-16,65,-16,66,-16,52,-16,55,-16,3,-16,13,-16,11,-16,12,-16,17,-16,15,-16,16,-16,5,-16,4,-16,43,-16});
    states[168] = new State(new int[]{43,170,4,198,57,-83,58,-83,8,-83,6,-83,71,-83,73,-83,72,-83,59,-83,50,-83,51,-83,60,-83,48,-83,49,-83,56,-83,61,-83,62,-83,63,-83,64,-83,67,-83,68,-83,65,-83,66,-83,52,-83,55,-83,53,-83,45,-83,69,-83,70,-83,82,-83,74,-83,75,-83,83,-83,76,-83,84,-83,77,-83,78,-83,79,-83,80,-83,81,-83,85,-83,86,-83,87,-83,9,-83,44,-83,7,-83,3,-83,13,-83,11,-83,12,-83,17,-83,15,-83,16,-83,5,-83},new int[]{-34,169});
    states[169] = new State(-84);
    states[170] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-8,171,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[171] = new State(new int[]{69,9,70,105,82,132,74,149,75,158,83,172,76,177,84,179,77,181,78,183,79,185,80,187,81,189,85,191,86,193,87,195,57,-85,58,-85,8,-85,6,-85,71,-85,73,-85,72,-85,59,-85,50,-85,51,-85,60,-85,48,-85,49,-85,56,-85,61,-85,62,-85,63,-85,64,-85,67,-85,68,-85,65,-85,66,-85,52,-85,55,-85,53,-85,45,-85,9,-85,44,-85,7,-85,3,-85,13,-85,11,-85,12,-85,17,-85,15,-85,16,-85,5,-85,4,-85,43,-85});
    states[172] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,173,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[173] = new State(-28);
    states[174] = new State(-86);
    states[175] = new State(-87);
    states[176] = new State(-88);
    states[177] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,178,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[178] = new State(-29);
    states[179] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,180,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[180] = new State(-30);
    states[181] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,182,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[182] = new State(-31);
    states[183] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,184,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[184] = new State(-32);
    states[185] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,186,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[186] = new State(-33);
    states[187] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,188,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[188] = new State(-34);
    states[189] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,190,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[190] = new State(-35);
    states[191] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,192,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[192] = new State(-36);
    states[193] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,194,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[194] = new State(-37);
    states[195] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-9,196,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[196] = new State(-38);
    states[197] = new State(new int[]{53,11,45,-39,69,-39,70,-39,82,-39,74,-39,75,-39,83,-39,76,-39,84,-39,77,-39,78,-39,79,-39,80,-39,81,-39,85,-39,86,-39,87,-39,9,-39,44,-39,7,-39,57,-39,58,-39,8,-39,6,-39,71,-39,73,-39,72,-39,59,-39,50,-39,51,-39,60,-39,48,-39,49,-39,56,-39,61,-39,62,-39,63,-39,64,-39,67,-39,68,-39,65,-39,66,-39,52,-39,55,-39,3,-39,13,-39,11,-39,12,-39,17,-39,15,-39,16,-39,5,-39,4,-39,43,-39});
    states[198] = new State(new int[]{5,228,11,-111,13,-111,4,-111,17,-111,15,-111,16,-111},new int[]{-35,199});
    states[199] = new State(new int[]{5,200,11,225,13,6,4,198,17,-21,15,-21,16,-21},new int[]{-33,201,-22,202,-25,203,-6,226,-34,227});
    states[200] = new State(-109);
    states[201] = new State(-112);
    states[202] = new State(-113);
    states[203] = new State(new int[]{17,206,15,223,16,224},new int[]{-23,204,-24,205,-26,211});
    states[204] = new State(-10);
    states[205] = new State(-11);
    states[206] = new State(new int[]{91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97},new int[]{-2,207});
    states[207] = new State(new int[]{69,208});
    states[208] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-8,209,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[209] = new State(new int[]{45,210,69,9,70,105,82,132,74,149,75,158,83,172,76,177,84,179,77,181,78,183,79,185,80,187,81,189,85,191,86,193,87,195});
    states[210] = new State(-12);
    states[211] = new State(new int[]{91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97},new int[]{-2,212});
    states[212] = new State(new int[]{46,213,69,220});
    states[213] = new State(new int[]{8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-7,214,-20,167,-2,160,-29,168});
    states[214] = new State(new int[]{69,216,45,219,3,-17,13,-17,11,-17,12,-17,17,-17,15,-17,16,-17,5,-17,4,-17},new int[]{-37,215});
    states[215] = new State(-13);
    states[216] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-8,217,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[217] = new State(new int[]{69,9,70,105,82,132,74,149,75,158,83,172,76,177,84,179,77,181,78,183,79,185,80,187,81,189,85,191,86,193,87,195,45,219,3,-17,13,-17,11,-17,12,-17,17,-17,15,-17,16,-17,5,-17,4,-17},new int[]{-37,218});
    states[218] = new State(-15);
    states[219] = new State(-18);
    states[220] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-8,221,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[221] = new State(new int[]{69,9,70,105,82,132,74,149,75,158,83,172,76,177,84,179,77,181,78,183,79,185,80,187,81,189,85,191,86,193,87,195,45,219,3,-17,13,-17,11,-17,12,-17,17,-17,15,-17,16,-17,5,-17,4,-17},new int[]{-37,222});
    states[222] = new State(-14);
    states[223] = new State(-19);
    states[224] = new State(-20);
    states[225] = new State(-22);
    states[226] = new State(-114);
    states[227] = new State(-115);
    states[228] = new State(-110);
    states[229] = new State(-98,new int[]{-31,230,-32,231});
    states[230] = new State(-93);
    states[231] = new State(new int[]{25,239,26,240,24,241,27,242,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,21,76,22,77,23,78,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97},new int[]{-2,232});
    states[232] = new State(new int[]{46,233,69,237});
    states[233] = new State(new int[]{8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-7,234,-20,167,-2,160,-29,168});
    states[234] = new State(new int[]{69,235,7,-97,44,-97});
    states[235] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-8,236,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[236] = new State(new int[]{69,9,70,105,82,132,74,149,75,158,83,172,76,177,84,179,77,181,78,183,79,185,80,187,81,189,85,191,86,193,87,195,7,-95,44,-95});
    states[237] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-8,238,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[238] = new State(new int[]{69,9,70,105,82,132,74,149,75,158,83,172,76,177,84,179,77,181,78,183,79,185,80,187,81,189,85,191,86,193,87,195,7,-96,44,-96});
    states[239] = new State(new int[]{25,-99,26,-99,24,-99,27,-99,91,-99,10,-99,11,-99,12,-99,13,-99,14,-99,15,-99,16,-99,17,-99,18,-99,19,-99,20,-99,21,-99,22,-99,23,-99,28,-99,29,-99,30,-99,31,-99,32,-99,33,-99,34,-99,35,-99,36,-99,37,-99,38,-99,39,-99,40,-99,41,-99,42,-99,46,-133,69,-133});
    states[240] = new State(new int[]{25,-100,26,-100,24,-100,27,-100,91,-100,10,-100,11,-100,12,-100,13,-100,14,-100,15,-100,16,-100,17,-100,18,-100,19,-100,20,-100,21,-100,22,-100,23,-100,28,-100,29,-100,30,-100,31,-100,32,-100,33,-100,34,-100,35,-100,36,-100,37,-100,38,-100,39,-100,40,-100,41,-100,42,-100,46,-134,69,-134});
    states[241] = new State(new int[]{25,-101,26,-101,24,-101,27,-101,91,-101,10,-101,11,-101,12,-101,13,-101,14,-101,15,-101,16,-101,17,-101,18,-101,19,-101,20,-101,21,-101,22,-101,23,-101,28,-101,29,-101,30,-101,31,-101,32,-101,33,-101,34,-101,35,-101,36,-101,37,-101,38,-101,39,-101,40,-101,41,-101,42,-101,46,-132,69,-132});
    states[242] = new State(new int[]{25,-102,26,-102,24,-102,27,-102,91,-102,10,-102,11,-102,12,-102,13,-102,14,-102,15,-102,16,-102,17,-102,18,-102,19,-102,20,-102,21,-102,22,-102,23,-102,28,-102,29,-102,30,-102,31,-102,32,-102,33,-102,34,-102,35,-102,36,-102,37,-102,38,-102,39,-102,40,-102,41,-102,42,-102,46,-135,69,-135});
    states[243] = new State(new int[]{61,244,43,-92,4,-92,57,-92,58,-92,8,-92,6,-92,71,-92,73,-92,72,-92,59,-92,50,-92,51,-92,60,-92,48,-92,49,-92,56,-92,62,-92,63,-92,64,-92,67,-92,68,-92,65,-92,66,-92,52,-92,55,-92,53,-92,45,-92,69,-92,70,-92,82,-92,74,-92,75,-92,83,-92,76,-92,84,-92,77,-92,78,-92,79,-92,80,-92,81,-92,85,-92,86,-92,87,-92,9,-92,44,-92,7,-92,3,-92,13,-92,11,-92,12,-92,17,-92,15,-92,16,-92,5,-92});
    states[244] = new State(new int[]{8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-7,245,-20,167,-2,160,-29,168});
    states[245] = new State(-90);
    states[246] = new State(-94);
    states[247] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-14,248,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[248] = new State(-52);
    states[249] = new State(new int[]{46,250,57,-82,58,-82,8,-82,6,-82,71,-82,73,-82,72,-82,59,-82,50,-82,51,-82,60,-82,48,-82,49,-82,56,-82,61,-82,62,-82,63,-82,64,-82,67,-82,68,-82,65,-82,66,-82,52,-82,55,-82,53,-82,69,-82,70,-82,82,-82,74,-82,75,-82,83,-82,76,-82,84,-82,77,-82,78,-82,79,-82,80,-82,81,-82,85,-82,86,-82,87,-82,7,-82,44,-82});
    states[250] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-8,251,-9,197,-10,107,-11,108,-12,109,-13,134,-14,151,-15,137,-16,152,-17,153,-18,120,-19,142,-20,154,-2,160,-29,168});
    states[251] = new State(new int[]{69,9,70,105,82,132,74,149,75,158,83,172,76,177,84,179,77,181,78,183,79,185,80,187,81,189,85,191,86,193,87,195,7,-106,44,-106});
    states[252] = new State(-104);
    states[253] = new State(new int[]{48,31,49,123,54,143,8,145,6,155,91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,161,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97,89,174,90,175,88,176},new int[]{-19,254,-20,154,-2,160,-29,168});
    states[254] = new State(-69);
    states[255] = new State(new int[]{91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97},new int[]{-5,256,-2,262});
    states[256] = new State(new int[]{4,257,57,260});
    states[257] = new State(-2,new int[]{-1,258});
    states[258] = new State(new int[]{5,259,13,6,11,225,12,255,17,-21,15,-21,16,-21},new int[]{-6,3,-22,4,-4,5,-25,203});
    states[259] = new State(-7);
    states[260] = new State(new int[]{91,35,10,36,11,37,12,38,13,39,14,40,15,41,16,42,17,43,18,44,19,45,20,46,21,76,22,77,23,78,24,79,25,80,26,81,27,82,28,83,29,84,30,85,31,86,32,87,33,88,34,89,35,90,36,91,37,92,38,93,39,94,40,95,41,96,42,97},new int[]{-2,261});
    states[261] = new State(-9);
    states[262] = new State(-8);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-36, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-1,-6});
    rules[4] = new Rule(-1, new int[]{-1,-22});
    rules[5] = new Rule(-1, new int[]{-1,-4});
    rules[6] = new Rule(-6, new int[]{13,-8,45});
    rules[7] = new Rule(-4, new int[]{12,-5,4,-1,5});
    rules[8] = new Rule(-5, new int[]{-2});
    rules[9] = new Rule(-5, new int[]{-5,57,-2});
    rules[10] = new Rule(-22, new int[]{-25,-23});
    rules[11] = new Rule(-22, new int[]{-25,-24});
    rules[12] = new Rule(-23, new int[]{17,-2,69,-8,45});
    rules[13] = new Rule(-24, new int[]{-26,-2,46,-7,-37});
    rules[14] = new Rule(-24, new int[]{-26,-2,69,-8,-37});
    rules[15] = new Rule(-24, new int[]{-26,-2,46,-7,69,-8,-37});
    rules[16] = new Rule(-7, new int[]{-20});
    rules[17] = new Rule(-37, new int[]{});
    rules[18] = new Rule(-37, new int[]{45});
    rules[19] = new Rule(-26, new int[]{15});
    rules[20] = new Rule(-26, new int[]{16});
    rules[21] = new Rule(-25, new int[]{});
    rules[22] = new Rule(-25, new int[]{11});
    rules[23] = new Rule(-8, new int[]{-8,69,-9});
    rules[24] = new Rule(-8, new int[]{-8,70,-9});
    rules[25] = new Rule(-8, new int[]{-8,82,-9});
    rules[26] = new Rule(-8, new int[]{-8,74,-9});
    rules[27] = new Rule(-8, new int[]{-8,75,-9});
    rules[28] = new Rule(-8, new int[]{-8,83,-9});
    rules[29] = new Rule(-8, new int[]{-8,76,-9});
    rules[30] = new Rule(-8, new int[]{-8,84,-9});
    rules[31] = new Rule(-8, new int[]{-8,77,-9});
    rules[32] = new Rule(-8, new int[]{-8,78,-9});
    rules[33] = new Rule(-8, new int[]{-8,79,-9});
    rules[34] = new Rule(-8, new int[]{-8,80,-9});
    rules[35] = new Rule(-8, new int[]{-8,81,-9});
    rules[36] = new Rule(-8, new int[]{-8,85,-9});
    rules[37] = new Rule(-8, new int[]{-8,86,-9});
    rules[38] = new Rule(-8, new int[]{-8,87,-9});
    rules[39] = new Rule(-8, new int[]{-9});
    rules[40] = new Rule(-9, new int[]{-9,53,-10});
    rules[41] = new Rule(-9, new int[]{-10});
    rules[42] = new Rule(-10, new int[]{-10,55,-11});
    rules[43] = new Rule(-10, new int[]{-11});
    rules[44] = new Rule(-11, new int[]{-11,52,-12});
    rules[45] = new Rule(-11, new int[]{-12});
    rules[46] = new Rule(-12, new int[]{-12,65,-13});
    rules[47] = new Rule(-12, new int[]{-12,66,-13});
    rules[48] = new Rule(-12, new int[]{-13});
    rules[49] = new Rule(-13, new int[]{-13,63,-14});
    rules[50] = new Rule(-13, new int[]{-13,64,-14});
    rules[51] = new Rule(-13, new int[]{-13,67,-14});
    rules[52] = new Rule(-13, new int[]{-13,68,-14});
    rules[53] = new Rule(-13, new int[]{-14});
    rules[54] = new Rule(-14, new int[]{-14,61,-15});
    rules[55] = new Rule(-14, new int[]{-14,62,-15});
    rules[56] = new Rule(-14, new int[]{-15});
    rules[57] = new Rule(-15, new int[]{-15,48,-16});
    rules[58] = new Rule(-15, new int[]{-15,49,-16});
    rules[59] = new Rule(-15, new int[]{-15,56,-16});
    rules[60] = new Rule(-15, new int[]{-16});
    rules[61] = new Rule(-16, new int[]{-16,50,-17});
    rules[62] = new Rule(-16, new int[]{-16,51,-17});
    rules[63] = new Rule(-16, new int[]{-16,60,-17});
    rules[64] = new Rule(-16, new int[]{-17});
    rules[65] = new Rule(-17, new int[]{-17,59,-18});
    rules[66] = new Rule(-17, new int[]{-18});
    rules[67] = new Rule(-18, new int[]{-18,71,-19});
    rules[68] = new Rule(-18, new int[]{-18,73,-19});
    rules[69] = new Rule(-18, new int[]{-18,72,-19});
    rules[70] = new Rule(-18, new int[]{-19});
    rules[71] = new Rule(-19, new int[]{48,-20});
    rules[72] = new Rule(-19, new int[]{49,-20});
    rules[73] = new Rule(-19, new int[]{54,-20});
    rules[74] = new Rule(-19, new int[]{-20});
    rules[75] = new Rule(-20, new int[]{-20,57,-2});
    rules[76] = new Rule(-20, new int[]{-20,58,-2});
    rules[77] = new Rule(-20, new int[]{-20,8,-21,9});
    rules[78] = new Rule(-20, new int[]{8,-21,9});
    rules[79] = new Rule(-20, new int[]{-20,6,7});
    rules[80] = new Rule(-20, new int[]{-20,6,-27,7});
    rules[81] = new Rule(-20, new int[]{6,-8,7});
    rules[82] = new Rule(-20, new int[]{-2});
    rules[83] = new Rule(-20, new int[]{-29});
    rules[84] = new Rule(-20, new int[]{-29,-34});
    rules[85] = new Rule(-20, new int[]{-29,43,-8});
    rules[86] = new Rule(-20, new int[]{89});
    rules[87] = new Rule(-20, new int[]{90});
    rules[88] = new Rule(-20, new int[]{88});
    rules[89] = new Rule(-29, new int[]{18,6,-30,7,61,-7});
    rules[90] = new Rule(-29, new int[]{18,6,7,61,-7});
    rules[91] = new Rule(-29, new int[]{18,6,-30,7});
    rules[92] = new Rule(-29, new int[]{18,6,7});
    rules[93] = new Rule(-30, new int[]{-30,44,-31});
    rules[94] = new Rule(-30, new int[]{-31});
    rules[95] = new Rule(-31, new int[]{-32,-2,46,-7,69,-8});
    rules[96] = new Rule(-31, new int[]{-32,-2,69,-8});
    rules[97] = new Rule(-31, new int[]{-32,-2,46,-7});
    rules[98] = new Rule(-32, new int[]{});
    rules[99] = new Rule(-32, new int[]{-32,25});
    rules[100] = new Rule(-32, new int[]{-32,26});
    rules[101] = new Rule(-32, new int[]{-32,24});
    rules[102] = new Rule(-32, new int[]{-32,27});
    rules[103] = new Rule(-27, new int[]{-27,44,-28});
    rules[104] = new Rule(-27, new int[]{-28});
    rules[105] = new Rule(-28, new int[]{-8});
    rules[106] = new Rule(-28, new int[]{-2,46,-8});
    rules[107] = new Rule(-21, new int[]{-8});
    rules[108] = new Rule(-21, new int[]{-21,44,-8});
    rules[109] = new Rule(-34, new int[]{4,-35,5});
    rules[110] = new Rule(-34, new int[]{4,5});
    rules[111] = new Rule(-35, new int[]{});
    rules[112] = new Rule(-35, new int[]{-35,-33});
    rules[113] = new Rule(-33, new int[]{-22});
    rules[114] = new Rule(-33, new int[]{-6});
    rules[115] = new Rule(-33, new int[]{-34});
    rules[116] = new Rule(-2, new int[]{91});
    rules[117] = new Rule(-2, new int[]{10});
    rules[118] = new Rule(-2, new int[]{11});
    rules[119] = new Rule(-2, new int[]{12});
    rules[120] = new Rule(-2, new int[]{13});
    rules[121] = new Rule(-2, new int[]{14});
    rules[122] = new Rule(-2, new int[]{15});
    rules[123] = new Rule(-2, new int[]{16});
    rules[124] = new Rule(-2, new int[]{17});
    rules[125] = new Rule(-2, new int[]{18});
    rules[126] = new Rule(-2, new int[]{19});
    rules[127] = new Rule(-2, new int[]{20,58,-3,58});
    rules[128] = new Rule(-2, new int[]{20});
    rules[129] = new Rule(-2, new int[]{21});
    rules[130] = new Rule(-2, new int[]{22});
    rules[131] = new Rule(-2, new int[]{23});
    rules[132] = new Rule(-2, new int[]{24});
    rules[133] = new Rule(-2, new int[]{25});
    rules[134] = new Rule(-2, new int[]{26});
    rules[135] = new Rule(-2, new int[]{27});
    rules[136] = new Rule(-2, new int[]{28});
    rules[137] = new Rule(-2, new int[]{29});
    rules[138] = new Rule(-2, new int[]{30});
    rules[139] = new Rule(-2, new int[]{31});
    rules[140] = new Rule(-2, new int[]{32});
    rules[141] = new Rule(-2, new int[]{33});
    rules[142] = new Rule(-2, new int[]{34});
    rules[143] = new Rule(-2, new int[]{35});
    rules[144] = new Rule(-2, new int[]{36});
    rules[145] = new Rule(-2, new int[]{37});
    rules[146] = new Rule(-2, new int[]{38});
    rules[147] = new Rule(-2, new int[]{39});
    rules[148] = new Rule(-2, new int[]{40});
    rules[149] = new Rule(-2, new int[]{41});
    rules[150] = new Rule(-2, new int[]{42});
    rules[151] = new Rule(-3, new int[]{48});
    rules[152] = new Rule(-3, new int[]{49});
    rules[153] = new Rule(-3, new int[]{50});
    rules[154] = new Rule(-3, new int[]{51});
    rules[155] = new Rule(-3, new int[]{52});
    rules[156] = new Rule(-3, new int[]{53});
    rules[157] = new Rule(-3, new int[]{54});
    rules[158] = new Rule(-3, new int[]{55});
    rules[159] = new Rule(-3, new int[]{56});
    rules[160] = new Rule(-3, new int[]{57});
    rules[161] = new Rule(-3, new int[]{58});
    rules[162] = new Rule(-3, new int[]{59});
    rules[163] = new Rule(-3, new int[]{60});
    rules[164] = new Rule(-3, new int[]{61});
    rules[165] = new Rule(-3, new int[]{62});
    rules[166] = new Rule(-3, new int[]{63});
    rules[167] = new Rule(-3, new int[]{64});
    rules[168] = new Rule(-3, new int[]{65});
    rules[169] = new Rule(-3, new int[]{66});
    rules[170] = new Rule(-3, new int[]{67});
    rules[171] = new Rule(-3, new int[]{68});
    rules[172] = new Rule(-3, new int[]{69});
    rules[173] = new Rule(-3, new int[]{70});
    rules[174] = new Rule(-3, new int[]{71});
    rules[175] = new Rule(-3, new int[]{72});
    rules[176] = new Rule(-3, new int[]{73});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)PsiTokenType.error, (int)PsiTokenType.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> /* empty */
#line 63 "Psi.y"
                                  { CurrentSemanticValue.Module = new Module(); }
#line default
        break;
      case 3: // program -> program, assertion
#line 64 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Assertion); }
#line default
        break;
      case 4: // program -> program, declaration
#line 65 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Declaration); }
#line default
        break;
      case 5: // program -> program, module
#line 66 "Psi.y"
                                  { CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module.Add(ValueStack[ValueStack.Depth-1].Module); }
#line default
        break;
      case 6: // assertion -> ASSERT, expression, TERMINATOR
#line 69 "Psi.y"
                                           {
            	CurrentSemanticValue.Assertion = new Assertion(ValueStack[ValueStack.Depth-2].Expression); 
            }
#line default
        break;
      case 7: // module -> MODULE, modname, CURLY_O, program, CURLY_C
#line 74 "Psi.y"
                                                     {
				CurrentSemanticValue.Module = ValueStack[ValueStack.Depth-2].Module;
				CurrentSemanticValue.Module.Name = ValueStack[ValueStack.Depth-4].Name;
			}
#line default
        break;
      case 8: // modname -> identifier
#line 80 "Psi.y"
                         {
            	CurrentSemanticValue.Name = new CompoundName(ValueStack[ValueStack.Depth-1].String); 
            }
#line default
        break;
      case 9: // modname -> modname, DOT, identifier
#line 83 "Psi.y"
                                     {
            	CurrentSemanticValue.Name = ValueStack[ValueStack.Depth-3].Name;
            	CurrentSemanticValue.Name.Add(ValueStack[ValueStack.Depth-1].String);
        	}
#line default
        break;
      case 10: // declaration -> export, typedecl
#line 89 "Psi.y"
                              {
            	CurrentSemanticValue.Declaration = ValueStack[ValueStack.Depth-1].Declaration;
            	CurrentSemanticValue.Declaration.IsExported = (bool)ValueStack[ValueStack.Depth-2].Boolean;
            }
#line default
        break;
      case 11: // declaration -> export, vardecl
#line 93 "Psi.y"
                             {
            	CurrentSemanticValue.Declaration = ValueStack[ValueStack.Depth-1].Declaration;
            	CurrentSemanticValue.Declaration.IsExported = (bool)ValueStack[ValueStack.Depth-2].Boolean;
            }
#line default
        break;
      case 12: // typedecl -> TYPE, identifier, IS, expression, TERMINATOR
#line 99 "Psi.y"
                                                       {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, TypeDeclaration, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = true;
            }
#line default
        break;
      case 13: // vardecl -> storage, identifier, COLON, type, terminator
#line 105 "Psi.y"
                                                       {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].Expression, null);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 14: // vardecl -> storage, identifier, IS, expression, terminator
#line 109 "Psi.y"
                                                             {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-4].String, null, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-5].Boolean;
            }
#line default
        break;
      case 15: // vardecl -> storage, identifier, COLON, type, IS, expression, terminator
#line 113 "Psi.y"
                                                                     {
            	CurrentSemanticValue.Declaration = new Declaration(ValueStack[ValueStack.Depth-6].String, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression);
            	CurrentSemanticValue.Declaration.IsConst = (bool)ValueStack[ValueStack.Depth-7].Boolean;
            }
#line default
        break;
      case 16: // type -> value
#line 120 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 19: // storage -> CONST
#line 128 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 20: // storage -> VAR
#line 129 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 21: // export -> /* empty */
#line 132 "Psi.y"
                             { CurrentSemanticValue.Boolean = false; }
#line default
        break;
      case 22: // export -> EXPORT
#line 133 "Psi.y"
                             { CurrentSemanticValue.Boolean = true;  }
#line default
        break;
      case 23: // expression -> expression, IS, expr_or
#line 137 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.CopyAssign);
			}
#line default
        break;
      case 24: // expression -> expression, ASSIGN, expr_or
#line 141 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.SemanticAssign);
			}
#line default
        break;
      case 25: // expression -> expression, WB_CONCAT, expr_or
#line 145 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackConcat);
			}
#line default
        break;
      case 26: // expression -> expression, WB_PLUS, expr_or
#line 149 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackPlus);
			}
#line default
        break;
      case 27: // expression -> expression, WB_MINUS, expr_or
#line 153 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMinus);
			}
#line default
        break;
      case 28: // expression -> expression, WB_EXP, expr_or
#line 157 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackExponentiate);
			}
#line default
        break;
      case 29: // expression -> expression, WB_MULT, expr_or
#line 161 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackMultiply);
			}
#line default
        break;
      case 30: // expression -> expression, WB_MOD, expr_or
#line 165 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackModulo);
			}
#line default
        break;
      case 31: // expression -> expression, WB_DIV, expr_or
#line 169 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackDivide);
			}
#line default
        break;
      case 32: // expression -> expression, WB_AND, expr_or
#line 173 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackAnd);
			}
#line default
        break;
      case 33: // expression -> expression, WB_OR, expr_or
#line 177 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackOr);
			}
#line default
        break;
      case 34: // expression -> expression, WB_INVERT, expr_or
#line 181 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackInvert);
			}
#line default
        break;
      case 35: // expression -> expression, WB_XOR, expr_or
#line 185 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackXor);
			}
#line default
        break;
      case 36: // expression -> expression, WB_ASR, expr_or
#line 189 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackArithmeticShiftRight);
			}
#line default
        break;
      case 37: // expression -> expression, WB_SHL, expr_or
#line 193 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftLeft);
			}
#line default
        break;
      case 38: // expression -> expression, WB_SHR, expr_or
#line 197 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.WritebackShiftRight);
			}
#line default
        break;
      case 39: // expression -> expr_or
#line 201 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 40: // expr_or -> expr_or, OR, expr_xor
#line 207 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Or);
			}
#line default
        break;
      case 41: // expr_or -> expr_xor
#line 211 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 42: // expr_xor -> expr_xor, XOR, expr_and
#line 217 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Xor);
			}
#line default
        break;
      case 43: // expr_xor -> expr_and
#line 221 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 44: // expr_and -> expr_and, AND, equality
#line 227 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.And);
			}
#line default
        break;
      case 45: // expr_and -> equality
#line 231 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 46: // equality -> equality, EQUAL, comparison
#line 237 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Equals);
			}
#line default
        break;
      case 47: // equality -> equality, NEQUAL, comparison
#line 241 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.NotEquals);
			}
#line default
        break;
      case 48: // equality -> comparison
#line 245 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 49: // comparison -> comparison, LEQUAL, expr_arrows
#line 251 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.LessOrEqual);
			}
#line default
        break;
      case 50: // comparison -> comparison, GEQUAL, expr_arrows
#line 255 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.MoreOrEqual);
			}
#line default
        break;
      case 51: // comparison -> comparison, LESS, expr_arrows
#line 259 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Less);
			}
#line default
        break;
      case 52: // comparison -> comparison, MORE, expr_arrows
#line 263 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.More);
			}
#line default
        break;
      case 53: // comparison -> expr_arrows
#line 267 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 54: // expr_arrows -> expr_arrows, FORWARD, sum
#line 273 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Forward);
			}
#line default
        break;
      case 55: // expr_arrows -> expr_arrows, BACKWARD, sum
#line 277 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Backward);
			}
#line default
        break;
      case 56: // expr_arrows -> sum
#line 281 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 57: // sum -> sum, PLUS, term
#line 287 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 58: // sum -> sum, MINUS, term
#line 291 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 59: // sum -> sum, CONCAT, term
#line 295 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Concat);
			}
#line default
        break;
      case 60: // sum -> term
#line 299 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 61: // term -> term, MULT, expo
#line 305 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Multiply);
			}
#line default
        break;
      case 62: // term -> term, DIV, expo
#line 309 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Divide);
			}
#line default
        break;
      case 63: // term -> term, MOD, expo
#line 313 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Modulo);
			}
#line default
        break;
      case 64: // term -> expo
#line 317 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 65: // expo -> expo, EXP, shifting
#line 323 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Exponentiate);
			}
#line default
        break;
      case 66: // expo -> shifting
#line 327 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 67: // shifting -> shifting, ASR, unary
#line 333 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ArithmeticShiftRight);
			}
#line default
        break;
      case 68: // shifting -> shifting, SHR, unary
#line 337 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftRight);
			}
#line default
        break;
      case 69: // shifting -> shifting, SHL, unary
#line 341 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression, PsiOperator.ShiftLeft);
			}
#line default
        break;
      case 70: // shifting -> unary
#line 345 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 71: // unary -> PLUS, value
#line 351 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Plus);
			}
#line default
        break;
      case 72: // unary -> MINUS, value
#line 355 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Minus);
			}
#line default
        break;
      case 73: // unary -> INVERT, value
#line 359 "Psi.y"
   {
				CurrentSemanticValue.Expression = Apply(ValueStack[ValueStack.Depth-1].Expression, PsiOperator.Invert);
			}
#line default
        break;
      case 74: // unary -> value
#line 363 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;
			}
#line default
        break;
      case 75: // value -> value, DOT, identifier
#line 369 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyDot(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 76: // value -> value, META, identifier
#line 373 "Psi.y"
   {
				CurrentSemanticValue.Expression = ApplyMeta(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].String);
			}
#line default
        break;
      case 77: // value -> value, SQUARE_O, exprlist, SQUARE_C
#line 377 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayIndexingExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ExpressionList);
			}
#line default
        break;
      case 78: // value -> SQUARE_O, exprlist, SQUARE_C
#line 381 "Psi.y"
   {
				CurrentSemanticValue.Expression = new ArrayLiteral(ValueStack[ValueStack.Depth-2].ExpressionList);
			}
#line default
        break;
      case 79: // value -> value, ROUND_O, ROUND_C
#line 385 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-3].Expression, new List<Argument>());
			}
#line default
        break;
      case 80: // value -> value, ROUND_O, arglist, ROUND_C
#line 389 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].ArgumentList);
			}
#line default
        break;
      case 81: // value -> ROUND_O, expression, ROUND_C
#line 393 "Psi.y"
            {
                CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-2].Expression;
            }
#line default
        break;
      case 82: // value -> identifier
#line 397 "Psi.y"
   {
            	CurrentSemanticValue.Expression = new VariableReference(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 83: // value -> functiontype
#line 401 "Psi.y"
   {
				CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].FunctionType;
			}
#line default
        break;
      case 84: // value -> functiontype, block
#line 405 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionLiteral(ValueStack[ValueStack.Depth-2].FunctionType, ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 85: // value -> functiontype, MAPSTO, expression
#line 409 "Psi.y"
   {
				CurrentSemanticValue.Expression = new FunctionLiteral(ValueStack[ValueStack.Depth-3].FunctionType, new ExpressionStatement(ValueStack[ValueStack.Depth-1].Expression));
			}
#line default
        break;
      case 86: // value -> STRING
#line 413 "Psi.y"
   {
				CurrentSemanticValue.Expression = new StringLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 87: // value -> ENUMVAL
#line 417 "Psi.y"
   {
				CurrentSemanticValue.Expression = new EnumLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 88: // value -> NUMBER
#line 421 "Psi.y"
   {
				CurrentSemanticValue.Expression = new NumberLiteral(ValueStack[ValueStack.Depth-1].String);
            }
#line default
        break;
      case 89: // functiontype -> FN, ROUND_O, paramlist, ROUND_C, FORWARD, type
#line 427 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(ValueStack[ValueStack.Depth-4].ParameterList, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 90: // functiontype -> FN, ROUND_O, ROUND_C, FORWARD, type
#line 431 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(new List<Parameter>(), ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 91: // functiontype -> FN, ROUND_O, paramlist, ROUND_C
#line 435 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(ValueStack[ValueStack.Depth-2].ParameterList, null);
			}
#line default
        break;
      case 92: // functiontype -> FN, ROUND_O, ROUND_C
#line 439 "Psi.y"
   {
				CurrentSemanticValue.FunctionType = new FunctionTypeLiteral(new List<Parameter>(), null);
			}
#line default
        break;
      case 93: // paramlist -> paramlist, COMMA, parameter
#line 445 "Psi.y"
   {
				CurrentSemanticValue.ParameterList = ValueStack[ValueStack.Depth-3].ParameterList;
				CurrentSemanticValue.ParameterList.Add(ValueStack[ValueStack.Depth-1].Parameter);
			}
#line default
        break;
      case 94: // paramlist -> parameter
#line 450 "Psi.y"
   {
				CurrentSemanticValue.ParameterList = new List<Parameter>();
				CurrentSemanticValue.ParameterList.Add(ValueStack[ValueStack.Depth-1].Parameter);
			}
#line default
        break;
      case 95: // parameter -> prefix, identifier, COLON, type, IS, expression
#line 457 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-6].ParameterPrefix, ValueStack[ValueStack.Depth-5].String, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 96: // parameter -> prefix, identifier, IS, expression
#line 461 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-4].ParameterPrefix, ValueStack[ValueStack.Depth-3].String, null, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 97: // parameter -> prefix, identifier, COLON, type
#line 465 "Psi.y"
   {
				CurrentSemanticValue.Parameter = new Parameter((ParameterPrefix)ValueStack[ValueStack.Depth-4].ParameterPrefix, ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].Expression, null);
			}
#line default
        break;
      case 98: // prefix -> /* empty */
#line 471 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ParameterPrefix.None;
			}
#line default
        break;
      case 99: // prefix -> prefix, IN
#line 475 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.In;
			}
#line default
        break;
      case 100: // prefix -> prefix, OUT
#line 479 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.Out;
			}
#line default
        break;
      case 101: // prefix -> prefix, INOUT
#line 483 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.InOut;
			}
#line default
        break;
      case 102: // prefix -> prefix, THIS
#line 487 "Psi.y"
   {
				CurrentSemanticValue.ParameterPrefix = ValueStack[ValueStack.Depth-2].ParameterPrefix | ParameterPrefix.This;
			}
#line default
        break;
      case 103: // arglist -> arglist, COMMA, argument
#line 493 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = ValueStack[ValueStack.Depth-3].ArgumentList;
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 104: // arglist -> argument
#line 498 "Psi.y"
   {
				CurrentSemanticValue.ArgumentList = new List<Argument>();
				CurrentSemanticValue.ArgumentList.Add(ValueStack[ValueStack.Depth-1].Argument);
			}
#line default
        break;
      case 105: // argument -> expression
#line 505 "Psi.y"
   {
				CurrentSemanticValue.Argument = new PositionalArgument(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 106: // argument -> identifier, COLON, expression
#line 509 "Psi.y"
   {
				CurrentSemanticValue.Argument = new NamedArgument(ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 107: // exprlist -> expression
#line 515 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = new List<Expression>();
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 108: // exprlist -> exprlist, COMMA, expression
#line 520 "Psi.y"
   {
				CurrentSemanticValue.ExpressionList = ValueStack[ValueStack.Depth-3].ExpressionList;
				CurrentSemanticValue.ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
			}
#line default
        break;
      case 109: // block -> CURLY_O, stmtlist, CURLY_C
#line 527 "Psi.y"
   {
				CurrentSemanticValue.Statement = new Block(ValueStack[ValueStack.Depth-2].StatementList);
			}
#line default
        break;
      case 110: // block -> CURLY_O, CURLY_C
#line 531 "Psi.y"
   {
				CurrentSemanticValue.Statement = new Block(new List<Statement>());
			}
#line default
        break;
      case 111: // stmtlist -> /* empty */
#line 537 "Psi.y"
   {
				CurrentSemanticValue.StatementList = new List<Statement>();
			}
#line default
        break;
      case 112: // stmtlist -> stmtlist, statement
#line 541 "Psi.y"
   {
				CurrentSemanticValue.StatementList = ValueStack[ValueStack.Depth-2].StatementList;
				CurrentSemanticValue.StatementList.Add(ValueStack[ValueStack.Depth-1].Statement);
			}
#line default
        break;
      case 113: // statement -> declaration
#line 548 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Declaration;
			}
#line default
        break;
      case 114: // statement -> assertion
#line 552 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Assertion;
			}
#line default
        break;
      case 115: // statement -> block
#line 556 "Psi.y"
   {
				CurrentSemanticValue.Statement = ValueStack[ValueStack.Depth-1].Statement;
			}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((PsiTokenType)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((PsiTokenType)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 606 "Psi.y"
public PsiParser(PsiLexer lexer) : base(lexer) 
{ 
	
}

public Module Result => this.CurrentSemanticValue.Module;

public Expression TypeDeclaration { get; } = new VariableReference("<type>");

private static Expression Apply(Expression lhs, Expression rhs, PsiOperator op)
{
	return new BinaryOperation(op, lhs, rhs);
}

private static Expression Apply(Expression expr, PsiOperator op)
{
	return new UnaryOperation(op, expr);
}

private static Expression ApplyDot(Expression exp, string field)
{
	return new DotExpression(exp, field);
}

private static Expression ApplyMeta(Expression exp, string field)
{
	return new MetaExpression(exp, field);
}
#line default
}
}
