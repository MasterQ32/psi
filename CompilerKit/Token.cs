using System;
namespace CompilerKit
{
	/// <summary>
	/// A token is a part of a script which has a defined type and text.
	/// It is generated by a tokenizer.
	/// </summary>
	public sealed class Token<T>
	{
		public Token(T type, string text, CodeLocation location)
		{
			if (text == null) throw new ArgumentNullException(nameof(text));
			if(location == null) throw new ArgumentNullException(nameof(location));
			this.Type = type;
			this.Text = text;
			this.Location = location;
		}
		
		public CodeError ToError() => ToError($"Did not expect a {Type}");
		
		public CodeError ToError(string message)
		{
			if(string.IsNullOrEmpty(message))
				throw new ArgumentOutOfRangeException(nameof(message));
			return new CodeError(this.Location, message);
		}

		public T Type { get; }

		public string Text { get; }

		public CodeLocation Location { get; }
		
		public override string ToString() => string.Format(
			"[{0}] = '{1}'",
			Type,
			Text);

}
}