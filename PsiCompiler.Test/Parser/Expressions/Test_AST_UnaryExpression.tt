﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var tokens = new TokenList()
	{
		{ "Plus",   "+"   },
		{ "Minus",  "-"   },
		{ "Invert", "~"   },
		{ "New",    "new" },
	};
#>
using System;
using System.Collections.Generic;
using NUnit.Framework;
using PsiCompiler.Grammar;

namespace PsiCompiler.Test
{
	[TestFixture]
	public class Test_AST_UnaryExpressions : Test_AST_Base
	{
<#
	foreach(var element in tokens)
	{
#>
		[Test]
		public void UnaryOperatorExpression_<#=element.Item1#>()
		{
			var module = Load("const name = <#=element.Item2#> 10;");
			var expression = module.Declarations[0].Value;

			Assert.IsInstanceOf(typeof(UnaryOperation), expression);
			var op = (UnaryOperation)expression;
			
			Assert.AreEqual(PsiOperator.<#=element.Item1#>, op.Operator);
			Assert.IsInstanceOf(typeof(NumberLiteral), op.Operand);
			Assert.AreEqual("10", ((NumberLiteral)op.Operand).Value);
		}

<#
	}
#>

	}
}

<#+
class TokenList : List<Tuple<string,string>>
	{
		public void Add(string op, string str)
		{
			this.Add(Tuple.Create(op, str));
		}
	}
#>